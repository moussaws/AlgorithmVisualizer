Server running on port 5000
Evaluating expression of type: ArrayExpression
Evaluating expression of type: Literal
Evaluating expression of type: Literal
Evaluating expression of type: Literal
Evaluating expression of type: Literal
Declared variable array with value: [ 6, 1, 3, 5 ]
Entering handleForStatement with node: ForStatement {
  type: 'ForStatement',
  init: VariableDeclaration {
    type: 'VariableDeclaration',
    declarations: [ [VariableDeclarator] ],
    kind: 'var',
    loc: { start: [Object], end: [Object] }
  },
  test: BinaryExpression {
    type: 'BinaryExpression',
    operator: '<',
    left: Identifier { type: 'Identifier', name: 'i', loc: [Object] },
    right: StaticMemberExpression {
      type: 'MemberExpression',
      computed: false,
      object: [Identifier],
      property: [Identifier],
      loc: [Object]
    },
    loc: { start: [Object], end: [Object] }
  },
  update: UpdateExpression {
    type: 'UpdateExpression',
    operator: '++',
    argument: Identifier { type: 'Identifier', name: 'i', loc: [Object] },
    prefix: false,
    loc: { start: [Object], end: [Object] }
  },
  body: BlockStatement {
    type: 'BlockStatement',
    body: [ [ForStatement] ],
    loc: { start: [Object], end: [Object] }
  },
  loc: { start: { line: 2, column: 0 }, end: { line: 10, column: 1 } }
}
Evaluating expression of type: Literal
Declared variable i with value: 0
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Evaluating BinaryExpression: Identifier < MemberExpression
Values: 0 < 4
For loop test condition result: true
Loop test condition is true, entering loop body with context: {
  variables: { array: [ 6, 1, 3, 5 ], i: 0 },
  history: [
    { line: 1, action: 'declare-variable', details: [Object] },
    { line: 2, action: 'declare-variable', details: [Object] }
  ],
  functions: { swap: [Function (anonymous)] }
}
Entering handleForStatement with node: ForStatement {
  type: 'ForStatement',
  init: VariableDeclaration {
    type: 'VariableDeclaration',
    declarations: [ [VariableDeclarator] ],
    kind: 'var',
    loc: { start: [Object], end: [Object] }
  },
  test: BinaryExpression {
    type: 'BinaryExpression',
    operator: '<',
    left: Identifier { type: 'Identifier', name: 'j', loc: [Object] },
    right: BinaryExpression {
      type: 'BinaryExpression',
      operator: '-',
      left: [BinaryExpression],
      right: [Literal],
      loc: [Object]
    },
    loc: { start: [Object], end: [Object] }
  },
  update: UpdateExpression {
    type: 'UpdateExpression',
    operator: '++',
    argument: Identifier { type: 'Identifier', name: 'j', loc: [Object] },
    prefix: false,
    loc: { start: [Object], end: [Object] }
  },
  body: BlockStatement {
    type: 'BlockStatement',
    body: [ [IfStatement] ],
    loc: { start: [Object], end: [Object] }
  },
  loc: { start: { line: 3, column: 4 }, end: { line: 9, column: 5 } }
}
Evaluating expression of type: Literal
Declared variable j with value: 0
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: BinaryExpression
Evaluating expression of type: BinaryExpression
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Evaluating expression of type: Identifier
Evaluating BinaryExpression: MemberExpression - Identifier
Values: 4 - 0
Evaluating expression of type: Literal
Evaluating BinaryExpression: BinaryExpression - Literal
Values: 4 - 1
Evaluating BinaryExpression: Identifier < BinaryExpression
Values: 0 < 3
For loop test condition result: true
Loop test condition is true, entering loop body with context: {
  variables: { array: [ 6, 1, 3, 5 ], i: 0, j: 0 },
  history: [
    { line: 1, action: 'declare-variable', details: [Object] },
    { line: 2, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'declare-variable', details: [Object] }
  ],
  functions: { swap: [Function (anonymous)] }
}
Evaluating expression of type: BinaryExpression
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Evaluating expression of type: MemberExpression
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: Literal
Evaluating BinaryExpression: Identifier + Literal
Values: 0 + 1
Evaluating BinaryExpression: MemberExpression > MemberExpression
Values: 6 > 1
Evaluating expression of type: Identifier
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: Literal
Evaluating BinaryExpression: Identifier + Literal
Values: 0 + 1
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Declared variable temp with value: 1
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Declared variable temp with value: 1
Evaluating expression of type: UpdateExpression
Updating loop variable j to  1
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: BinaryExpression
Evaluating expression of type: BinaryExpression
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Evaluating expression of type: Identifier
Evaluating BinaryExpression: MemberExpression - Identifier
Values: 4 - 0
Evaluating expression of type: Literal
Evaluating BinaryExpression: BinaryExpression - Literal
Values: 4 - 1
Evaluating BinaryExpression: Identifier < BinaryExpression
Values: 1 < 3
For loop test condition result: true
Loop test condition is true, entering loop body with context: {
  variables: { array: [ 1, 6, 3, 5 ], i: 0, j: 1, temp: 1 },
  history: [
    { line: 1, action: 'declare-variable', details: [Object] },
    { line: 2, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'declare-variable', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 6, action: 'swap', details: [Object] },
    { line: 7, action: 'swap', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] }
  ],
  functions: { swap: [Function (anonymous)] }
}
Evaluating expression of type: BinaryExpression
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Evaluating expression of type: MemberExpression
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: Literal
Evaluating BinaryExpression: Identifier + Literal
Values: 1 + 1
Evaluating BinaryExpression: MemberExpression > MemberExpression
Values: 6 > 3
Evaluating expression of type: Identifier
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: Literal
Evaluating BinaryExpression: Identifier + Literal
Values: 1 + 1
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Declared variable temp with value: 3
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Declared variable temp with value: 3
Evaluating expression of type: UpdateExpression
Updating loop variable j to  2
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: BinaryExpression
Evaluating expression of type: BinaryExpression
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Evaluating expression of type: Identifier
Evaluating BinaryExpression: MemberExpression - Identifier
Values: 4 - 0
Evaluating expression of type: Literal
Evaluating BinaryExpression: BinaryExpression - Literal
Values: 4 - 1
Evaluating BinaryExpression: Identifier < BinaryExpression
Values: 2 < 3
For loop test condition result: true
Loop test condition is true, entering loop body with context: {
  variables: { array: [ 1, 3, 6, 5 ], i: 0, j: 2, temp: 3 },
  history: [
    { line: 1, action: 'declare-variable', details: [Object] },
    { line: 2, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'declare-variable', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 6, action: 'swap', details: [Object] },
    { line: 7, action: 'swap', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 6, action: 'swap', details: [Object] },
    { line: 7, action: 'swap', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] }
  ],
  functions: { swap: [Function (anonymous)] }
}
Evaluating expression of type: BinaryExpression
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Evaluating expression of type: MemberExpression
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: Literal
Evaluating BinaryExpression: Identifier + Literal
Values: 2 + 1
Evaluating BinaryExpression: MemberExpression > MemberExpression
Values: 6 > 5
Evaluating expression of type: Identifier
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: Literal
Evaluating BinaryExpression: Identifier + Literal
Values: 2 + 1
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Declared variable temp with value: 5
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Declared variable temp with value: 5
Evaluating expression of type: UpdateExpression
Updating loop variable j to  3
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: BinaryExpression
Evaluating expression of type: BinaryExpression
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Evaluating expression of type: Identifier
Evaluating BinaryExpression: MemberExpression - Identifier
Values: 4 - 0
Evaluating expression of type: Literal
Evaluating BinaryExpression: BinaryExpression - Literal
Values: 4 - 1
Evaluating BinaryExpression: Identifier < BinaryExpression
Values: 3 < 3
For loop test condition result: false
Loop test condition is false, exiting loop
Evaluating expression of type: UpdateExpression
Updating loop variable i to  1
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Evaluating BinaryExpression: Identifier < MemberExpression
Values: 1 < 4
For loop test condition result: true
Loop test condition is true, entering loop body with context: {
  variables: { array: [ 1, 3, 5, 6 ], i: 1, j: 3, temp: 5 },
  history: [
    { line: 1, action: 'declare-variable', details: [Object] },
    { line: 2, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'declare-variable', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 6, action: 'swap', details: [Object] },
    { line: 7, action: 'swap', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 6, action: 'swap', details: [Object] },
    { line: 7, action: 'swap', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 6, action: 'swap', details: [Object] },
    { line: 7, action: 'swap', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 9, action: 'loop-end', details: null },
    { line: 2, action: 'loop-update', details: [Object] }
  ],
  functions: { swap: [Function (anonymous)] }
}
Entering handleForStatement with node: ForStatement {
  type: 'ForStatement',
  init: VariableDeclaration {
    type: 'VariableDeclaration',
    declarations: [ [VariableDeclarator] ],
    kind: 'var',
    loc: { start: [Object], end: [Object] }
  },
  test: BinaryExpression {
    type: 'BinaryExpression',
    operator: '<',
    left: Identifier { type: 'Identifier', name: 'j', loc: [Object] },
    right: BinaryExpression {
      type: 'BinaryExpression',
      operator: '-',
      left: [BinaryExpression],
      right: [Literal],
      loc: [Object]
    },
    loc: { start: [Object], end: [Object] }
  },
  update: UpdateExpression {
    type: 'UpdateExpression',
    operator: '++',
    argument: Identifier { type: 'Identifier', name: 'j', loc: [Object] },
    prefix: false,
    loc: { start: [Object], end: [Object] }
  },
  body: BlockStatement {
    type: 'BlockStatement',
    body: [ [IfStatement] ],
    loc: { start: [Object], end: [Object] }
  },
  loc: { start: { line: 3, column: 4 }, end: { line: 9, column: 5 } }
}
Evaluating expression of type: Literal
Declared variable j with value: 0
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: BinaryExpression
Evaluating expression of type: BinaryExpression
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Evaluating expression of type: Identifier
Evaluating BinaryExpression: MemberExpression - Identifier
Values: 4 - 1
Evaluating expression of type: Literal
Evaluating BinaryExpression: BinaryExpression - Literal
Values: 3 - 1
Evaluating BinaryExpression: Identifier < BinaryExpression
Values: 0 < 2
For loop test condition result: true
Loop test condition is true, entering loop body with context: {
  variables: { array: [ 1, 3, 5, 6 ], i: 1, j: 0, temp: 5 },
  history: [
    { line: 1, action: 'declare-variable', details: [Object] },
    { line: 2, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'declare-variable', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 6, action: 'swap', details: [Object] },
    { line: 7, action: 'swap', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 6, action: 'swap', details: [Object] },
    { line: 7, action: 'swap', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 6, action: 'swap', details: [Object] },
    { line: 7, action: 'swap', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 9, action: 'loop-end', details: null },
    { line: 2, action: 'loop-update', details: [Object] },
    { line: 3, action: 'declare-variable', details: [Object] }
  ],
  functions: { swap: [Function (anonymous)] }
}
Evaluating expression of type: BinaryExpression
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Evaluating expression of type: MemberExpression
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: Literal
Evaluating BinaryExpression: Identifier + Literal
Values: 0 + 1
Evaluating BinaryExpression: MemberExpression > MemberExpression
Values: 1 > 3
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Declared variable temp with value: 1
Evaluating expression of type: UpdateExpression
Updating loop variable j to  1
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: BinaryExpression
Evaluating expression of type: BinaryExpression
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Evaluating expression of type: Identifier
Evaluating BinaryExpression: MemberExpression - Identifier
Values: 4 - 1
Evaluating expression of type: Literal
Evaluating BinaryExpression: BinaryExpression - Literal
Values: 3 - 1
Evaluating BinaryExpression: Identifier < BinaryExpression
Values: 1 < 2
For loop test condition result: true
Loop test condition is true, entering loop body with context: {
  variables: { array: [ 1, 3, 5, 6 ], i: 1, j: 1, temp: 1 },
  history: [
    { line: 1, action: 'declare-variable', details: [Object] },
    { line: 2, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'declare-variable', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 6, action: 'swap', details: [Object] },
    { line: 7, action: 'swap', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 6, action: 'swap', details: [Object] },
    { line: 7, action: 'swap', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 6, action: 'swap', details: [Object] },
    { line: 7, action: 'swap', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 9, action: 'loop-end', details: null },
    { line: 2, action: 'loop-update', details: [Object] },
    { line: 3, action: 'declare-variable', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] }
  ],
  functions: { swap: [Function (anonymous)] }
}
Evaluating expression of type: BinaryExpression
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Evaluating expression of type: MemberExpression
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: Literal
Evaluating BinaryExpression: Identifier + Literal
Values: 1 + 1
Evaluating BinaryExpression: MemberExpression > MemberExpression
Values: 3 > 5
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Declared variable temp with value: 3
Evaluating expression of type: UpdateExpression
Updating loop variable j to  2
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: BinaryExpression
Evaluating expression of type: BinaryExpression
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Evaluating expression of type: Identifier
Evaluating BinaryExpression: MemberExpression - Identifier
Values: 4 - 1
Evaluating expression of type: Literal
Evaluating BinaryExpression: BinaryExpression - Literal
Values: 3 - 1
Evaluating BinaryExpression: Identifier < BinaryExpression
Values: 2 < 2
For loop test condition result: false
Loop test condition is false, exiting loop
Evaluating expression of type: UpdateExpression
Updating loop variable i to  2
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Evaluating BinaryExpression: Identifier < MemberExpression
Values: 2 < 4
For loop test condition result: true
Loop test condition is true, entering loop body with context: {
  variables: { array: [ 1, 3, 5, 6 ], i: 2, j: 2, temp: 3 },
  history: [
    { line: 1, action: 'declare-variable', details: [Object] },
    { line: 2, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'declare-variable', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 6, action: 'swap', details: [Object] },
    { line: 7, action: 'swap', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 6, action: 'swap', details: [Object] },
    { line: 7, action: 'swap', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 6, action: 'swap', details: [Object] },
    { line: 7, action: 'swap', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 9, action: 'loop-end', details: null },
    { line: 2, action: 'loop-update', details: [Object] },
    { line: 3, action: 'declare-variable', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 9, action: 'loop-end', details: null },
    { line: 2, action: 'loop-update', details: [Object] }
  ],
  functions: { swap: [Function (anonymous)] }
}
Entering handleForStatement with node: ForStatement {
  type: 'ForStatement',
  init: VariableDeclaration {
    type: 'VariableDeclaration',
    declarations: [ [VariableDeclarator] ],
    kind: 'var',
    loc: { start: [Object], end: [Object] }
  },
  test: BinaryExpression {
    type: 'BinaryExpression',
    operator: '<',
    left: Identifier { type: 'Identifier', name: 'j', loc: [Object] },
    right: BinaryExpression {
      type: 'BinaryExpression',
      operator: '-',
      left: [BinaryExpression],
      right: [Literal],
      loc: [Object]
    },
    loc: { start: [Object], end: [Object] }
  },
  update: UpdateExpression {
    type: 'UpdateExpression',
    operator: '++',
    argument: Identifier { type: 'Identifier', name: 'j', loc: [Object] },
    prefix: false,
    loc: { start: [Object], end: [Object] }
  },
  body: BlockStatement {
    type: 'BlockStatement',
    body: [ [IfStatement] ],
    loc: { start: [Object], end: [Object] }
  },
  loc: { start: { line: 3, column: 4 }, end: { line: 9, column: 5 } }
}
Evaluating expression of type: Literal
Declared variable j with value: 0
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: BinaryExpression
Evaluating expression of type: BinaryExpression
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Evaluating expression of type: Identifier
Evaluating BinaryExpression: MemberExpression - Identifier
Values: 4 - 2
Evaluating expression of type: Literal
Evaluating BinaryExpression: BinaryExpression - Literal
Values: 2 - 1
Evaluating BinaryExpression: Identifier < BinaryExpression
Values: 0 < 1
For loop test condition result: true
Loop test condition is true, entering loop body with context: {
  variables: { array: [ 1, 3, 5, 6 ], i: 2, j: 0, temp: 3 },
  history: [
    { line: 1, action: 'declare-variable', details: [Object] },
    { line: 2, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'declare-variable', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 6, action: 'swap', details: [Object] },
    { line: 7, action: 'swap', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 6, action: 'swap', details: [Object] },
    { line: 7, action: 'swap', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 6, action: 'swap', details: [Object] },
    { line: 7, action: 'swap', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 9, action: 'loop-end', details: null },
    { line: 2, action: 'loop-update', details: [Object] },
    { line: 3, action: 'declare-variable', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 9, action: 'loop-end', details: null },
    { line: 2, action: 'loop-update', details: [Object] },
    { line: 3, action: 'declare-variable', details: [Object] }
  ],
  functions: { swap: [Function (anonymous)] }
}
Evaluating expression of type: BinaryExpression
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Evaluating expression of type: MemberExpression
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: Literal
Evaluating BinaryExpression: Identifier + Literal
Values: 0 + 1
Evaluating BinaryExpression: MemberExpression > MemberExpression
Values: 1 > 3
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Declared variable temp with value: 1
Evaluating expression of type: UpdateExpression
Updating loop variable j to  1
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: BinaryExpression
Evaluating expression of type: BinaryExpression
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Evaluating expression of type: Identifier
Evaluating BinaryExpression: MemberExpression - Identifier
Values: 4 - 2
Evaluating expression of type: Literal
Evaluating BinaryExpression: BinaryExpression - Literal
Values: 2 - 1
Evaluating BinaryExpression: Identifier < BinaryExpression
Values: 1 < 1
For loop test condition result: false
Loop test condition is false, exiting loop
Evaluating expression of type: UpdateExpression
Updating loop variable i to  3
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Evaluating BinaryExpression: Identifier < MemberExpression
Values: 3 < 4
For loop test condition result: true
Loop test condition is true, entering loop body with context: {
  variables: { array: [ 1, 3, 5, 6 ], i: 3, j: 1, temp: 1 },
  history: [
    { line: 1, action: 'declare-variable', details: [Object] },
    { line: 2, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'declare-variable', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 6, action: 'swap', details: [Object] },
    { line: 7, action: 'swap', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 6, action: 'swap', details: [Object] },
    { line: 7, action: 'swap', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 6, action: 'swap', details: [Object] },
    { line: 7, action: 'swap', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 9, action: 'loop-end', details: null },
    { line: 2, action: 'loop-update', details: [Object] },
    { line: 3, action: 'declare-variable', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 9, action: 'loop-end', details: null },
    { line: 2, action: 'loop-update', details: [Object] },
    { line: 3, action: 'declare-variable', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 9, action: 'loop-end', details: null },
    { line: 2, action: 'loop-update', details: [Object] }
  ],
  functions: { swap: [Function (anonymous)] }
}
Entering handleForStatement with node: ForStatement {
  type: 'ForStatement',
  init: VariableDeclaration {
    type: 'VariableDeclaration',
    declarations: [ [VariableDeclarator] ],
    kind: 'var',
    loc: { start: [Object], end: [Object] }
  },
  test: BinaryExpression {
    type: 'BinaryExpression',
    operator: '<',
    left: Identifier { type: 'Identifier', name: 'j', loc: [Object] },
    right: BinaryExpression {
      type: 'BinaryExpression',
      operator: '-',
      left: [BinaryExpression],
      right: [Literal],
      loc: [Object]
    },
    loc: { start: [Object], end: [Object] }
  },
  update: UpdateExpression {
    type: 'UpdateExpression',
    operator: '++',
    argument: Identifier { type: 'Identifier', name: 'j', loc: [Object] },
    prefix: false,
    loc: { start: [Object], end: [Object] }
  },
  body: BlockStatement {
    type: 'BlockStatement',
    body: [ [IfStatement] ],
    loc: { start: [Object], end: [Object] }
  },
  loc: { start: { line: 3, column: 4 }, end: { line: 9, column: 5 } }
}
Evaluating expression of type: Literal
Declared variable j with value: 0
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: BinaryExpression
Evaluating expression of type: BinaryExpression
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Evaluating expression of type: Identifier
Evaluating BinaryExpression: MemberExpression - Identifier
Values: 4 - 3
Evaluating expression of type: Literal
Evaluating BinaryExpression: BinaryExpression - Literal
Values: 1 - 1
Evaluating BinaryExpression: Identifier < BinaryExpression
Values: 0 < 0
For loop test condition result: false
Loop test condition is false, exiting loop
Evaluating expression of type: UpdateExpression
Updating loop variable i to  4
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Evaluating BinaryExpression: Identifier < MemberExpression
Values: 4 < 4
For loop test condition result: false
Loop test condition is false, exiting loop
Evaluating expression of type: ArrayExpression
Evaluating expression of type: Literal
Evaluating expression of type: Literal
Evaluating expression of type: Literal
Evaluating expression of type: Literal
Declared variable array with value: [ 6, 1, 3, 5 ]
Entering handleForStatement with node: ForStatement {
  type: 'ForStatement',
  init: VariableDeclaration {
    type: 'VariableDeclaration',
    declarations: [ [VariableDeclarator] ],
    kind: 'var',
    loc: { start: [Object], end: [Object] }
  },
  test: BinaryExpression {
    type: 'BinaryExpression',
    operator: '<',
    left: Identifier { type: 'Identifier', name: 'i', loc: [Object] },
    right: StaticMemberExpression {
      type: 'MemberExpression',
      computed: false,
      object: [Identifier],
      property: [Identifier],
      loc: [Object]
    },
    loc: { start: [Object], end: [Object] }
  },
  update: UpdateExpression {
    type: 'UpdateExpression',
    operator: '++',
    argument: Identifier { type: 'Identifier', name: 'i', loc: [Object] },
    prefix: false,
    loc: { start: [Object], end: [Object] }
  },
  body: BlockStatement {
    type: 'BlockStatement',
    body: [ [ForStatement] ],
    loc: { start: [Object], end: [Object] }
  },
  loc: { start: { line: 2, column: 0 }, end: { line: 10, column: 1 } }
}
Evaluating expression of type: Literal
Declared variable i with value: 0
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Evaluating BinaryExpression: Identifier < MemberExpression
Values: 0 < 4
For loop test condition result: true
Loop test condition is true, entering loop body with context: {
  variables: { array: [ 6, 1, 3, 5 ], i: 0 },
  history: [
    { line: 1, action: 'declare-variable', details: [Object] },
    { line: 2, action: 'declare-variable', details: [Object] }
  ],
  functions: { swap: [Function (anonymous)] }
}
Entering handleForStatement with node: ForStatement {
  type: 'ForStatement',
  init: VariableDeclaration {
    type: 'VariableDeclaration',
    declarations: [ [VariableDeclarator] ],
    kind: 'var',
    loc: { start: [Object], end: [Object] }
  },
  test: BinaryExpression {
    type: 'BinaryExpression',
    operator: '<',
    left: Identifier { type: 'Identifier', name: 'j', loc: [Object] },
    right: BinaryExpression {
      type: 'BinaryExpression',
      operator: '-',
      left: [BinaryExpression],
      right: [Literal],
      loc: [Object]
    },
    loc: { start: [Object], end: [Object] }
  },
  update: UpdateExpression {
    type: 'UpdateExpression',
    operator: '++',
    argument: Identifier { type: 'Identifier', name: 'j', loc: [Object] },
    prefix: false,
    loc: { start: [Object], end: [Object] }
  },
  body: BlockStatement {
    type: 'BlockStatement',
    body: [ [IfStatement] ],
    loc: { start: [Object], end: [Object] }
  },
  loc: { start: { line: 3, column: 4 }, end: { line: 9, column: 5 } }
}
Evaluating expression of type: Literal
Declared variable j with value: 0
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: BinaryExpression
Evaluating expression of type: BinaryExpression
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Evaluating expression of type: Identifier
Evaluating BinaryExpression: MemberExpression - Identifier
Values: 4 - 0
Evaluating expression of type: Literal
Evaluating BinaryExpression: BinaryExpression - Literal
Values: 4 - 1
Evaluating BinaryExpression: Identifier < BinaryExpression
Values: 0 < 3
For loop test condition result: true
Loop test condition is true, entering loop body with context: {
  variables: { array: [ 6, 1, 3, 5 ], i: 0, j: 0 },
  history: [
    { line: 1, action: 'declare-variable', details: [Object] },
    { line: 2, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'declare-variable', details: [Object] }
  ],
  functions: { swap: [Function (anonymous)] }
}
Evaluating expression of type: BinaryExpression
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Evaluating expression of type: MemberExpression
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: Literal
Evaluating BinaryExpression: Identifier + Literal
Values: 0 + 1
Evaluating BinaryExpression: MemberExpression > MemberExpression
Values: 6 > 1
Evaluating expression of type: Identifier
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: Literal
Evaluating BinaryExpression: Identifier + Literal
Values: 0 + 1
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Declared variable temp with value: 1
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Declared variable temp with value: 1
Evaluating expression of type: UpdateExpression
Updating loop variable j to  1
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: BinaryExpression
Evaluating expression of type: BinaryExpression
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Evaluating expression of type: Identifier
Evaluating BinaryExpression: MemberExpression - Identifier
Values: 4 - 0
Evaluating expression of type: Literal
Evaluating BinaryExpression: BinaryExpression - Literal
Values: 4 - 1
Evaluating BinaryExpression: Identifier < BinaryExpression
Values: 1 < 3
For loop test condition result: true
Loop test condition is true, entering loop body with context: {
  variables: { array: [ 1, 6, 3, 5 ], i: 0, j: 1, temp: 1 },
  history: [
    { line: 1, action: 'declare-variable', details: [Object] },
    { line: 2, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'declare-variable', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 6, action: 'swap', details: [Object] },
    { line: 7, action: 'swap', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] }
  ],
  functions: { swap: [Function (anonymous)] }
}
Evaluating expression of type: BinaryExpression
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Evaluating expression of type: MemberExpression
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: Literal
Evaluating BinaryExpression: Identifier + Literal
Values: 1 + 1
Evaluating BinaryExpression: MemberExpression > MemberExpression
Values: 6 > 3
Evaluating expression of type: Identifier
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: Literal
Evaluating BinaryExpression: Identifier + Literal
Values: 1 + 1
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Declared variable temp with value: 3
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Declared variable temp with value: 3
Evaluating expression of type: UpdateExpression
Updating loop variable j to  2
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: BinaryExpression
Evaluating expression of type: BinaryExpression
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Evaluating expression of type: Identifier
Evaluating BinaryExpression: MemberExpression - Identifier
Values: 4 - 0
Evaluating expression of type: Literal
Evaluating BinaryExpression: BinaryExpression - Literal
Values: 4 - 1
Evaluating BinaryExpression: Identifier < BinaryExpression
Values: 2 < 3
For loop test condition result: true
Loop test condition is true, entering loop body with context: {
  variables: { array: [ 1, 3, 6, 5 ], i: 0, j: 2, temp: 3 },
  history: [
    { line: 1, action: 'declare-variable', details: [Object] },
    { line: 2, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'declare-variable', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 6, action: 'swap', details: [Object] },
    { line: 7, action: 'swap', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 6, action: 'swap', details: [Object] },
    { line: 7, action: 'swap', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] }
  ],
  functions: { swap: [Function (anonymous)] }
}
Evaluating expression of type: BinaryExpression
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Evaluating expression of type: MemberExpression
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: Literal
Evaluating BinaryExpression: Identifier + Literal
Values: 2 + 1
Evaluating BinaryExpression: MemberExpression > MemberExpression
Values: 6 > 5
Evaluating expression of type: Identifier
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: Literal
Evaluating BinaryExpression: Identifier + Literal
Values: 2 + 1
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Declared variable temp with value: 5
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Declared variable temp with value: 5
Evaluating expression of type: UpdateExpression
Updating loop variable j to  3
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: BinaryExpression
Evaluating expression of type: BinaryExpression
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Evaluating expression of type: Identifier
Evaluating BinaryExpression: MemberExpression - Identifier
Values: 4 - 0
Evaluating expression of type: Literal
Evaluating BinaryExpression: BinaryExpression - Literal
Values: 4 - 1
Evaluating BinaryExpression: Identifier < BinaryExpression
Values: 3 < 3
For loop test condition result: false
Loop test condition is false, exiting loop
Evaluating expression of type: UpdateExpression
Updating loop variable i to  1
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Evaluating BinaryExpression: Identifier < MemberExpression
Values: 1 < 4
For loop test condition result: true
Loop test condition is true, entering loop body with context: {
  variables: { array: [ 1, 3, 5, 6 ], i: 1, j: 3, temp: 5 },
  history: [
    { line: 1, action: 'declare-variable', details: [Object] },
    { line: 2, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'declare-variable', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 6, action: 'swap', details: [Object] },
    { line: 7, action: 'swap', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 6, action: 'swap', details: [Object] },
    { line: 7, action: 'swap', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 6, action: 'swap', details: [Object] },
    { line: 7, action: 'swap', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 9, action: 'loop-end', details: null },
    { line: 2, action: 'loop-update', details: [Object] }
  ],
  functions: { swap: [Function (anonymous)] }
}
Entering handleForStatement with node: ForStatement {
  type: 'ForStatement',
  init: VariableDeclaration {
    type: 'VariableDeclaration',
    declarations: [ [VariableDeclarator] ],
    kind: 'var',
    loc: { start: [Object], end: [Object] }
  },
  test: BinaryExpression {
    type: 'BinaryExpression',
    operator: '<',
    left: Identifier { type: 'Identifier', name: 'j', loc: [Object] },
    right: BinaryExpression {
      type: 'BinaryExpression',
      operator: '-',
      left: [BinaryExpression],
      right: [Literal],
      loc: [Object]
    },
    loc: { start: [Object], end: [Object] }
  },
  update: UpdateExpression {
    type: 'UpdateExpression',
    operator: '++',
    argument: Identifier { type: 'Identifier', name: 'j', loc: [Object] },
    prefix: false,
    loc: { start: [Object], end: [Object] }
  },
  body: BlockStatement {
    type: 'BlockStatement',
    body: [ [IfStatement] ],
    loc: { start: [Object], end: [Object] }
  },
  loc: { start: { line: 3, column: 4 }, end: { line: 9, column: 5 } }
}
Evaluating expression of type: Literal
Declared variable j with value: 0
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: BinaryExpression
Evaluating expression of type: BinaryExpression
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Evaluating expression of type: Identifier
Evaluating BinaryExpression: MemberExpression - Identifier
Values: 4 - 1
Evaluating expression of type: Literal
Evaluating BinaryExpression: BinaryExpression - Literal
Values: 3 - 1
Evaluating BinaryExpression: Identifier < BinaryExpression
Values: 0 < 2
For loop test condition result: true
Loop test condition is true, entering loop body with context: {
  variables: { array: [ 1, 3, 5, 6 ], i: 1, j: 0, temp: 5 },
  history: [
    { line: 1, action: 'declare-variable', details: [Object] },
    { line: 2, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'declare-variable', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 6, action: 'swap', details: [Object] },
    { line: 7, action: 'swap', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 6, action: 'swap', details: [Object] },
    { line: 7, action: 'swap', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 6, action: 'swap', details: [Object] },
    { line: 7, action: 'swap', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 9, action: 'loop-end', details: null },
    { line: 2, action: 'loop-update', details: [Object] },
    { line: 3, action: 'declare-variable', details: [Object] }
  ],
  functions: { swap: [Function (anonymous)] }
}
Evaluating expression of type: BinaryExpression
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Evaluating expression of type: MemberExpression
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: Literal
Evaluating BinaryExpression: Identifier + Literal
Values: 0 + 1
Evaluating BinaryExpression: MemberExpression > MemberExpression
Values: 1 > 3
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Declared variable temp with value: 1
Evaluating expression of type: UpdateExpression
Updating loop variable j to  1
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: BinaryExpression
Evaluating expression of type: BinaryExpression
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Evaluating expression of type: Identifier
Evaluating BinaryExpression: MemberExpression - Identifier
Values: 4 - 1
Evaluating expression of type: Literal
Evaluating BinaryExpression: BinaryExpression - Literal
Values: 3 - 1
Evaluating BinaryExpression: Identifier < BinaryExpression
Values: 1 < 2
For loop test condition result: true
Loop test condition is true, entering loop body with context: {
  variables: { array: [ 1, 3, 5, 6 ], i: 1, j: 1, temp: 1 },
  history: [
    { line: 1, action: 'declare-variable', details: [Object] },
    { line: 2, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'declare-variable', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 6, action: 'swap', details: [Object] },
    { line: 7, action: 'swap', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 6, action: 'swap', details: [Object] },
    { line: 7, action: 'swap', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 6, action: 'swap', details: [Object] },
    { line: 7, action: 'swap', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 9, action: 'loop-end', details: null },
    { line: 2, action: 'loop-update', details: [Object] },
    { line: 3, action: 'declare-variable', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] }
  ],
  functions: { swap: [Function (anonymous)] }
}
Evaluating expression of type: BinaryExpression
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Evaluating expression of type: MemberExpression
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: Literal
Evaluating BinaryExpression: Identifier + Literal
Values: 1 + 1
Evaluating BinaryExpression: MemberExpression > MemberExpression
Values: 3 > 5
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Declared variable temp with value: 3
Evaluating expression of type: UpdateExpression
Updating loop variable j to  2
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: BinaryExpression
Evaluating expression of type: BinaryExpression
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Evaluating expression of type: Identifier
Evaluating BinaryExpression: MemberExpression - Identifier
Values: 4 - 1
Evaluating expression of type: Literal
Evaluating BinaryExpression: BinaryExpression - Literal
Values: 3 - 1
Evaluating BinaryExpression: Identifier < BinaryExpression
Values: 2 < 2
For loop test condition result: false
Loop test condition is false, exiting loop
Evaluating expression of type: UpdateExpression
Updating loop variable i to  2
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Evaluating BinaryExpression: Identifier < MemberExpression
Values: 2 < 4
For loop test condition result: true
Loop test condition is true, entering loop body with context: {
  variables: { array: [ 1, 3, 5, 6 ], i: 2, j: 2, temp: 3 },
  history: [
    { line: 1, action: 'declare-variable', details: [Object] },
    { line: 2, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'declare-variable', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 6, action: 'swap', details: [Object] },
    { line: 7, action: 'swap', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 6, action: 'swap', details: [Object] },
    { line: 7, action: 'swap', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 6, action: 'swap', details: [Object] },
    { line: 7, action: 'swap', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 9, action: 'loop-end', details: null },
    { line: 2, action: 'loop-update', details: [Object] },
    { line: 3, action: 'declare-variable', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 9, action: 'loop-end', details: null },
    { line: 2, action: 'loop-update', details: [Object] }
  ],
  functions: { swap: [Function (anonymous)] }
}
Entering handleForStatement with node: ForStatement {
  type: 'ForStatement',
  init: VariableDeclaration {
    type: 'VariableDeclaration',
    declarations: [ [VariableDeclarator] ],
    kind: 'var',
    loc: { start: [Object], end: [Object] }
  },
  test: BinaryExpression {
    type: 'BinaryExpression',
    operator: '<',
    left: Identifier { type: 'Identifier', name: 'j', loc: [Object] },
    right: BinaryExpression {
      type: 'BinaryExpression',
      operator: '-',
      left: [BinaryExpression],
      right: [Literal],
      loc: [Object]
    },
    loc: { start: [Object], end: [Object] }
  },
  update: UpdateExpression {
    type: 'UpdateExpression',
    operator: '++',
    argument: Identifier { type: 'Identifier', name: 'j', loc: [Object] },
    prefix: false,
    loc: { start: [Object], end: [Object] }
  },
  body: BlockStatement {
    type: 'BlockStatement',
    body: [ [IfStatement] ],
    loc: { start: [Object], end: [Object] }
  },
  loc: { start: { line: 3, column: 4 }, end: { line: 9, column: 5 } }
}
Evaluating expression of type: Literal
Declared variable j with value: 0
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: BinaryExpression
Evaluating expression of type: BinaryExpression
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Evaluating expression of type: Identifier
Evaluating BinaryExpression: MemberExpression - Identifier
Values: 4 - 2
Evaluating expression of type: Literal
Evaluating BinaryExpression: BinaryExpression - Literal
Values: 2 - 1
Evaluating BinaryExpression: Identifier < BinaryExpression
Values: 0 < 1
For loop test condition result: true
Loop test condition is true, entering loop body with context: {
  variables: { array: [ 1, 3, 5, 6 ], i: 2, j: 0, temp: 3 },
  history: [
    { line: 1, action: 'declare-variable', details: [Object] },
    { line: 2, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'declare-variable', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 6, action: 'swap', details: [Object] },
    { line: 7, action: 'swap', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 6, action: 'swap', details: [Object] },
    { line: 7, action: 'swap', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 6, action: 'swap', details: [Object] },
    { line: 7, action: 'swap', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 9, action: 'loop-end', details: null },
    { line: 2, action: 'loop-update', details: [Object] },
    { line: 3, action: 'declare-variable', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 9, action: 'loop-end', details: null },
    { line: 2, action: 'loop-update', details: [Object] },
    { line: 3, action: 'declare-variable', details: [Object] }
  ],
  functions: { swap: [Function (anonymous)] }
}
Evaluating expression of type: BinaryExpression
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Evaluating expression of type: MemberExpression
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: Literal
Evaluating BinaryExpression: Identifier + Literal
Values: 0 + 1
Evaluating BinaryExpression: MemberExpression > MemberExpression
Values: 1 > 3
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Declared variable temp with value: 1
Evaluating expression of type: UpdateExpression
Updating loop variable j to  1
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: BinaryExpression
Evaluating expression of type: BinaryExpression
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Evaluating expression of type: Identifier
Evaluating BinaryExpression: MemberExpression - Identifier
Values: 4 - 2
Evaluating expression of type: Literal
Evaluating BinaryExpression: BinaryExpression - Literal
Values: 2 - 1
Evaluating BinaryExpression: Identifier < BinaryExpression
Values: 1 < 1
For loop test condition result: false
Loop test condition is false, exiting loop
Evaluating expression of type: UpdateExpression
Updating loop variable i to  3
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Evaluating BinaryExpression: Identifier < MemberExpression
Values: 3 < 4
For loop test condition result: true
Loop test condition is true, entering loop body with context: {
  variables: { array: [ 1, 3, 5, 6 ], i: 3, j: 1, temp: 1 },
  history: [
    { line: 1, action: 'declare-variable', details: [Object] },
    { line: 2, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'declare-variable', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 6, action: 'swap', details: [Object] },
    { line: 7, action: 'swap', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 6, action: 'swap', details: [Object] },
    { line: 7, action: 'swap', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 6, action: 'swap', details: [Object] },
    { line: 7, action: 'swap', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 9, action: 'loop-end', details: null },
    { line: 2, action: 'loop-update', details: [Object] },
    { line: 3, action: 'declare-variable', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 9, action: 'loop-end', details: null },
    { line: 2, action: 'loop-update', details: [Object] },
    { line: 3, action: 'declare-variable', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 9, action: 'loop-end', details: null },
    { line: 2, action: 'loop-update', details: [Object] }
  ],
  functions: { swap: [Function (anonymous)] }
}
Entering handleForStatement with node: ForStatement {
  type: 'ForStatement',
  init: VariableDeclaration {
    type: 'VariableDeclaration',
    declarations: [ [VariableDeclarator] ],
    kind: 'var',
    loc: { start: [Object], end: [Object] }
  },
  test: BinaryExpression {
    type: 'BinaryExpression',
    operator: '<',
    left: Identifier { type: 'Identifier', name: 'j', loc: [Object] },
    right: BinaryExpression {
      type: 'BinaryExpression',
      operator: '-',
      left: [BinaryExpression],
      right: [Literal],
      loc: [Object]
    },
    loc: { start: [Object], end: [Object] }
  },
  update: UpdateExpression {
    type: 'UpdateExpression',
    operator: '++',
    argument: Identifier { type: 'Identifier', name: 'j', loc: [Object] },
    prefix: false,
    loc: { start: [Object], end: [Object] }
  },
  body: BlockStatement {
    type: 'BlockStatement',
    body: [ [IfStatement] ],
    loc: { start: [Object], end: [Object] }
  },
  loc: { start: { line: 3, column: 4 }, end: { line: 9, column: 5 } }
}
Evaluating expression of type: Literal
Declared variable j with value: 0
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: BinaryExpression
Evaluating expression of type: BinaryExpression
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Evaluating expression of type: Identifier
Evaluating BinaryExpression: MemberExpression - Identifier
Values: 4 - 3
Evaluating expression of type: Literal
Evaluating BinaryExpression: BinaryExpression - Literal
Values: 1 - 1
Evaluating BinaryExpression: Identifier < BinaryExpression
Values: 0 < 0
For loop test condition result: false
Loop test condition is false, exiting loop
Evaluating expression of type: UpdateExpression
Updating loop variable i to  4
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Evaluating BinaryExpression: Identifier < MemberExpression
Values: 4 < 4
For loop test condition result: false
Loop test condition is false, exiting loop
Evaluating expression of type: ArrayExpression
Evaluating expression of type: Literal
Evaluating expression of type: Literal
Evaluating expression of type: Literal
Evaluating expression of type: Literal
Declared variable array with value: [ 6, 1, 3, 5 ]
Entering handleForStatement with node: ForStatement {
  type: 'ForStatement',
  init: VariableDeclaration {
    type: 'VariableDeclaration',
    declarations: [ [VariableDeclarator] ],
    kind: 'var',
    loc: { start: [Object], end: [Object] }
  },
  test: BinaryExpression {
    type: 'BinaryExpression',
    operator: '<',
    left: Identifier { type: 'Identifier', name: 'i', loc: [Object] },
    right: StaticMemberExpression {
      type: 'MemberExpression',
      computed: false,
      object: [Identifier],
      property: [Identifier],
      loc: [Object]
    },
    loc: { start: [Object], end: [Object] }
  },
  update: UpdateExpression {
    type: 'UpdateExpression',
    operator: '++',
    argument: Identifier { type: 'Identifier', name: 'i', loc: [Object] },
    prefix: false,
    loc: { start: [Object], end: [Object] }
  },
  body: BlockStatement {
    type: 'BlockStatement',
    body: [ [ForStatement] ],
    loc: { start: [Object], end: [Object] }
  },
  loc: { start: { line: 2, column: 0 }, end: { line: 10, column: 1 } }
}
Evaluating expression of type: Literal
Declared variable i with value: 0
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Evaluating BinaryExpression: Identifier < MemberExpression
Values: 0 < 4
For loop test condition result: true
Loop test condition is true, entering loop body with context: {
  variables: { array: [ 6, 1, 3, 5 ], i: 0 },
  history: [
    { line: 1, action: 'declare-variable', details: [Object] },
    { line: 2, action: 'declare-variable', details: [Object] }
  ],
  functions: { swap: [Function (anonymous)] }
}
Entering handleForStatement with node: ForStatement {
  type: 'ForStatement',
  init: VariableDeclaration {
    type: 'VariableDeclaration',
    declarations: [ [VariableDeclarator] ],
    kind: 'var',
    loc: { start: [Object], end: [Object] }
  },
  test: BinaryExpression {
    type: 'BinaryExpression',
    operator: '<',
    left: Identifier { type: 'Identifier', name: 'j', loc: [Object] },
    right: BinaryExpression {
      type: 'BinaryExpression',
      operator: '-',
      left: [BinaryExpression],
      right: [Literal],
      loc: [Object]
    },
    loc: { start: [Object], end: [Object] }
  },
  update: UpdateExpression {
    type: 'UpdateExpression',
    operator: '++',
    argument: Identifier { type: 'Identifier', name: 'j', loc: [Object] },
    prefix: false,
    loc: { start: [Object], end: [Object] }
  },
  body: BlockStatement {
    type: 'BlockStatement',
    body: [ [IfStatement] ],
    loc: { start: [Object], end: [Object] }
  },
  loc: { start: { line: 3, column: 4 }, end: { line: 9, column: 5 } }
}
Evaluating expression of type: Literal
Declared variable j with value: 0
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: BinaryExpression
Evaluating expression of type: BinaryExpression
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Evaluating expression of type: Identifier
Evaluating BinaryExpression: MemberExpression - Identifier
Values: 4 - 0
Evaluating expression of type: Literal
Evaluating BinaryExpression: BinaryExpression - Literal
Values: 4 - 1
Evaluating BinaryExpression: Identifier < BinaryExpression
Values: 0 < 3
For loop test condition result: true
Loop test condition is true, entering loop body with context: {
  variables: { array: [ 6, 1, 3, 5 ], i: 0, j: 0 },
  history: [
    { line: 1, action: 'declare-variable', details: [Object] },
    { line: 2, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'declare-variable', details: [Object] }
  ],
  functions: { swap: [Function (anonymous)] }
}
Evaluating expression of type: BinaryExpression
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Evaluating expression of type: MemberExpression
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: Literal
Evaluating BinaryExpression: Identifier + Literal
Values: 0 + 1
Evaluating BinaryExpression: MemberExpression > MemberExpression
Values: 6 > 1
Evaluating expression of type: Identifier
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: Literal
Evaluating BinaryExpression: Identifier + Literal
Values: 0 + 1
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Declared variable temp with value: 1
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Declared variable temp with value: 1
Evaluating expression of type: UpdateExpression
Updating loop variable j to  1
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: BinaryExpression
Evaluating expression of type: BinaryExpression
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Evaluating expression of type: Identifier
Evaluating BinaryExpression: MemberExpression - Identifier
Values: 4 - 0
Evaluating expression of type: Literal
Evaluating BinaryExpression: BinaryExpression - Literal
Values: 4 - 1
Evaluating BinaryExpression: Identifier < BinaryExpression
Values: 1 < 3
For loop test condition result: true
Loop test condition is true, entering loop body with context: {
  variables: { array: [ 1, 6, 3, 5 ], i: 0, j: 1, temp: 1 },
  history: [
    { line: 1, action: 'declare-variable', details: [Object] },
    { line: 2, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'declare-variable', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 6, action: 'swap', details: [Object] },
    { line: 7, action: 'swap', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] }
  ],
  functions: { swap: [Function (anonymous)] }
}
Evaluating expression of type: BinaryExpression
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Evaluating expression of type: MemberExpression
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: Literal
Evaluating BinaryExpression: Identifier + Literal
Values: 1 + 1
Evaluating BinaryExpression: MemberExpression > MemberExpression
Values: 6 > 3
Evaluating expression of type: Identifier
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: Literal
Evaluating BinaryExpression: Identifier + Literal
Values: 1 + 1
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Declared variable temp with value: 3
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Declared variable temp with value: 3
Evaluating expression of type: UpdateExpression
Updating loop variable j to  2
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: BinaryExpression
Evaluating expression of type: BinaryExpression
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Evaluating expression of type: Identifier
Evaluating BinaryExpression: MemberExpression - Identifier
Values: 4 - 0
Evaluating expression of type: Literal
Evaluating BinaryExpression: BinaryExpression - Literal
Values: 4 - 1
Evaluating BinaryExpression: Identifier < BinaryExpression
Values: 2 < 3
For loop test condition result: true
Loop test condition is true, entering loop body with context: {
  variables: { array: [ 1, 3, 6, 5 ], i: 0, j: 2, temp: 3 },
  history: [
    { line: 1, action: 'declare-variable', details: [Object] },
    { line: 2, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'declare-variable', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 6, action: 'swap', details: [Object] },
    { line: 7, action: 'swap', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 6, action: 'swap', details: [Object] },
    { line: 7, action: 'swap', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] }
  ],
  functions: { swap: [Function (anonymous)] }
}
Evaluating expression of type: BinaryExpression
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Evaluating expression of type: MemberExpression
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: Literal
Evaluating BinaryExpression: Identifier + Literal
Values: 2 + 1
Evaluating BinaryExpression: MemberExpression > MemberExpression
Values: 6 > 5
Evaluating expression of type: Identifier
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: Literal
Evaluating BinaryExpression: Identifier + Literal
Values: 2 + 1
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Declared variable temp with value: 5
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Declared variable temp with value: 5
Evaluating expression of type: UpdateExpression
Updating loop variable j to  3
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: BinaryExpression
Evaluating expression of type: BinaryExpression
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Evaluating expression of type: Identifier
Evaluating BinaryExpression: MemberExpression - Identifier
Values: 4 - 0
Evaluating expression of type: Literal
Evaluating BinaryExpression: BinaryExpression - Literal
Values: 4 - 1
Evaluating BinaryExpression: Identifier < BinaryExpression
Values: 3 < 3
For loop test condition result: false
Loop test condition is false, exiting loop
Evaluating expression of type: UpdateExpression
Updating loop variable i to  1
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Evaluating BinaryExpression: Identifier < MemberExpression
Values: 1 < 4
For loop test condition result: true
Loop test condition is true, entering loop body with context: {
  variables: { array: [ 1, 3, 5, 6 ], i: 1, j: 3, temp: 5 },
  history: [
    { line: 1, action: 'declare-variable', details: [Object] },
    { line: 2, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'declare-variable', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 6, action: 'swap', details: [Object] },
    { line: 7, action: 'swap', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 6, action: 'swap', details: [Object] },
    { line: 7, action: 'swap', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 6, action: 'swap', details: [Object] },
    { line: 7, action: 'swap', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 9, action: 'loop-end', details: null },
    { line: 2, action: 'loop-update', details: [Object] }
  ],
  functions: { swap: [Function (anonymous)] }
}
Entering handleForStatement with node: ForStatement {
  type: 'ForStatement',
  init: VariableDeclaration {
    type: 'VariableDeclaration',
    declarations: [ [VariableDeclarator] ],
    kind: 'var',
    loc: { start: [Object], end: [Object] }
  },
  test: BinaryExpression {
    type: 'BinaryExpression',
    operator: '<',
    left: Identifier { type: 'Identifier', name: 'j', loc: [Object] },
    right: BinaryExpression {
      type: 'BinaryExpression',
      operator: '-',
      left: [BinaryExpression],
      right: [Literal],
      loc: [Object]
    },
    loc: { start: [Object], end: [Object] }
  },
  update: UpdateExpression {
    type: 'UpdateExpression',
    operator: '++',
    argument: Identifier { type: 'Identifier', name: 'j', loc: [Object] },
    prefix: false,
    loc: { start: [Object], end: [Object] }
  },
  body: BlockStatement {
    type: 'BlockStatement',
    body: [ [IfStatement] ],
    loc: { start: [Object], end: [Object] }
  },
  loc: { start: { line: 3, column: 4 }, end: { line: 9, column: 5 } }
}
Evaluating expression of type: Literal
Declared variable j with value: 0
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: BinaryExpression
Evaluating expression of type: BinaryExpression
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Evaluating expression of type: Identifier
Evaluating BinaryExpression: MemberExpression - Identifier
Values: 4 - 1
Evaluating expression of type: Literal
Evaluating BinaryExpression: BinaryExpression - Literal
Values: 3 - 1
Evaluating BinaryExpression: Identifier < BinaryExpression
Values: 0 < 2
For loop test condition result: true
Loop test condition is true, entering loop body with context: {
  variables: { array: [ 1, 3, 5, 6 ], i: 1, j: 0, temp: 5 },
  history: [
    { line: 1, action: 'declare-variable', details: [Object] },
    { line: 2, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'declare-variable', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 6, action: 'swap', details: [Object] },
    { line: 7, action: 'swap', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 6, action: 'swap', details: [Object] },
    { line: 7, action: 'swap', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 6, action: 'swap', details: [Object] },
    { line: 7, action: 'swap', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 9, action: 'loop-end', details: null },
    { line: 2, action: 'loop-update', details: [Object] },
    { line: 3, action: 'declare-variable', details: [Object] }
  ],
  functions: { swap: [Function (anonymous)] }
}
Evaluating expression of type: BinaryExpression
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Evaluating expression of type: MemberExpression
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: Literal
Evaluating BinaryExpression: Identifier + Literal
Values: 0 + 1
Evaluating BinaryExpression: MemberExpression > MemberExpression
Values: 1 > 3
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Declared variable temp with value: 1
Evaluating expression of type: UpdateExpression
Updating loop variable j to  1
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: BinaryExpression
Evaluating expression of type: BinaryExpression
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Evaluating expression of type: Identifier
Evaluating BinaryExpression: MemberExpression - Identifier
Values: 4 - 1
Evaluating expression of type: Literal
Evaluating BinaryExpression: BinaryExpression - Literal
Values: 3 - 1
Evaluating BinaryExpression: Identifier < BinaryExpression
Values: 1 < 2
For loop test condition result: true
Loop test condition is true, entering loop body with context: {
  variables: { array: [ 1, 3, 5, 6 ], i: 1, j: 1, temp: 1 },
  history: [
    { line: 1, action: 'declare-variable', details: [Object] },
    { line: 2, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'declare-variable', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 6, action: 'swap', details: [Object] },
    { line: 7, action: 'swap', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 6, action: 'swap', details: [Object] },
    { line: 7, action: 'swap', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 6, action: 'swap', details: [Object] },
    { line: 7, action: 'swap', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 9, action: 'loop-end', details: null },
    { line: 2, action: 'loop-update', details: [Object] },
    { line: 3, action: 'declare-variable', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] }
  ],
  functions: { swap: [Function (anonymous)] }
}
Evaluating expression of type: BinaryExpression
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Evaluating expression of type: MemberExpression
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: Literal
Evaluating BinaryExpression: Identifier + Literal
Values: 1 + 1
Evaluating BinaryExpression: MemberExpression > MemberExpression
Values: 3 > 5
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Declared variable temp with value: 3
Evaluating expression of type: UpdateExpression
Updating loop variable j to  2
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: BinaryExpression
Evaluating expression of type: BinaryExpression
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Evaluating expression of type: Identifier
Evaluating BinaryExpression: MemberExpression - Identifier
Values: 4 - 1
Evaluating expression of type: Literal
Evaluating BinaryExpression: BinaryExpression - Literal
Values: 3 - 1
Evaluating BinaryExpression: Identifier < BinaryExpression
Values: 2 < 2
For loop test condition result: false
Loop test condition is false, exiting loop
Evaluating expression of type: UpdateExpression
Updating loop variable i to  2
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Evaluating BinaryExpression: Identifier < MemberExpression
Values: 2 < 4
For loop test condition result: true
Loop test condition is true, entering loop body with context: {
  variables: { array: [ 1, 3, 5, 6 ], i: 2, j: 2, temp: 3 },
  history: [
    { line: 1, action: 'declare-variable', details: [Object] },
    { line: 2, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'declare-variable', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 6, action: 'swap', details: [Object] },
    { line: 7, action: 'swap', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 6, action: 'swap', details: [Object] },
    { line: 7, action: 'swap', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 6, action: 'swap', details: [Object] },
    { line: 7, action: 'swap', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 9, action: 'loop-end', details: null },
    { line: 2, action: 'loop-update', details: [Object] },
    { line: 3, action: 'declare-variable', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 9, action: 'loop-end', details: null },
    { line: 2, action: 'loop-update', details: [Object] }
  ],
  functions: { swap: [Function (anonymous)] }
}
Entering handleForStatement with node: ForStatement {
  type: 'ForStatement',
  init: VariableDeclaration {
    type: 'VariableDeclaration',
    declarations: [ [VariableDeclarator] ],
    kind: 'var',
    loc: { start: [Object], end: [Object] }
  },
  test: BinaryExpression {
    type: 'BinaryExpression',
    operator: '<',
    left: Identifier { type: 'Identifier', name: 'j', loc: [Object] },
    right: BinaryExpression {
      type: 'BinaryExpression',
      operator: '-',
      left: [BinaryExpression],
      right: [Literal],
      loc: [Object]
    },
    loc: { start: [Object], end: [Object] }
  },
  update: UpdateExpression {
    type: 'UpdateExpression',
    operator: '++',
    argument: Identifier { type: 'Identifier', name: 'j', loc: [Object] },
    prefix: false,
    loc: { start: [Object], end: [Object] }
  },
  body: BlockStatement {
    type: 'BlockStatement',
    body: [ [IfStatement] ],
    loc: { start: [Object], end: [Object] }
  },
  loc: { start: { line: 3, column: 4 }, end: { line: 9, column: 5 } }
}
Evaluating expression of type: Literal
Declared variable j with value: 0
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: BinaryExpression
Evaluating expression of type: BinaryExpression
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Evaluating expression of type: Identifier
Evaluating BinaryExpression: MemberExpression - Identifier
Values: 4 - 2
Evaluating expression of type: Literal
Evaluating BinaryExpression: BinaryExpression - Literal
Values: 2 - 1
Evaluating BinaryExpression: Identifier < BinaryExpression
Values: 0 < 1
For loop test condition result: true
Loop test condition is true, entering loop body with context: {
  variables: { array: [ 1, 3, 5, 6 ], i: 2, j: 0, temp: 3 },
  history: [
    { line: 1, action: 'declare-variable', details: [Object] },
    { line: 2, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'declare-variable', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 6, action: 'swap', details: [Object] },
    { line: 7, action: 'swap', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 6, action: 'swap', details: [Object] },
    { line: 7, action: 'swap', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 6, action: 'swap', details: [Object] },
    { line: 7, action: 'swap', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 9, action: 'loop-end', details: null },
    { line: 2, action: 'loop-update', details: [Object] },
    { line: 3, action: 'declare-variable', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 9, action: 'loop-end', details: null },
    { line: 2, action: 'loop-update', details: [Object] },
    { line: 3, action: 'declare-variable', details: [Object] }
  ],
  functions: { swap: [Function (anonymous)] }
}
Evaluating expression of type: BinaryExpression
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Evaluating expression of type: MemberExpression
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: Literal
Evaluating BinaryExpression: Identifier + Literal
Values: 0 + 1
Evaluating BinaryExpression: MemberExpression > MemberExpression
Values: 1 > 3
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Declared variable temp with value: 1
Evaluating expression of type: UpdateExpression
Updating loop variable j to  1
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: BinaryExpression
Evaluating expression of type: BinaryExpression
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Evaluating expression of type: Identifier
Evaluating BinaryExpression: MemberExpression - Identifier
Values: 4 - 2
Evaluating expression of type: Literal
Evaluating BinaryExpression: BinaryExpression - Literal
Values: 2 - 1
Evaluating BinaryExpression: Identifier < BinaryExpression
Values: 1 < 1
For loop test condition result: false
Loop test condition is false, exiting loop
Evaluating expression of type: UpdateExpression
Updating loop variable i to  3
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Evaluating BinaryExpression: Identifier < MemberExpression
Values: 3 < 4
For loop test condition result: true
Loop test condition is true, entering loop body with context: {
  variables: { array: [ 1, 3, 5, 6 ], i: 3, j: 1, temp: 1 },
  history: [
    { line: 1, action: 'declare-variable', details: [Object] },
    { line: 2, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'declare-variable', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 6, action: 'swap', details: [Object] },
    { line: 7, action: 'swap', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 6, action: 'swap', details: [Object] },
    { line: 7, action: 'swap', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 6, action: 'swap', details: [Object] },
    { line: 7, action: 'swap', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 9, action: 'loop-end', details: null },
    { line: 2, action: 'loop-update', details: [Object] },
    { line: 3, action: 'declare-variable', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 9, action: 'loop-end', details: null },
    { line: 2, action: 'loop-update', details: [Object] },
    { line: 3, action: 'declare-variable', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 9, action: 'loop-end', details: null },
    { line: 2, action: 'loop-update', details: [Object] }
  ],
  functions: { swap: [Function (anonymous)] }
}
Entering handleForStatement with node: ForStatement {
  type: 'ForStatement',
  init: VariableDeclaration {
    type: 'VariableDeclaration',
    declarations: [ [VariableDeclarator] ],
    kind: 'var',
    loc: { start: [Object], end: [Object] }
  },
  test: BinaryExpression {
    type: 'BinaryExpression',
    operator: '<',
    left: Identifier { type: 'Identifier', name: 'j', loc: [Object] },
    right: BinaryExpression {
      type: 'BinaryExpression',
      operator: '-',
      left: [BinaryExpression],
      right: [Literal],
      loc: [Object]
    },
    loc: { start: [Object], end: [Object] }
  },
  update: UpdateExpression {
    type: 'UpdateExpression',
    operator: '++',
    argument: Identifier { type: 'Identifier', name: 'j', loc: [Object] },
    prefix: false,
    loc: { start: [Object], end: [Object] }
  },
  body: BlockStatement {
    type: 'BlockStatement',
    body: [ [IfStatement] ],
    loc: { start: [Object], end: [Object] }
  },
  loc: { start: { line: 3, column: 4 }, end: { line: 9, column: 5 } }
}
Evaluating expression of type: Literal
Declared variable j with value: 0
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: BinaryExpression
Evaluating expression of type: BinaryExpression
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Evaluating expression of type: Identifier
Evaluating BinaryExpression: MemberExpression - Identifier
Values: 4 - 3
Evaluating expression of type: Literal
Evaluating BinaryExpression: BinaryExpression - Literal
Values: 1 - 1
Evaluating BinaryExpression: Identifier < BinaryExpression
Values: 0 < 0
For loop test condition result: false
Loop test condition is false, exiting loop
Evaluating expression of type: UpdateExpression
Updating loop variable i to  4
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Evaluating BinaryExpression: Identifier < MemberExpression
Values: 4 < 4
For loop test condition result: false
Loop test condition is false, exiting loop
Evaluating expression of type: ArrayExpression
Evaluating expression of type: Literal
Evaluating expression of type: Literal
Evaluating expression of type: Literal
Evaluating expression of type: Literal
Declared variable array with value: [ 6, 1, 3, 5 ]
Entering handleForStatement with node: ForStatement {
  type: 'ForStatement',
  init: VariableDeclaration {
    type: 'VariableDeclaration',
    declarations: [ [VariableDeclarator] ],
    kind: 'var',
    loc: { start: [Object], end: [Object] }
  },
  test: BinaryExpression {
    type: 'BinaryExpression',
    operator: '<',
    left: Identifier { type: 'Identifier', name: 'i', loc: [Object] },
    right: StaticMemberExpression {
      type: 'MemberExpression',
      computed: false,
      object: [Identifier],
      property: [Identifier],
      loc: [Object]
    },
    loc: { start: [Object], end: [Object] }
  },
  update: UpdateExpression {
    type: 'UpdateExpression',
    operator: '++',
    argument: Identifier { type: 'Identifier', name: 'i', loc: [Object] },
    prefix: false,
    loc: { start: [Object], end: [Object] }
  },
  body: BlockStatement {
    type: 'BlockStatement',
    body: [ [ForStatement] ],
    loc: { start: [Object], end: [Object] }
  },
  loc: { start: { line: 2, column: 0 }, end: { line: 10, column: 1 } }
}
Evaluating expression of type: Literal
Declared variable i with value: 0
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Evaluating BinaryExpression: Identifier < MemberExpression
Values: 0 < 4
For loop test condition result: true
Loop test condition is true, entering loop body with context: {
  variables: { array: [ 6, 1, 3, 5 ], i: 0 },
  history: [
    { line: 1, action: 'declare-variable', details: [Object] },
    { line: 2, action: 'declare-variable', details: [Object] }
  ],
  functions: { swap: [Function (anonymous)] }
}
Entering handleForStatement with node: ForStatement {
  type: 'ForStatement',
  init: VariableDeclaration {
    type: 'VariableDeclaration',
    declarations: [ [VariableDeclarator] ],
    kind: 'var',
    loc: { start: [Object], end: [Object] }
  },
  test: BinaryExpression {
    type: 'BinaryExpression',
    operator: '<',
    left: Identifier { type: 'Identifier', name: 'j', loc: [Object] },
    right: BinaryExpression {
      type: 'BinaryExpression',
      operator: '-',
      left: [BinaryExpression],
      right: [Literal],
      loc: [Object]
    },
    loc: { start: [Object], end: [Object] }
  },
  update: UpdateExpression {
    type: 'UpdateExpression',
    operator: '++',
    argument: Identifier { type: 'Identifier', name: 'j', loc: [Object] },
    prefix: false,
    loc: { start: [Object], end: [Object] }
  },
  body: BlockStatement {
    type: 'BlockStatement',
    body: [ [IfStatement] ],
    loc: { start: [Object], end: [Object] }
  },
  loc: { start: { line: 3, column: 4 }, end: { line: 9, column: 5 } }
}
Evaluating expression of type: Literal
Declared variable j with value: 0
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: BinaryExpression
Evaluating expression of type: BinaryExpression
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Evaluating expression of type: Identifier
Evaluating BinaryExpression: MemberExpression - Identifier
Values: 4 - 0
Evaluating expression of type: Literal
Evaluating BinaryExpression: BinaryExpression - Literal
Values: 4 - 1
Evaluating BinaryExpression: Identifier < BinaryExpression
Values: 0 < 3
For loop test condition result: true
Loop test condition is true, entering loop body with context: {
  variables: { array: [ 6, 1, 3, 5 ], i: 0, j: 0 },
  history: [
    { line: 1, action: 'declare-variable', details: [Object] },
    { line: 2, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'declare-variable', details: [Object] }
  ],
  functions: { swap: [Function (anonymous)] }
}
Evaluating expression of type: BinaryExpression
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Evaluating expression of type: MemberExpression
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: Literal
Evaluating BinaryExpression: Identifier + Literal
Values: 0 + 1
Evaluating BinaryExpression: MemberExpression > MemberExpression
Values: 6 > 1
Evaluating expression of type: Identifier
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: Literal
Evaluating BinaryExpression: Identifier + Literal
Values: 0 + 1
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Declared variable temp with value: 1
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Declared variable temp with value: 1
Evaluating expression of type: UpdateExpression
Updating loop variable j to  1
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: BinaryExpression
Evaluating expression of type: BinaryExpression
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Evaluating expression of type: Identifier
Evaluating BinaryExpression: MemberExpression - Identifier
Values: 4 - 0
Evaluating expression of type: Literal
Evaluating BinaryExpression: BinaryExpression - Literal
Values: 4 - 1
Evaluating BinaryExpression: Identifier < BinaryExpression
Values: 1 < 3
For loop test condition result: true
Loop test condition is true, entering loop body with context: {
  variables: { array: [ 1, 6, 3, 5 ], i: 0, j: 1, temp: 1 },
  history: [
    { line: 1, action: 'declare-variable', details: [Object] },
    { line: 2, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'declare-variable', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 6, action: 'swap', details: [Object] },
    { line: 7, action: 'swap', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] }
  ],
  functions: { swap: [Function (anonymous)] }
}
Evaluating expression of type: BinaryExpression
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Evaluating expression of type: MemberExpression
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: Literal
Evaluating BinaryExpression: Identifier + Literal
Values: 1 + 1
Evaluating BinaryExpression: MemberExpression > MemberExpression
Values: 6 > 3
Evaluating expression of type: Identifier
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: Literal
Evaluating BinaryExpression: Identifier + Literal
Values: 1 + 1
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Declared variable temp with value: 3
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Declared variable temp with value: 3
Evaluating expression of type: UpdateExpression
Updating loop variable j to  2
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: BinaryExpression
Evaluating expression of type: BinaryExpression
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Evaluating expression of type: Identifier
Evaluating BinaryExpression: MemberExpression - Identifier
Values: 4 - 0
Evaluating expression of type: Literal
Evaluating BinaryExpression: BinaryExpression - Literal
Values: 4 - 1
Evaluating BinaryExpression: Identifier < BinaryExpression
Values: 2 < 3
For loop test condition result: true
Loop test condition is true, entering loop body with context: {
  variables: { array: [ 1, 3, 6, 5 ], i: 0, j: 2, temp: 3 },
  history: [
    { line: 1, action: 'declare-variable', details: [Object] },
    { line: 2, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'declare-variable', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 6, action: 'swap', details: [Object] },
    { line: 7, action: 'swap', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 6, action: 'swap', details: [Object] },
    { line: 7, action: 'swap', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] }
  ],
  functions: { swap: [Function (anonymous)] }
}
Evaluating expression of type: BinaryExpression
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Evaluating expression of type: MemberExpression
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: Literal
Evaluating BinaryExpression: Identifier + Literal
Values: 2 + 1
Evaluating BinaryExpression: MemberExpression > MemberExpression
Values: 6 > 5
Evaluating expression of type: Identifier
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: Literal
Evaluating BinaryExpression: Identifier + Literal
Values: 2 + 1
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Declared variable temp with value: 5
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Declared variable temp with value: 5
Evaluating expression of type: UpdateExpression
Updating loop variable j to  3
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: BinaryExpression
Evaluating expression of type: BinaryExpression
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Evaluating expression of type: Identifier
Evaluating BinaryExpression: MemberExpression - Identifier
Values: 4 - 0
Evaluating expression of type: Literal
Evaluating BinaryExpression: BinaryExpression - Literal
Values: 4 - 1
Evaluating BinaryExpression: Identifier < BinaryExpression
Values: 3 < 3
For loop test condition result: false
Loop test condition is false, exiting loop
Evaluating expression of type: UpdateExpression
Updating loop variable i to  1
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Evaluating BinaryExpression: Identifier < MemberExpression
Values: 1 < 4
For loop test condition result: true
Loop test condition is true, entering loop body with context: {
  variables: { array: [ 1, 3, 5, 6 ], i: 1, j: 3, temp: 5 },
  history: [
    { line: 1, action: 'declare-variable', details: [Object] },
    { line: 2, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'declare-variable', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 6, action: 'swap', details: [Object] },
    { line: 7, action: 'swap', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 6, action: 'swap', details: [Object] },
    { line: 7, action: 'swap', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 6, action: 'swap', details: [Object] },
    { line: 7, action: 'swap', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 9, action: 'loop-end', details: null },
    { line: 2, action: 'loop-update', details: [Object] }
  ],
  functions: { swap: [Function (anonymous)] }
}
Entering handleForStatement with node: ForStatement {
  type: 'ForStatement',
  init: VariableDeclaration {
    type: 'VariableDeclaration',
    declarations: [ [VariableDeclarator] ],
    kind: 'var',
    loc: { start: [Object], end: [Object] }
  },
  test: BinaryExpression {
    type: 'BinaryExpression',
    operator: '<',
    left: Identifier { type: 'Identifier', name: 'j', loc: [Object] },
    right: BinaryExpression {
      type: 'BinaryExpression',
      operator: '-',
      left: [BinaryExpression],
      right: [Literal],
      loc: [Object]
    },
    loc: { start: [Object], end: [Object] }
  },
  update: UpdateExpression {
    type: 'UpdateExpression',
    operator: '++',
    argument: Identifier { type: 'Identifier', name: 'j', loc: [Object] },
    prefix: false,
    loc: { start: [Object], end: [Object] }
  },
  body: BlockStatement {
    type: 'BlockStatement',
    body: [ [IfStatement] ],
    loc: { start: [Object], end: [Object] }
  },
  loc: { start: { line: 3, column: 4 }, end: { line: 9, column: 5 } }
}
Evaluating expression of type: Literal
Declared variable j with value: 0
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: BinaryExpression
Evaluating expression of type: BinaryExpression
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Evaluating expression of type: Identifier
Evaluating BinaryExpression: MemberExpression - Identifier
Values: 4 - 1
Evaluating expression of type: Literal
Evaluating BinaryExpression: BinaryExpression - Literal
Values: 3 - 1
Evaluating BinaryExpression: Identifier < BinaryExpression
Values: 0 < 2
For loop test condition result: true
Loop test condition is true, entering loop body with context: {
  variables: { array: [ 1, 3, 5, 6 ], i: 1, j: 0, temp: 5 },
  history: [
    { line: 1, action: 'declare-variable', details: [Object] },
    { line: 2, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'declare-variable', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 6, action: 'swap', details: [Object] },
    { line: 7, action: 'swap', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 6, action: 'swap', details: [Object] },
    { line: 7, action: 'swap', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 6, action: 'swap', details: [Object] },
    { line: 7, action: 'swap', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 9, action: 'loop-end', details: null },
    { line: 2, action: 'loop-update', details: [Object] },
    { line: 3, action: 'declare-variable', details: [Object] }
  ],
  functions: { swap: [Function (anonymous)] }
}
Evaluating expression of type: BinaryExpression
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Evaluating expression of type: MemberExpression
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: Literal
Evaluating BinaryExpression: Identifier + Literal
Values: 0 + 1
Evaluating BinaryExpression: MemberExpression > MemberExpression
Values: 1 > 3
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Declared variable temp with value: 1
Evaluating expression of type: UpdateExpression
Updating loop variable j to  1
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: BinaryExpression
Evaluating expression of type: BinaryExpression
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Evaluating expression of type: Identifier
Evaluating BinaryExpression: MemberExpression - Identifier
Values: 4 - 1
Evaluating expression of type: Literal
Evaluating BinaryExpression: BinaryExpression - Literal
Values: 3 - 1
Evaluating BinaryExpression: Identifier < BinaryExpression
Values: 1 < 2
For loop test condition result: true
Loop test condition is true, entering loop body with context: {
  variables: { array: [ 1, 3, 5, 6 ], i: 1, j: 1, temp: 1 },
  history: [
    { line: 1, action: 'declare-variable', details: [Object] },
    { line: 2, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'declare-variable', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 6, action: 'swap', details: [Object] },
    { line: 7, action: 'swap', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 6, action: 'swap', details: [Object] },
    { line: 7, action: 'swap', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 6, action: 'swap', details: [Object] },
    { line: 7, action: 'swap', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 9, action: 'loop-end', details: null },
    { line: 2, action: 'loop-update', details: [Object] },
    { line: 3, action: 'declare-variable', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] }
  ],
  functions: { swap: [Function (anonymous)] }
}
Evaluating expression of type: BinaryExpression
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Evaluating expression of type: MemberExpression
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: Literal
Evaluating BinaryExpression: Identifier + Literal
Values: 1 + 1
Evaluating BinaryExpression: MemberExpression > MemberExpression
Values: 3 > 5
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Declared variable temp with value: 3
Evaluating expression of type: UpdateExpression
Updating loop variable j to  2
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: BinaryExpression
Evaluating expression of type: BinaryExpression
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Evaluating expression of type: Identifier
Evaluating BinaryExpression: MemberExpression - Identifier
Values: 4 - 1
Evaluating expression of type: Literal
Evaluating BinaryExpression: BinaryExpression - Literal
Values: 3 - 1
Evaluating BinaryExpression: Identifier < BinaryExpression
Values: 2 < 2
For loop test condition result: false
Loop test condition is false, exiting loop
Evaluating expression of type: UpdateExpression
Updating loop variable i to  2
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Evaluating BinaryExpression: Identifier < MemberExpression
Values: 2 < 4
For loop test condition result: true
Loop test condition is true, entering loop body with context: {
  variables: { array: [ 1, 3, 5, 6 ], i: 2, j: 2, temp: 3 },
  history: [
    { line: 1, action: 'declare-variable', details: [Object] },
    { line: 2, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'declare-variable', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 6, action: 'swap', details: [Object] },
    { line: 7, action: 'swap', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 6, action: 'swap', details: [Object] },
    { line: 7, action: 'swap', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 6, action: 'swap', details: [Object] },
    { line: 7, action: 'swap', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 9, action: 'loop-end', details: null },
    { line: 2, action: 'loop-update', details: [Object] },
    { line: 3, action: 'declare-variable', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 9, action: 'loop-end', details: null },
    { line: 2, action: 'loop-update', details: [Object] }
  ],
  functions: { swap: [Function (anonymous)] }
}
Entering handleForStatement with node: ForStatement {
  type: 'ForStatement',
  init: VariableDeclaration {
    type: 'VariableDeclaration',
    declarations: [ [VariableDeclarator] ],
    kind: 'var',
    loc: { start: [Object], end: [Object] }
  },
  test: BinaryExpression {
    type: 'BinaryExpression',
    operator: '<',
    left: Identifier { type: 'Identifier', name: 'j', loc: [Object] },
    right: BinaryExpression {
      type: 'BinaryExpression',
      operator: '-',
      left: [BinaryExpression],
      right: [Literal],
      loc: [Object]
    },
    loc: { start: [Object], end: [Object] }
  },
  update: UpdateExpression {
    type: 'UpdateExpression',
    operator: '++',
    argument: Identifier { type: 'Identifier', name: 'j', loc: [Object] },
    prefix: false,
    loc: { start: [Object], end: [Object] }
  },
  body: BlockStatement {
    type: 'BlockStatement',
    body: [ [IfStatement] ],
    loc: { start: [Object], end: [Object] }
  },
  loc: { start: { line: 3, column: 4 }, end: { line: 9, column: 5 } }
}
Evaluating expression of type: Literal
Declared variable j with value: 0
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: BinaryExpression
Evaluating expression of type: BinaryExpression
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Evaluating expression of type: Identifier
Evaluating BinaryExpression: MemberExpression - Identifier
Values: 4 - 2
Evaluating expression of type: Literal
Evaluating BinaryExpression: BinaryExpression - Literal
Values: 2 - 1
Evaluating BinaryExpression: Identifier < BinaryExpression
Values: 0 < 1
For loop test condition result: true
Loop test condition is true, entering loop body with context: {
  variables: { array: [ 1, 3, 5, 6 ], i: 2, j: 0, temp: 3 },
  history: [
    { line: 1, action: 'declare-variable', details: [Object] },
    { line: 2, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'declare-variable', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 6, action: 'swap', details: [Object] },
    { line: 7, action: 'swap', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 6, action: 'swap', details: [Object] },
    { line: 7, action: 'swap', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 6, action: 'swap', details: [Object] },
    { line: 7, action: 'swap', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 9, action: 'loop-end', details: null },
    { line: 2, action: 'loop-update', details: [Object] },
    { line: 3, action: 'declare-variable', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 9, action: 'loop-end', details: null },
    { line: 2, action: 'loop-update', details: [Object] },
    { line: 3, action: 'declare-variable', details: [Object] }
  ],
  functions: { swap: [Function (anonymous)] }
}
Evaluating expression of type: BinaryExpression
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Evaluating expression of type: MemberExpression
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: Literal
Evaluating BinaryExpression: Identifier + Literal
Values: 0 + 1
Evaluating BinaryExpression: MemberExpression > MemberExpression
Values: 1 > 3
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Declared variable temp with value: 1
Evaluating expression of type: UpdateExpression
Updating loop variable j to  1
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: BinaryExpression
Evaluating expression of type: BinaryExpression
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Evaluating expression of type: Identifier
Evaluating BinaryExpression: MemberExpression - Identifier
Values: 4 - 2
Evaluating expression of type: Literal
Evaluating BinaryExpression: BinaryExpression - Literal
Values: 2 - 1
Evaluating BinaryExpression: Identifier < BinaryExpression
Values: 1 < 1
For loop test condition result: false
Loop test condition is false, exiting loop
Evaluating expression of type: UpdateExpression
Updating loop variable i to  3
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Evaluating BinaryExpression: Identifier < MemberExpression
Values: 3 < 4
For loop test condition result: true
Loop test condition is true, entering loop body with context: {
  variables: { array: [ 1, 3, 5, 6 ], i: 3, j: 1, temp: 1 },
  history: [
    { line: 1, action: 'declare-variable', details: [Object] },
    { line: 2, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'declare-variable', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 6, action: 'swap', details: [Object] },
    { line: 7, action: 'swap', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 6, action: 'swap', details: [Object] },
    { line: 7, action: 'swap', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 6, action: 'swap', details: [Object] },
    { line: 7, action: 'swap', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 9, action: 'loop-end', details: null },
    { line: 2, action: 'loop-update', details: [Object] },
    { line: 3, action: 'declare-variable', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 9, action: 'loop-end', details: null },
    { line: 2, action: 'loop-update', details: [Object] },
    { line: 3, action: 'declare-variable', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 9, action: 'loop-end', details: null },
    { line: 2, action: 'loop-update', details: [Object] }
  ],
  functions: { swap: [Function (anonymous)] }
}
Entering handleForStatement with node: ForStatement {
  type: 'ForStatement',
  init: VariableDeclaration {
    type: 'VariableDeclaration',
    declarations: [ [VariableDeclarator] ],
    kind: 'var',
    loc: { start: [Object], end: [Object] }
  },
  test: BinaryExpression {
    type: 'BinaryExpression',
    operator: '<',
    left: Identifier { type: 'Identifier', name: 'j', loc: [Object] },
    right: BinaryExpression {
      type: 'BinaryExpression',
      operator: '-',
      left: [BinaryExpression],
      right: [Literal],
      loc: [Object]
    },
    loc: { start: [Object], end: [Object] }
  },
  update: UpdateExpression {
    type: 'UpdateExpression',
    operator: '++',
    argument: Identifier { type: 'Identifier', name: 'j', loc: [Object] },
    prefix: false,
    loc: { start: [Object], end: [Object] }
  },
  body: BlockStatement {
    type: 'BlockStatement',
    body: [ [IfStatement] ],
    loc: { start: [Object], end: [Object] }
  },
  loc: { start: { line: 3, column: 4 }, end: { line: 9, column: 5 } }
}
Evaluating expression of type: Literal
Declared variable j with value: 0
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: BinaryExpression
Evaluating expression of type: BinaryExpression
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Evaluating expression of type: Identifier
Evaluating BinaryExpression: MemberExpression - Identifier
Values: 4 - 3
Evaluating expression of type: Literal
Evaluating BinaryExpression: BinaryExpression - Literal
Values: 1 - 1
Evaluating BinaryExpression: Identifier < BinaryExpression
Values: 0 < 0
For loop test condition result: false
Loop test condition is false, exiting loop
Evaluating expression of type: UpdateExpression
Updating loop variable i to  4
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Evaluating BinaryExpression: Identifier < MemberExpression
Values: 4 < 4
For loop test condition result: false
Loop test condition is false, exiting loop
Evaluating expression of type: ArrayExpression
Evaluating expression of type: Literal
Evaluating expression of type: Literal
Evaluating expression of type: Literal
Evaluating expression of type: Literal
Declared variable array with value: [ 6, 1, 3, 5 ]
Entering handleForStatement with node: ForStatement {
  type: 'ForStatement',
  init: VariableDeclaration {
    type: 'VariableDeclaration',
    declarations: [ [VariableDeclarator] ],
    kind: 'var',
    loc: { start: [Object], end: [Object] }
  },
  test: BinaryExpression {
    type: 'BinaryExpression',
    operator: '<',
    left: Identifier { type: 'Identifier', name: 'i', loc: [Object] },
    right: StaticMemberExpression {
      type: 'MemberExpression',
      computed: false,
      object: [Identifier],
      property: [Identifier],
      loc: [Object]
    },
    loc: { start: [Object], end: [Object] }
  },
  update: UpdateExpression {
    type: 'UpdateExpression',
    operator: '++',
    argument: Identifier { type: 'Identifier', name: 'i', loc: [Object] },
    prefix: false,
    loc: { start: [Object], end: [Object] }
  },
  body: BlockStatement {
    type: 'BlockStatement',
    body: [ [ForStatement] ],
    loc: { start: [Object], end: [Object] }
  },
  loc: { start: { line: 2, column: 0 }, end: { line: 10, column: 1 } }
}
Evaluating expression of type: Literal
Declared variable i with value: 0
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Evaluating BinaryExpression: Identifier < MemberExpression
Values: 0 < 4
For loop test condition result: true
Loop test condition is true, entering loop body with context: {
  variables: { array: [ 6, 1, 3, 5 ], i: 0 },
  history: [
    { line: 1, action: 'declare-variable', details: [Object] },
    { line: 2, action: 'declare-variable', details: [Object] }
  ],
  functions: { swap: [Function (anonymous)] }
}
Entering handleForStatement with node: ForStatement {
  type: 'ForStatement',
  init: VariableDeclaration {
    type: 'VariableDeclaration',
    declarations: [ [VariableDeclarator] ],
    kind: 'var',
    loc: { start: [Object], end: [Object] }
  },
  test: BinaryExpression {
    type: 'BinaryExpression',
    operator: '<',
    left: Identifier { type: 'Identifier', name: 'j', loc: [Object] },
    right: BinaryExpression {
      type: 'BinaryExpression',
      operator: '-',
      left: [BinaryExpression],
      right: [Literal],
      loc: [Object]
    },
    loc: { start: [Object], end: [Object] }
  },
  update: UpdateExpression {
    type: 'UpdateExpression',
    operator: '++',
    argument: Identifier { type: 'Identifier', name: 'j', loc: [Object] },
    prefix: false,
    loc: { start: [Object], end: [Object] }
  },
  body: BlockStatement {
    type: 'BlockStatement',
    body: [ [IfStatement] ],
    loc: { start: [Object], end: [Object] }
  },
  loc: { start: { line: 3, column: 4 }, end: { line: 9, column: 5 } }
}
Evaluating expression of type: Literal
Declared variable j with value: 0
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: BinaryExpression
Evaluating expression of type: BinaryExpression
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Evaluating expression of type: Identifier
Evaluating BinaryExpression: MemberExpression - Identifier
Values: 4 - 0
Evaluating expression of type: Literal
Evaluating BinaryExpression: BinaryExpression - Literal
Values: 4 - 1
Evaluating BinaryExpression: Identifier < BinaryExpression
Values: 0 < 3
For loop test condition result: true
Loop test condition is true, entering loop body with context: {
  variables: { array: [ 6, 1, 3, 5 ], i: 0, j: 0 },
  history: [
    { line: 1, action: 'declare-variable', details: [Object] },
    { line: 2, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'declare-variable', details: [Object] }
  ],
  functions: { swap: [Function (anonymous)] }
}
Evaluating expression of type: BinaryExpression
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Evaluating expression of type: MemberExpression
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: Literal
Evaluating BinaryExpression: Identifier + Literal
Values: 0 + 1
Evaluating BinaryExpression: MemberExpression > MemberExpression
Values: 6 > 1
Evaluating expression of type: Identifier
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: Literal
Evaluating BinaryExpression: Identifier + Literal
Values: 0 + 1
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Declared variable temp with value: 1
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Declared variable temp with value: 1
Evaluating expression of type: UpdateExpression
Updating loop variable j to  1
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: BinaryExpression
Evaluating expression of type: BinaryExpression
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Evaluating expression of type: Identifier
Evaluating BinaryExpression: MemberExpression - Identifier
Values: 4 - 0
Evaluating expression of type: Literal
Evaluating BinaryExpression: BinaryExpression - Literal
Values: 4 - 1
Evaluating BinaryExpression: Identifier < BinaryExpression
Values: 1 < 3
For loop test condition result: true
Loop test condition is true, entering loop body with context: {
  variables: { array: [ 1, 6, 3, 5 ], i: 0, j: 1, temp: 1 },
  history: [
    { line: 1, action: 'declare-variable', details: [Object] },
    { line: 2, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'declare-variable', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 6, action: 'swap', details: [Object] },
    { line: 7, action: 'swap', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] }
  ],
  functions: { swap: [Function (anonymous)] }
}
Evaluating expression of type: BinaryExpression
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Evaluating expression of type: MemberExpression
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: Literal
Evaluating BinaryExpression: Identifier + Literal
Values: 1 + 1
Evaluating BinaryExpression: MemberExpression > MemberExpression
Values: 6 > 3
Evaluating expression of type: Identifier
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: Literal
Evaluating BinaryExpression: Identifier + Literal
Values: 1 + 1
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Declared variable temp with value: 3
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Declared variable temp with value: 3
Evaluating expression of type: UpdateExpression
Updating loop variable j to  2
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: BinaryExpression
Evaluating expression of type: BinaryExpression
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Evaluating expression of type: Identifier
Evaluating BinaryExpression: MemberExpression - Identifier
Values: 4 - 0
Evaluating expression of type: Literal
Evaluating BinaryExpression: BinaryExpression - Literal
Values: 4 - 1
Evaluating BinaryExpression: Identifier < BinaryExpression
Values: 2 < 3
For loop test condition result: true
Loop test condition is true, entering loop body with context: {
  variables: { array: [ 1, 3, 6, 5 ], i: 0, j: 2, temp: 3 },
  history: [
    { line: 1, action: 'declare-variable', details: [Object] },
    { line: 2, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'declare-variable', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 6, action: 'swap', details: [Object] },
    { line: 7, action: 'swap', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 6, action: 'swap', details: [Object] },
    { line: 7, action: 'swap', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] }
  ],
  functions: { swap: [Function (anonymous)] }
}
Evaluating expression of type: BinaryExpression
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Evaluating expression of type: MemberExpression
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: Literal
Evaluating BinaryExpression: Identifier + Literal
Values: 2 + 1
Evaluating BinaryExpression: MemberExpression > MemberExpression
Values: 6 > 5
Evaluating expression of type: Identifier
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: Literal
Evaluating BinaryExpression: Identifier + Literal
Values: 2 + 1
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Declared variable temp with value: 5
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Declared variable temp with value: 5
Evaluating expression of type: UpdateExpression
Updating loop variable j to  3
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: BinaryExpression
Evaluating expression of type: BinaryExpression
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Evaluating expression of type: Identifier
Evaluating BinaryExpression: MemberExpression - Identifier
Values: 4 - 0
Evaluating expression of type: Literal
Evaluating BinaryExpression: BinaryExpression - Literal
Values: 4 - 1
Evaluating BinaryExpression: Identifier < BinaryExpression
Values: 3 < 3
For loop test condition result: false
Loop test condition is false, exiting loop
Evaluating expression of type: UpdateExpression
Updating loop variable i to  1
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Evaluating BinaryExpression: Identifier < MemberExpression
Values: 1 < 4
For loop test condition result: true
Loop test condition is true, entering loop body with context: {
  variables: { array: [ 1, 3, 5, 6 ], i: 1, j: 3, temp: 5 },
  history: [
    { line: 1, action: 'declare-variable', details: [Object] },
    { line: 2, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'declare-variable', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 6, action: 'swap', details: [Object] },
    { line: 7, action: 'swap', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 6, action: 'swap', details: [Object] },
    { line: 7, action: 'swap', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 6, action: 'swap', details: [Object] },
    { line: 7, action: 'swap', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 9, action: 'loop-end', details: null },
    { line: 2, action: 'loop-update', details: [Object] }
  ],
  functions: { swap: [Function (anonymous)] }
}
Entering handleForStatement with node: ForStatement {
  type: 'ForStatement',
  init: VariableDeclaration {
    type: 'VariableDeclaration',
    declarations: [ [VariableDeclarator] ],
    kind: 'var',
    loc: { start: [Object], end: [Object] }
  },
  test: BinaryExpression {
    type: 'BinaryExpression',
    operator: '<',
    left: Identifier { type: 'Identifier', name: 'j', loc: [Object] },
    right: BinaryExpression {
      type: 'BinaryExpression',
      operator: '-',
      left: [BinaryExpression],
      right: [Literal],
      loc: [Object]
    },
    loc: { start: [Object], end: [Object] }
  },
  update: UpdateExpression {
    type: 'UpdateExpression',
    operator: '++',
    argument: Identifier { type: 'Identifier', name: 'j', loc: [Object] },
    prefix: false,
    loc: { start: [Object], end: [Object] }
  },
  body: BlockStatement {
    type: 'BlockStatement',
    body: [ [IfStatement] ],
    loc: { start: [Object], end: [Object] }
  },
  loc: { start: { line: 3, column: 4 }, end: { line: 9, column: 5 } }
}
Evaluating expression of type: Literal
Declared variable j with value: 0
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: BinaryExpression
Evaluating expression of type: BinaryExpression
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Evaluating expression of type: Identifier
Evaluating BinaryExpression: MemberExpression - Identifier
Values: 4 - 1
Evaluating expression of type: Literal
Evaluating BinaryExpression: BinaryExpression - Literal
Values: 3 - 1
Evaluating BinaryExpression: Identifier < BinaryExpression
Values: 0 < 2
For loop test condition result: true
Loop test condition is true, entering loop body with context: {
  variables: { array: [ 1, 3, 5, 6 ], i: 1, j: 0, temp: 5 },
  history: [
    { line: 1, action: 'declare-variable', details: [Object] },
    { line: 2, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'declare-variable', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 6, action: 'swap', details: [Object] },
    { line: 7, action: 'swap', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 6, action: 'swap', details: [Object] },
    { line: 7, action: 'swap', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 6, action: 'swap', details: [Object] },
    { line: 7, action: 'swap', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 9, action: 'loop-end', details: null },
    { line: 2, action: 'loop-update', details: [Object] },
    { line: 3, action: 'declare-variable', details: [Object] }
  ],
  functions: { swap: [Function (anonymous)] }
}
Evaluating expression of type: BinaryExpression
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Evaluating expression of type: MemberExpression
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: Literal
Evaluating BinaryExpression: Identifier + Literal
Values: 0 + 1
Evaluating BinaryExpression: MemberExpression > MemberExpression
Values: 1 > 3
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Declared variable temp with value: 1
Evaluating expression of type: UpdateExpression
Updating loop variable j to  1
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: BinaryExpression
Evaluating expression of type: BinaryExpression
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Evaluating expression of type: Identifier
Evaluating BinaryExpression: MemberExpression - Identifier
Values: 4 - 1
Evaluating expression of type: Literal
Evaluating BinaryExpression: BinaryExpression - Literal
Values: 3 - 1
Evaluating BinaryExpression: Identifier < BinaryExpression
Values: 1 < 2
For loop test condition result: true
Loop test condition is true, entering loop body with context: {
  variables: { array: [ 1, 3, 5, 6 ], i: 1, j: 1, temp: 1 },
  history: [
    { line: 1, action: 'declare-variable', details: [Object] },
    { line: 2, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'declare-variable', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 6, action: 'swap', details: [Object] },
    { line: 7, action: 'swap', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 6, action: 'swap', details: [Object] },
    { line: 7, action: 'swap', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 6, action: 'swap', details: [Object] },
    { line: 7, action: 'swap', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 9, action: 'loop-end', details: null },
    { line: 2, action: 'loop-update', details: [Object] },
    { line: 3, action: 'declare-variable', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] }
  ],
  functions: { swap: [Function (anonymous)] }
}
Evaluating expression of type: BinaryExpression
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Evaluating expression of type: MemberExpression
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: Literal
Evaluating BinaryExpression: Identifier + Literal
Values: 1 + 1
Evaluating BinaryExpression: MemberExpression > MemberExpression
Values: 3 > 5
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Declared variable temp with value: 3
Evaluating expression of type: UpdateExpression
Updating loop variable j to  2
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: BinaryExpression
Evaluating expression of type: BinaryExpression
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Evaluating expression of type: Identifier
Evaluating BinaryExpression: MemberExpression - Identifier
Values: 4 - 1
Evaluating expression of type: Literal
Evaluating BinaryExpression: BinaryExpression - Literal
Values: 3 - 1
Evaluating BinaryExpression: Identifier < BinaryExpression
Values: 2 < 2
For loop test condition result: false
Loop test condition is false, exiting loop
Evaluating expression of type: UpdateExpression
Updating loop variable i to  2
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Evaluating BinaryExpression: Identifier < MemberExpression
Values: 2 < 4
For loop test condition result: true
Loop test condition is true, entering loop body with context: {
  variables: { array: [ 1, 3, 5, 6 ], i: 2, j: 2, temp: 3 },
  history: [
    { line: 1, action: 'declare-variable', details: [Object] },
    { line: 2, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'declare-variable', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 6, action: 'swap', details: [Object] },
    { line: 7, action: 'swap', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 6, action: 'swap', details: [Object] },
    { line: 7, action: 'swap', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 6, action: 'swap', details: [Object] },
    { line: 7, action: 'swap', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 9, action: 'loop-end', details: null },
    { line: 2, action: 'loop-update', details: [Object] },
    { line: 3, action: 'declare-variable', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 9, action: 'loop-end', details: null },
    { line: 2, action: 'loop-update', details: [Object] }
  ],
  functions: { swap: [Function (anonymous)] }
}
Entering handleForStatement with node: ForStatement {
  type: 'ForStatement',
  init: VariableDeclaration {
    type: 'VariableDeclaration',
    declarations: [ [VariableDeclarator] ],
    kind: 'var',
    loc: { start: [Object], end: [Object] }
  },
  test: BinaryExpression {
    type: 'BinaryExpression',
    operator: '<',
    left: Identifier { type: 'Identifier', name: 'j', loc: [Object] },
    right: BinaryExpression {
      type: 'BinaryExpression',
      operator: '-',
      left: [BinaryExpression],
      right: [Literal],
      loc: [Object]
    },
    loc: { start: [Object], end: [Object] }
  },
  update: UpdateExpression {
    type: 'UpdateExpression',
    operator: '++',
    argument: Identifier { type: 'Identifier', name: 'j', loc: [Object] },
    prefix: false,
    loc: { start: [Object], end: [Object] }
  },
  body: BlockStatement {
    type: 'BlockStatement',
    body: [ [IfStatement] ],
    loc: { start: [Object], end: [Object] }
  },
  loc: { start: { line: 3, column: 4 }, end: { line: 9, column: 5 } }
}
Evaluating expression of type: Literal
Declared variable j with value: 0
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: BinaryExpression
Evaluating expression of type: BinaryExpression
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Evaluating expression of type: Identifier
Evaluating BinaryExpression: MemberExpression - Identifier
Values: 4 - 2
Evaluating expression of type: Literal
Evaluating BinaryExpression: BinaryExpression - Literal
Values: 2 - 1
Evaluating BinaryExpression: Identifier < BinaryExpression
Values: 0 < 1
For loop test condition result: true
Loop test condition is true, entering loop body with context: {
  variables: { array: [ 1, 3, 5, 6 ], i: 2, j: 0, temp: 3 },
  history: [
    { line: 1, action: 'declare-variable', details: [Object] },
    { line: 2, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'declare-variable', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 6, action: 'swap', details: [Object] },
    { line: 7, action: 'swap', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 6, action: 'swap', details: [Object] },
    { line: 7, action: 'swap', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 6, action: 'swap', details: [Object] },
    { line: 7, action: 'swap', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 9, action: 'loop-end', details: null },
    { line: 2, action: 'loop-update', details: [Object] },
    { line: 3, action: 'declare-variable', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 9, action: 'loop-end', details: null },
    { line: 2, action: 'loop-update', details: [Object] },
    { line: 3, action: 'declare-variable', details: [Object] }
  ],
  functions: { swap: [Function (anonymous)] }
}
Evaluating expression of type: BinaryExpression
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Evaluating expression of type: MemberExpression
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: Literal
Evaluating BinaryExpression: Identifier + Literal
Values: 0 + 1
Evaluating BinaryExpression: MemberExpression > MemberExpression
Values: 1 > 3
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Declared variable temp with value: 1
Evaluating expression of type: UpdateExpression
Updating loop variable j to  1
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: BinaryExpression
Evaluating expression of type: BinaryExpression
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Evaluating expression of type: Identifier
Evaluating BinaryExpression: MemberExpression - Identifier
Values: 4 - 2
Evaluating expression of type: Literal
Evaluating BinaryExpression: BinaryExpression - Literal
Values: 2 - 1
Evaluating BinaryExpression: Identifier < BinaryExpression
Values: 1 < 1
For loop test condition result: false
Loop test condition is false, exiting loop
Evaluating expression of type: UpdateExpression
Updating loop variable i to  3
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Evaluating BinaryExpression: Identifier < MemberExpression
Values: 3 < 4
For loop test condition result: true
Loop test condition is true, entering loop body with context: {
  variables: { array: [ 1, 3, 5, 6 ], i: 3, j: 1, temp: 1 },
  history: [
    { line: 1, action: 'declare-variable', details: [Object] },
    { line: 2, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'declare-variable', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 6, action: 'swap', details: [Object] },
    { line: 7, action: 'swap', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 6, action: 'swap', details: [Object] },
    { line: 7, action: 'swap', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 6, action: 'swap', details: [Object] },
    { line: 7, action: 'swap', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 9, action: 'loop-end', details: null },
    { line: 2, action: 'loop-update', details: [Object] },
    { line: 3, action: 'declare-variable', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 9, action: 'loop-end', details: null },
    { line: 2, action: 'loop-update', details: [Object] },
    { line: 3, action: 'declare-variable', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 9, action: 'loop-end', details: null },
    { line: 2, action: 'loop-update', details: [Object] }
  ],
  functions: { swap: [Function (anonymous)] }
}
Entering handleForStatement with node: ForStatement {
  type: 'ForStatement',
  init: VariableDeclaration {
    type: 'VariableDeclaration',
    declarations: [ [VariableDeclarator] ],
    kind: 'var',
    loc: { start: [Object], end: [Object] }
  },
  test: BinaryExpression {
    type: 'BinaryExpression',
    operator: '<',
    left: Identifier { type: 'Identifier', name: 'j', loc: [Object] },
    right: BinaryExpression {
      type: 'BinaryExpression',
      operator: '-',
      left: [BinaryExpression],
      right: [Literal],
      loc: [Object]
    },
    loc: { start: [Object], end: [Object] }
  },
  update: UpdateExpression {
    type: 'UpdateExpression',
    operator: '++',
    argument: Identifier { type: 'Identifier', name: 'j', loc: [Object] },
    prefix: false,
    loc: { start: [Object], end: [Object] }
  },
  body: BlockStatement {
    type: 'BlockStatement',
    body: [ [IfStatement] ],
    loc: { start: [Object], end: [Object] }
  },
  loc: { start: { line: 3, column: 4 }, end: { line: 9, column: 5 } }
}
Evaluating expression of type: Literal
Declared variable j with value: 0
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: BinaryExpression
Evaluating expression of type: BinaryExpression
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Evaluating expression of type: Identifier
Evaluating BinaryExpression: MemberExpression - Identifier
Values: 4 - 3
Evaluating expression of type: Literal
Evaluating BinaryExpression: BinaryExpression - Literal
Values: 1 - 1
Evaluating BinaryExpression: Identifier < BinaryExpression
Values: 0 < 0
For loop test condition result: false
Loop test condition is false, exiting loop
Evaluating expression of type: UpdateExpression
Updating loop variable i to  4
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Evaluating BinaryExpression: Identifier < MemberExpression
Values: 4 < 4
For loop test condition result: false
Loop test condition is false, exiting loop
Evaluating expression of type: ArrayExpression
Evaluating expression of type: Literal
Evaluating expression of type: Literal
Evaluating expression of type: Literal
Evaluating expression of type: Literal
Declared variable array with value: [ 6, 1, 3, 5 ]
Entering handleForStatement with node: ForStatement {
  type: 'ForStatement',
  init: VariableDeclaration {
    type: 'VariableDeclaration',
    declarations: [ [VariableDeclarator] ],
    kind: 'var',
    loc: { start: [Object], end: [Object] }
  },
  test: BinaryExpression {
    type: 'BinaryExpression',
    operator: '<',
    left: Identifier { type: 'Identifier', name: 'i', loc: [Object] },
    right: StaticMemberExpression {
      type: 'MemberExpression',
      computed: false,
      object: [Identifier],
      property: [Identifier],
      loc: [Object]
    },
    loc: { start: [Object], end: [Object] }
  },
  update: UpdateExpression {
    type: 'UpdateExpression',
    operator: '++',
    argument: Identifier { type: 'Identifier', name: 'i', loc: [Object] },
    prefix: false,
    loc: { start: [Object], end: [Object] }
  },
  body: BlockStatement {
    type: 'BlockStatement',
    body: [ [ForStatement] ],
    loc: { start: [Object], end: [Object] }
  },
  loc: { start: { line: 2, column: 0 }, end: { line: 10, column: 1 } }
}
Evaluating expression of type: Literal
Declared variable i with value: 0
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Evaluating BinaryExpression: Identifier < MemberExpression
Values: 0 < 4
For loop test condition result: true
Loop test condition is true, entering loop body with context: {
  variables: { array: [ 6, 1, 3, 5 ], i: 0 },
  history: [
    { line: 1, action: 'declare-variable', details: [Object] },
    { line: 2, action: 'declare-variable', details: [Object] }
  ],
  functions: { swap: [Function (anonymous)] }
}
Entering handleForStatement with node: ForStatement {
  type: 'ForStatement',
  init: VariableDeclaration {
    type: 'VariableDeclaration',
    declarations: [ [VariableDeclarator] ],
    kind: 'var',
    loc: { start: [Object], end: [Object] }
  },
  test: BinaryExpression {
    type: 'BinaryExpression',
    operator: '<',
    left: Identifier { type: 'Identifier', name: 'j', loc: [Object] },
    right: BinaryExpression {
      type: 'BinaryExpression',
      operator: '-',
      left: [BinaryExpression],
      right: [Literal],
      loc: [Object]
    },
    loc: { start: [Object], end: [Object] }
  },
  update: UpdateExpression {
    type: 'UpdateExpression',
    operator: '++',
    argument: Identifier { type: 'Identifier', name: 'j', loc: [Object] },
    prefix: false,
    loc: { start: [Object], end: [Object] }
  },
  body: BlockStatement {
    type: 'BlockStatement',
    body: [ [IfStatement] ],
    loc: { start: [Object], end: [Object] }
  },
  loc: { start: { line: 3, column: 4 }, end: { line: 9, column: 5 } }
}
Evaluating expression of type: Literal
Declared variable j with value: 0
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: BinaryExpression
Evaluating expression of type: BinaryExpression
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Evaluating expression of type: Identifier
Evaluating BinaryExpression: MemberExpression - Identifier
Values: 4 - 0
Evaluating expression of type: Literal
Evaluating BinaryExpression: BinaryExpression - Literal
Values: 4 - 1
Evaluating BinaryExpression: Identifier < BinaryExpression
Values: 0 < 3
For loop test condition result: true
Loop test condition is true, entering loop body with context: {
  variables: { array: [ 6, 1, 3, 5 ], i: 0, j: 0 },
  history: [
    { line: 1, action: 'declare-variable', details: [Object] },
    { line: 2, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'declare-variable', details: [Object] }
  ],
  functions: { swap: [Function (anonymous)] }
}
Evaluating expression of type: BinaryExpression
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Evaluating expression of type: MemberExpression
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: Literal
Evaluating BinaryExpression: Identifier + Literal
Values: 0 + 1
Evaluating BinaryExpression: MemberExpression > MemberExpression
Values: 6 > 1
Evaluating expression of type: Identifier
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: Literal
Evaluating BinaryExpression: Identifier + Literal
Values: 0 + 1
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Declared variable temp with value: 1
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Declared variable temp with value: 1
Evaluating expression of type: UpdateExpression
Updating loop variable j to  1
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: BinaryExpression
Evaluating expression of type: BinaryExpression
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Evaluating expression of type: Identifier
Evaluating BinaryExpression: MemberExpression - Identifier
Values: 4 - 0
Evaluating expression of type: Literal
Evaluating BinaryExpression: BinaryExpression - Literal
Values: 4 - 1
Evaluating BinaryExpression: Identifier < BinaryExpression
Values: 1 < 3
For loop test condition result: true
Loop test condition is true, entering loop body with context: {
  variables: { array: [ 1, 6, 3, 5 ], i: 0, j: 1, temp: 1 },
  history: [
    { line: 1, action: 'declare-variable', details: [Object] },
    { line: 2, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'declare-variable', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 6, action: 'swap', details: [Object] },
    { line: 7, action: 'swap', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] }
  ],
  functions: { swap: [Function (anonymous)] }
}
Evaluating expression of type: BinaryExpression
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Evaluating expression of type: MemberExpression
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: Literal
Evaluating BinaryExpression: Identifier + Literal
Values: 1 + 1
Evaluating BinaryExpression: MemberExpression > MemberExpression
Values: 6 > 3
Evaluating expression of type: Identifier
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: Literal
Evaluating BinaryExpression: Identifier + Literal
Values: 1 + 1
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Declared variable temp with value: 3
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Declared variable temp with value: 3
Evaluating expression of type: UpdateExpression
Updating loop variable j to  2
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: BinaryExpression
Evaluating expression of type: BinaryExpression
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Evaluating expression of type: Identifier
Evaluating BinaryExpression: MemberExpression - Identifier
Values: 4 - 0
Evaluating expression of type: Literal
Evaluating BinaryExpression: BinaryExpression - Literal
Values: 4 - 1
Evaluating BinaryExpression: Identifier < BinaryExpression
Values: 2 < 3
For loop test condition result: true
Loop test condition is true, entering loop body with context: {
  variables: { array: [ 1, 3, 6, 5 ], i: 0, j: 2, temp: 3 },
  history: [
    { line: 1, action: 'declare-variable', details: [Object] },
    { line: 2, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'declare-variable', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 6, action: 'swap', details: [Object] },
    { line: 7, action: 'swap', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 6, action: 'swap', details: [Object] },
    { line: 7, action: 'swap', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] }
  ],
  functions: { swap: [Function (anonymous)] }
}
Evaluating expression of type: BinaryExpression
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Evaluating expression of type: MemberExpression
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: Literal
Evaluating BinaryExpression: Identifier + Literal
Values: 2 + 1
Evaluating BinaryExpression: MemberExpression > MemberExpression
Values: 6 > 5
Evaluating expression of type: Identifier
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: Literal
Evaluating BinaryExpression: Identifier + Literal
Values: 2 + 1
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Declared variable temp with value: 5
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Declared variable temp with value: 5
Evaluating expression of type: UpdateExpression
Updating loop variable j to  3
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: BinaryExpression
Evaluating expression of type: BinaryExpression
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Evaluating expression of type: Identifier
Evaluating BinaryExpression: MemberExpression - Identifier
Values: 4 - 0
Evaluating expression of type: Literal
Evaluating BinaryExpression: BinaryExpression - Literal
Values: 4 - 1
Evaluating BinaryExpression: Identifier < BinaryExpression
Values: 3 < 3
For loop test condition result: false
Loop test condition is false, exiting loop
Evaluating expression of type: UpdateExpression
Updating loop variable i to  1
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Evaluating BinaryExpression: Identifier < MemberExpression
Values: 1 < 4
For loop test condition result: true
Loop test condition is true, entering loop body with context: {
  variables: { array: [ 1, 3, 5, 6 ], i: 1, j: 3, temp: 5 },
  history: [
    { line: 1, action: 'declare-variable', details: [Object] },
    { line: 2, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'declare-variable', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 6, action: 'swap', details: [Object] },
    { line: 7, action: 'swap', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 6, action: 'swap', details: [Object] },
    { line: 7, action: 'swap', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 6, action: 'swap', details: [Object] },
    { line: 7, action: 'swap', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 9, action: 'loop-end', details: null },
    { line: 2, action: 'loop-update', details: [Object] }
  ],
  functions: { swap: [Function (anonymous)] }
}
Entering handleForStatement with node: ForStatement {
  type: 'ForStatement',
  init: VariableDeclaration {
    type: 'VariableDeclaration',
    declarations: [ [VariableDeclarator] ],
    kind: 'var',
    loc: { start: [Object], end: [Object] }
  },
  test: BinaryExpression {
    type: 'BinaryExpression',
    operator: '<',
    left: Identifier { type: 'Identifier', name: 'j', loc: [Object] },
    right: BinaryExpression {
      type: 'BinaryExpression',
      operator: '-',
      left: [BinaryExpression],
      right: [Literal],
      loc: [Object]
    },
    loc: { start: [Object], end: [Object] }
  },
  update: UpdateExpression {
    type: 'UpdateExpression',
    operator: '++',
    argument: Identifier { type: 'Identifier', name: 'j', loc: [Object] },
    prefix: false,
    loc: { start: [Object], end: [Object] }
  },
  body: BlockStatement {
    type: 'BlockStatement',
    body: [ [IfStatement] ],
    loc: { start: [Object], end: [Object] }
  },
  loc: { start: { line: 3, column: 4 }, end: { line: 9, column: 5 } }
}
Evaluating expression of type: Literal
Declared variable j with value: 0
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: BinaryExpression
Evaluating expression of type: BinaryExpression
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Evaluating expression of type: Identifier
Evaluating BinaryExpression: MemberExpression - Identifier
Values: 4 - 1
Evaluating expression of type: Literal
Evaluating BinaryExpression: BinaryExpression - Literal
Values: 3 - 1
Evaluating BinaryExpression: Identifier < BinaryExpression
Values: 0 < 2
For loop test condition result: true
Loop test condition is true, entering loop body with context: {
  variables: { array: [ 1, 3, 5, 6 ], i: 1, j: 0, temp: 5 },
  history: [
    { line: 1, action: 'declare-variable', details: [Object] },
    { line: 2, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'declare-variable', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 6, action: 'swap', details: [Object] },
    { line: 7, action: 'swap', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 6, action: 'swap', details: [Object] },
    { line: 7, action: 'swap', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 6, action: 'swap', details: [Object] },
    { line: 7, action: 'swap', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 9, action: 'loop-end', details: null },
    { line: 2, action: 'loop-update', details: [Object] },
    { line: 3, action: 'declare-variable', details: [Object] }
  ],
  functions: { swap: [Function (anonymous)] }
}
Evaluating expression of type: BinaryExpression
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Evaluating expression of type: MemberExpression
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: Literal
Evaluating BinaryExpression: Identifier + Literal
Values: 0 + 1
Evaluating BinaryExpression: MemberExpression > MemberExpression
Values: 1 > 3
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Declared variable temp with value: 1
Evaluating expression of type: UpdateExpression
Updating loop variable j to  1
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: BinaryExpression
Evaluating expression of type: BinaryExpression
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Evaluating expression of type: Identifier
Evaluating BinaryExpression: MemberExpression - Identifier
Values: 4 - 1
Evaluating expression of type: Literal
Evaluating BinaryExpression: BinaryExpression - Literal
Values: 3 - 1
Evaluating BinaryExpression: Identifier < BinaryExpression
Values: 1 < 2
For loop test condition result: true
Loop test condition is true, entering loop body with context: {
  variables: { array: [ 1, 3, 5, 6 ], i: 1, j: 1, temp: 1 },
  history: [
    { line: 1, action: 'declare-variable', details: [Object] },
    { line: 2, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'declare-variable', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 6, action: 'swap', details: [Object] },
    { line: 7, action: 'swap', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 6, action: 'swap', details: [Object] },
    { line: 7, action: 'swap', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 6, action: 'swap', details: [Object] },
    { line: 7, action: 'swap', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 9, action: 'loop-end', details: null },
    { line: 2, action: 'loop-update', details: [Object] },
    { line: 3, action: 'declare-variable', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] }
  ],
  functions: { swap: [Function (anonymous)] }
}
Evaluating expression of type: BinaryExpression
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Evaluating expression of type: MemberExpression
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: Literal
Evaluating BinaryExpression: Identifier + Literal
Values: 1 + 1
Evaluating BinaryExpression: MemberExpression > MemberExpression
Values: 3 > 5
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Declared variable temp with value: 3
Evaluating expression of type: UpdateExpression
Updating loop variable j to  2
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: BinaryExpression
Evaluating expression of type: BinaryExpression
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Evaluating expression of type: Identifier
Evaluating BinaryExpression: MemberExpression - Identifier
Values: 4 - 1
Evaluating expression of type: Literal
Evaluating BinaryExpression: BinaryExpression - Literal
Values: 3 - 1
Evaluating BinaryExpression: Identifier < BinaryExpression
Values: 2 < 2
For loop test condition result: false
Loop test condition is false, exiting loop
Evaluating expression of type: UpdateExpression
Updating loop variable i to  2
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Evaluating BinaryExpression: Identifier < MemberExpression
Values: 2 < 4
For loop test condition result: true
Loop test condition is true, entering loop body with context: {
  variables: { array: [ 1, 3, 5, 6 ], i: 2, j: 2, temp: 3 },
  history: [
    { line: 1, action: 'declare-variable', details: [Object] },
    { line: 2, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'declare-variable', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 6, action: 'swap', details: [Object] },
    { line: 7, action: 'swap', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 6, action: 'swap', details: [Object] },
    { line: 7, action: 'swap', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 6, action: 'swap', details: [Object] },
    { line: 7, action: 'swap', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 9, action: 'loop-end', details: null },
    { line: 2, action: 'loop-update', details: [Object] },
    { line: 3, action: 'declare-variable', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 9, action: 'loop-end', details: null },
    { line: 2, action: 'loop-update', details: [Object] }
  ],
  functions: { swap: [Function (anonymous)] }
}
Entering handleForStatement with node: ForStatement {
  type: 'ForStatement',
  init: VariableDeclaration {
    type: 'VariableDeclaration',
    declarations: [ [VariableDeclarator] ],
    kind: 'var',
    loc: { start: [Object], end: [Object] }
  },
  test: BinaryExpression {
    type: 'BinaryExpression',
    operator: '<',
    left: Identifier { type: 'Identifier', name: 'j', loc: [Object] },
    right: BinaryExpression {
      type: 'BinaryExpression',
      operator: '-',
      left: [BinaryExpression],
      right: [Literal],
      loc: [Object]
    },
    loc: { start: [Object], end: [Object] }
  },
  update: UpdateExpression {
    type: 'UpdateExpression',
    operator: '++',
    argument: Identifier { type: 'Identifier', name: 'j', loc: [Object] },
    prefix: false,
    loc: { start: [Object], end: [Object] }
  },
  body: BlockStatement {
    type: 'BlockStatement',
    body: [ [IfStatement] ],
    loc: { start: [Object], end: [Object] }
  },
  loc: { start: { line: 3, column: 4 }, end: { line: 9, column: 5 } }
}
Evaluating expression of type: Literal
Declared variable j with value: 0
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: BinaryExpression
Evaluating expression of type: BinaryExpression
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Evaluating expression of type: Identifier
Evaluating BinaryExpression: MemberExpression - Identifier
Values: 4 - 2
Evaluating expression of type: Literal
Evaluating BinaryExpression: BinaryExpression - Literal
Values: 2 - 1
Evaluating BinaryExpression: Identifier < BinaryExpression
Values: 0 < 1
For loop test condition result: true
Loop test condition is true, entering loop body with context: {
  variables: { array: [ 1, 3, 5, 6 ], i: 2, j: 0, temp: 3 },
  history: [
    { line: 1, action: 'declare-variable', details: [Object] },
    { line: 2, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'declare-variable', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 6, action: 'swap', details: [Object] },
    { line: 7, action: 'swap', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 6, action: 'swap', details: [Object] },
    { line: 7, action: 'swap', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 6, action: 'swap', details: [Object] },
    { line: 7, action: 'swap', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 9, action: 'loop-end', details: null },
    { line: 2, action: 'loop-update', details: [Object] },
    { line: 3, action: 'declare-variable', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 9, action: 'loop-end', details: null },
    { line: 2, action: 'loop-update', details: [Object] },
    { line: 3, action: 'declare-variable', details: [Object] }
  ],
  functions: { swap: [Function (anonymous)] }
}
Evaluating expression of type: BinaryExpression
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Evaluating expression of type: MemberExpression
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: Literal
Evaluating BinaryExpression: Identifier + Literal
Values: 0 + 1
Evaluating BinaryExpression: MemberExpression > MemberExpression
Values: 1 > 3
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Declared variable temp with value: 1
Evaluating expression of type: UpdateExpression
Updating loop variable j to  1
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: BinaryExpression
Evaluating expression of type: BinaryExpression
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Evaluating expression of type: Identifier
Evaluating BinaryExpression: MemberExpression - Identifier
Values: 4 - 2
Evaluating expression of type: Literal
Evaluating BinaryExpression: BinaryExpression - Literal
Values: 2 - 1
Evaluating BinaryExpression: Identifier < BinaryExpression
Values: 1 < 1
For loop test condition result: false
Loop test condition is false, exiting loop
Evaluating expression of type: UpdateExpression
Updating loop variable i to  3
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Evaluating BinaryExpression: Identifier < MemberExpression
Values: 3 < 4
For loop test condition result: true
Loop test condition is true, entering loop body with context: {
  variables: { array: [ 1, 3, 5, 6 ], i: 3, j: 1, temp: 1 },
  history: [
    { line: 1, action: 'declare-variable', details: [Object] },
    { line: 2, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'declare-variable', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 6, action: 'swap', details: [Object] },
    { line: 7, action: 'swap', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 6, action: 'swap', details: [Object] },
    { line: 7, action: 'swap', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 6, action: 'swap', details: [Object] },
    { line: 7, action: 'swap', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 9, action: 'loop-end', details: null },
    { line: 2, action: 'loop-update', details: [Object] },
    { line: 3, action: 'declare-variable', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 9, action: 'loop-end', details: null },
    { line: 2, action: 'loop-update', details: [Object] },
    { line: 3, action: 'declare-variable', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 9, action: 'loop-end', details: null },
    { line: 2, action: 'loop-update', details: [Object] }
  ],
  functions: { swap: [Function (anonymous)] }
}
Entering handleForStatement with node: ForStatement {
  type: 'ForStatement',
  init: VariableDeclaration {
    type: 'VariableDeclaration',
    declarations: [ [VariableDeclarator] ],
    kind: 'var',
    loc: { start: [Object], end: [Object] }
  },
  test: BinaryExpression {
    type: 'BinaryExpression',
    operator: '<',
    left: Identifier { type: 'Identifier', name: 'j', loc: [Object] },
    right: BinaryExpression {
      type: 'BinaryExpression',
      operator: '-',
      left: [BinaryExpression],
      right: [Literal],
      loc: [Object]
    },
    loc: { start: [Object], end: [Object] }
  },
  update: UpdateExpression {
    type: 'UpdateExpression',
    operator: '++',
    argument: Identifier { type: 'Identifier', name: 'j', loc: [Object] },
    prefix: false,
    loc: { start: [Object], end: [Object] }
  },
  body: BlockStatement {
    type: 'BlockStatement',
    body: [ [IfStatement] ],
    loc: { start: [Object], end: [Object] }
  },
  loc: { start: { line: 3, column: 4 }, end: { line: 9, column: 5 } }
}
Evaluating expression of type: Literal
Declared variable j with value: 0
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: BinaryExpression
Evaluating expression of type: BinaryExpression
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Evaluating expression of type: Identifier
Evaluating BinaryExpression: MemberExpression - Identifier
Values: 4 - 3
Evaluating expression of type: Literal
Evaluating BinaryExpression: BinaryExpression - Literal
Values: 1 - 1
Evaluating BinaryExpression: Identifier < BinaryExpression
Values: 0 < 0
For loop test condition result: false
Loop test condition is false, exiting loop
Evaluating expression of type: UpdateExpression
Updating loop variable i to  4
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Evaluating BinaryExpression: Identifier < MemberExpression
Values: 4 < 4
For loop test condition result: false
Loop test condition is false, exiting loop
Evaluating expression of type: ArrayExpression
Evaluating expression of type: Literal
Evaluating expression of type: Literal
Evaluating expression of type: Literal
Evaluating expression of type: Literal
Declared variable array with value: [ 6, 1, 7, 5 ]
Entering handleForStatement with node: ForStatement {
  type: 'ForStatement',
  init: VariableDeclaration {
    type: 'VariableDeclaration',
    declarations: [ [VariableDeclarator] ],
    kind: 'var',
    loc: { start: [Object], end: [Object] }
  },
  test: BinaryExpression {
    type: 'BinaryExpression',
    operator: '<',
    left: Identifier { type: 'Identifier', name: 'i', loc: [Object] },
    right: StaticMemberExpression {
      type: 'MemberExpression',
      computed: false,
      object: [Identifier],
      property: [Identifier],
      loc: [Object]
    },
    loc: { start: [Object], end: [Object] }
  },
  update: UpdateExpression {
    type: 'UpdateExpression',
    operator: '++',
    argument: Identifier { type: 'Identifier', name: 'i', loc: [Object] },
    prefix: false,
    loc: { start: [Object], end: [Object] }
  },
  body: BlockStatement {
    type: 'BlockStatement',
    body: [ [ForStatement] ],
    loc: { start: [Object], end: [Object] }
  },
  loc: { start: { line: 2, column: 0 }, end: { line: 10, column: 1 } }
}
Evaluating expression of type: Literal
Declared variable i with value: 0
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Evaluating BinaryExpression: Identifier < MemberExpression
Values: 0 < 4
For loop test condition result: true
Loop test condition is true, entering loop body with context: {
  variables: { array: [ 6, 1, 7, 5 ], i: 0 },
  history: [
    { line: 1, action: 'declare-variable', details: [Object] },
    { line: 2, action: 'declare-variable', details: [Object] }
  ],
  functions: { swap: [Function (anonymous)] }
}
Entering handleForStatement with node: ForStatement {
  type: 'ForStatement',
  init: VariableDeclaration {
    type: 'VariableDeclaration',
    declarations: [ [VariableDeclarator] ],
    kind: 'var',
    loc: { start: [Object], end: [Object] }
  },
  test: BinaryExpression {
    type: 'BinaryExpression',
    operator: '<',
    left: Identifier { type: 'Identifier', name: 'j', loc: [Object] },
    right: BinaryExpression {
      type: 'BinaryExpression',
      operator: '-',
      left: [BinaryExpression],
      right: [Literal],
      loc: [Object]
    },
    loc: { start: [Object], end: [Object] }
  },
  update: UpdateExpression {
    type: 'UpdateExpression',
    operator: '++',
    argument: Identifier { type: 'Identifier', name: 'j', loc: [Object] },
    prefix: false,
    loc: { start: [Object], end: [Object] }
  },
  body: BlockStatement {
    type: 'BlockStatement',
    body: [ [IfStatement] ],
    loc: { start: [Object], end: [Object] }
  },
  loc: { start: { line: 3, column: 4 }, end: { line: 9, column: 5 } }
}
Evaluating expression of type: Literal
Declared variable j with value: 0
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: BinaryExpression
Evaluating expression of type: BinaryExpression
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Evaluating expression of type: Identifier
Evaluating BinaryExpression: MemberExpression - Identifier
Values: 4 - 0
Evaluating expression of type: Literal
Evaluating BinaryExpression: BinaryExpression - Literal
Values: 4 - 1
Evaluating BinaryExpression: Identifier < BinaryExpression
Values: 0 < 3
For loop test condition result: true
Loop test condition is true, entering loop body with context: {
  variables: { array: [ 6, 1, 7, 5 ], i: 0, j: 0 },
  history: [
    { line: 1, action: 'declare-variable', details: [Object] },
    { line: 2, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'declare-variable', details: [Object] }
  ],
  functions: { swap: [Function (anonymous)] }
}
Evaluating expression of type: BinaryExpression
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Evaluating expression of type: MemberExpression
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: Literal
Evaluating BinaryExpression: Identifier + Literal
Values: 0 + 1
Evaluating BinaryExpression: MemberExpression > MemberExpression
Values: 6 > 1
Evaluating expression of type: Identifier
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: Literal
Evaluating BinaryExpression: Identifier + Literal
Values: 0 + 1
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Declared variable temp with value: 1
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Declared variable temp with value: 1
Evaluating expression of type: UpdateExpression
Updating loop variable j to  1
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: BinaryExpression
Evaluating expression of type: BinaryExpression
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Evaluating expression of type: Identifier
Evaluating BinaryExpression: MemberExpression - Identifier
Values: 4 - 0
Evaluating expression of type: Literal
Evaluating BinaryExpression: BinaryExpression - Literal
Values: 4 - 1
Evaluating BinaryExpression: Identifier < BinaryExpression
Values: 1 < 3
For loop test condition result: true
Loop test condition is true, entering loop body with context: {
  variables: { array: [ 1, 6, 7, 5 ], i: 0, j: 1, temp: 1 },
  history: [
    { line: 1, action: 'declare-variable', details: [Object] },
    { line: 2, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'declare-variable', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 6, action: 'swap', details: [Object] },
    { line: 7, action: 'swap', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] }
  ],
  functions: { swap: [Function (anonymous)] }
}
Evaluating expression of type: BinaryExpression
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Evaluating expression of type: MemberExpression
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: Literal
Evaluating BinaryExpression: Identifier + Literal
Values: 1 + 1
Evaluating BinaryExpression: MemberExpression > MemberExpression
Values: 6 > 7
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Declared variable temp with value: 6
Evaluating expression of type: UpdateExpression
Updating loop variable j to  2
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: BinaryExpression
Evaluating expression of type: BinaryExpression
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Evaluating expression of type: Identifier
Evaluating BinaryExpression: MemberExpression - Identifier
Values: 4 - 0
Evaluating expression of type: Literal
Evaluating BinaryExpression: BinaryExpression - Literal
Values: 4 - 1
Evaluating BinaryExpression: Identifier < BinaryExpression
Values: 2 < 3
For loop test condition result: true
Loop test condition is true, entering loop body with context: {
  variables: { array: [ 1, 6, 7, 5 ], i: 0, j: 2, temp: 6 },
  history: [
    { line: 1, action: 'declare-variable', details: [Object] },
    { line: 2, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'declare-variable', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 6, action: 'swap', details: [Object] },
    { line: 7, action: 'swap', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] }
  ],
  functions: { swap: [Function (anonymous)] }
}
Evaluating expression of type: BinaryExpression
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Evaluating expression of type: MemberExpression
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: Literal
Evaluating BinaryExpression: Identifier + Literal
Values: 2 + 1
Evaluating BinaryExpression: MemberExpression > MemberExpression
Values: 7 > 5
Evaluating expression of type: Identifier
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: Literal
Evaluating BinaryExpression: Identifier + Literal
Values: 2 + 1
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Declared variable temp with value: 5
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Declared variable temp with value: 5
Evaluating expression of type: UpdateExpression
Updating loop variable j to  3
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: BinaryExpression
Evaluating expression of type: BinaryExpression
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Evaluating expression of type: Identifier
Evaluating BinaryExpression: MemberExpression - Identifier
Values: 4 - 0
Evaluating expression of type: Literal
Evaluating BinaryExpression: BinaryExpression - Literal
Values: 4 - 1
Evaluating BinaryExpression: Identifier < BinaryExpression
Values: 3 < 3
For loop test condition result: false
Loop test condition is false, exiting loop
Evaluating expression of type: UpdateExpression
Updating loop variable i to  1
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Evaluating BinaryExpression: Identifier < MemberExpression
Values: 1 < 4
For loop test condition result: true
Loop test condition is true, entering loop body with context: {
  variables: { array: [ 1, 6, 5, 7 ], i: 1, j: 3, temp: 5 },
  history: [
    { line: 1, action: 'declare-variable', details: [Object] },
    { line: 2, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'declare-variable', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 6, action: 'swap', details: [Object] },
    { line: 7, action: 'swap', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 6, action: 'swap', details: [Object] },
    { line: 7, action: 'swap', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 9, action: 'loop-end', details: null },
    { line: 2, action: 'loop-update', details: [Object] }
  ],
  functions: { swap: [Function (anonymous)] }
}
Entering handleForStatement with node: ForStatement {
  type: 'ForStatement',
  init: VariableDeclaration {
    type: 'VariableDeclaration',
    declarations: [ [VariableDeclarator] ],
    kind: 'var',
    loc: { start: [Object], end: [Object] }
  },
  test: BinaryExpression {
    type: 'BinaryExpression',
    operator: '<',
    left: Identifier { type: 'Identifier', name: 'j', loc: [Object] },
    right: BinaryExpression {
      type: 'BinaryExpression',
      operator: '-',
      left: [BinaryExpression],
      right: [Literal],
      loc: [Object]
    },
    loc: { start: [Object], end: [Object] }
  },
  update: UpdateExpression {
    type: 'UpdateExpression',
    operator: '++',
    argument: Identifier { type: 'Identifier', name: 'j', loc: [Object] },
    prefix: false,
    loc: { start: [Object], end: [Object] }
  },
  body: BlockStatement {
    type: 'BlockStatement',
    body: [ [IfStatement] ],
    loc: { start: [Object], end: [Object] }
  },
  loc: { start: { line: 3, column: 4 }, end: { line: 9, column: 5 } }
}
Evaluating expression of type: Literal
Declared variable j with value: 0
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: BinaryExpression
Evaluating expression of type: BinaryExpression
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Evaluating expression of type: Identifier
Evaluating BinaryExpression: MemberExpression - Identifier
Values: 4 - 1
Evaluating expression of type: Literal
Evaluating BinaryExpression: BinaryExpression - Literal
Values: 3 - 1
Evaluating BinaryExpression: Identifier < BinaryExpression
Values: 0 < 2
For loop test condition result: true
Loop test condition is true, entering loop body with context: {
  variables: { array: [ 1, 6, 5, 7 ], i: 1, j: 0, temp: 5 },
  history: [
    { line: 1, action: 'declare-variable', details: [Object] },
    { line: 2, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'declare-variable', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 6, action: 'swap', details: [Object] },
    { line: 7, action: 'swap', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 6, action: 'swap', details: [Object] },
    { line: 7, action: 'swap', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 9, action: 'loop-end', details: null },
    { line: 2, action: 'loop-update', details: [Object] },
    { line: 3, action: 'declare-variable', details: [Object] }
  ],
  functions: { swap: [Function (anonymous)] }
}
Evaluating expression of type: BinaryExpression
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Evaluating expression of type: MemberExpression
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: Literal
Evaluating BinaryExpression: Identifier + Literal
Values: 0 + 1
Evaluating BinaryExpression: MemberExpression > MemberExpression
Values: 1 > 6
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Declared variable temp with value: 1
Evaluating expression of type: UpdateExpression
Updating loop variable j to  1
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: BinaryExpression
Evaluating expression of type: BinaryExpression
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Evaluating expression of type: Identifier
Evaluating BinaryExpression: MemberExpression - Identifier
Values: 4 - 1
Evaluating expression of type: Literal
Evaluating BinaryExpression: BinaryExpression - Literal
Values: 3 - 1
Evaluating BinaryExpression: Identifier < BinaryExpression
Values: 1 < 2
For loop test condition result: true
Loop test condition is true, entering loop body with context: {
  variables: { array: [ 1, 6, 5, 7 ], i: 1, j: 1, temp: 1 },
  history: [
    { line: 1, action: 'declare-variable', details: [Object] },
    { line: 2, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'declare-variable', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 6, action: 'swap', details: [Object] },
    { line: 7, action: 'swap', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 6, action: 'swap', details: [Object] },
    { line: 7, action: 'swap', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 9, action: 'loop-end', details: null },
    { line: 2, action: 'loop-update', details: [Object] },
    { line: 3, action: 'declare-variable', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] }
  ],
  functions: { swap: [Function (anonymous)] }
}
Evaluating expression of type: BinaryExpression
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Evaluating expression of type: MemberExpression
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: Literal
Evaluating BinaryExpression: Identifier + Literal
Values: 1 + 1
Evaluating BinaryExpression: MemberExpression > MemberExpression
Values: 6 > 5
Evaluating expression of type: Identifier
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: Literal
Evaluating BinaryExpression: Identifier + Literal
Values: 1 + 1
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Declared variable temp with value: 5
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Declared variable temp with value: 5
Evaluating expression of type: UpdateExpression
Updating loop variable j to  2
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: BinaryExpression
Evaluating expression of type: BinaryExpression
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Evaluating expression of type: Identifier
Evaluating BinaryExpression: MemberExpression - Identifier
Values: 4 - 1
Evaluating expression of type: Literal
Evaluating BinaryExpression: BinaryExpression - Literal
Values: 3 - 1
Evaluating BinaryExpression: Identifier < BinaryExpression
Values: 2 < 2
For loop test condition result: false
Loop test condition is false, exiting loop
Evaluating expression of type: UpdateExpression
Updating loop variable i to  2
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Evaluating BinaryExpression: Identifier < MemberExpression
Values: 2 < 4
For loop test condition result: true
Loop test condition is true, entering loop body with context: {
  variables: { array: [ 1, 5, 6, 7 ], i: 2, j: 2, temp: 5 },
  history: [
    { line: 1, action: 'declare-variable', details: [Object] },
    { line: 2, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'declare-variable', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 6, action: 'swap', details: [Object] },
    { line: 7, action: 'swap', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 6, action: 'swap', details: [Object] },
    { line: 7, action: 'swap', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 9, action: 'loop-end', details: null },
    { line: 2, action: 'loop-update', details: [Object] },
    { line: 3, action: 'declare-variable', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 6, action: 'swap', details: [Object] },
    { line: 7, action: 'swap', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 9, action: 'loop-end', details: null },
    { line: 2, action: 'loop-update', details: [Object] }
  ],
  functions: { swap: [Function (anonymous)] }
}
Entering handleForStatement with node: ForStatement {
  type: 'ForStatement',
  init: VariableDeclaration {
    type: 'VariableDeclaration',
    declarations: [ [VariableDeclarator] ],
    kind: 'var',
    loc: { start: [Object], end: [Object] }
  },
  test: BinaryExpression {
    type: 'BinaryExpression',
    operator: '<',
    left: Identifier { type: 'Identifier', name: 'j', loc: [Object] },
    right: BinaryExpression {
      type: 'BinaryExpression',
      operator: '-',
      left: [BinaryExpression],
      right: [Literal],
      loc: [Object]
    },
    loc: { start: [Object], end: [Object] }
  },
  update: UpdateExpression {
    type: 'UpdateExpression',
    operator: '++',
    argument: Identifier { type: 'Identifier', name: 'j', loc: [Object] },
    prefix: false,
    loc: { start: [Object], end: [Object] }
  },
  body: BlockStatement {
    type: 'BlockStatement',
    body: [ [IfStatement] ],
    loc: { start: [Object], end: [Object] }
  },
  loc: { start: { line: 3, column: 4 }, end: { line: 9, column: 5 } }
}
Evaluating expression of type: Literal
Declared variable j with value: 0
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: BinaryExpression
Evaluating expression of type: BinaryExpression
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Evaluating expression of type: Identifier
Evaluating BinaryExpression: MemberExpression - Identifier
Values: 4 - 2
Evaluating expression of type: Literal
Evaluating BinaryExpression: BinaryExpression - Literal
Values: 2 - 1
Evaluating BinaryExpression: Identifier < BinaryExpression
Values: 0 < 1
For loop test condition result: true
Loop test condition is true, entering loop body with context: {
  variables: { array: [ 1, 5, 6, 7 ], i: 2, j: 0, temp: 5 },
  history: [
    { line: 1, action: 'declare-variable', details: [Object] },
    { line: 2, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'declare-variable', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 6, action: 'swap', details: [Object] },
    { line: 7, action: 'swap', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 6, action: 'swap', details: [Object] },
    { line: 7, action: 'swap', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 9, action: 'loop-end', details: null },
    { line: 2, action: 'loop-update', details: [Object] },
    { line: 3, action: 'declare-variable', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 6, action: 'swap', details: [Object] },
    { line: 7, action: 'swap', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 9, action: 'loop-end', details: null },
    { line: 2, action: 'loop-update', details: [Object] },
    { line: 3, action: 'declare-variable', details: [Object] }
  ],
  functions: { swap: [Function (anonymous)] }
}
Evaluating expression of type: BinaryExpression
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Evaluating expression of type: MemberExpression
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: Literal
Evaluating BinaryExpression: Identifier + Literal
Values: 0 + 1
Evaluating BinaryExpression: MemberExpression > MemberExpression
Values: 1 > 5
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Declared variable temp with value: 1
Evaluating expression of type: UpdateExpression
Updating loop variable j to  1
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: BinaryExpression
Evaluating expression of type: BinaryExpression
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Evaluating expression of type: Identifier
Evaluating BinaryExpression: MemberExpression - Identifier
Values: 4 - 2
Evaluating expression of type: Literal
Evaluating BinaryExpression: BinaryExpression - Literal
Values: 2 - 1
Evaluating BinaryExpression: Identifier < BinaryExpression
Values: 1 < 1
For loop test condition result: false
Loop test condition is false, exiting loop
Evaluating expression of type: UpdateExpression
Updating loop variable i to  3
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Evaluating BinaryExpression: Identifier < MemberExpression
Values: 3 < 4
For loop test condition result: true
Loop test condition is true, entering loop body with context: {
  variables: { array: [ 1, 5, 6, 7 ], i: 3, j: 1, temp: 1 },
  history: [
    { line: 1, action: 'declare-variable', details: [Object] },
    { line: 2, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'declare-variable', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 6, action: 'swap', details: [Object] },
    { line: 7, action: 'swap', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 6, action: 'swap', details: [Object] },
    { line: 7, action: 'swap', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 9, action: 'loop-end', details: null },
    { line: 2, action: 'loop-update', details: [Object] },
    { line: 3, action: 'declare-variable', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 6, action: 'swap', details: [Object] },
    { line: 7, action: 'swap', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 9, action: 'loop-end', details: null },
    { line: 2, action: 'loop-update', details: [Object] },
    { line: 3, action: 'declare-variable', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 9, action: 'loop-end', details: null },
    { line: 2, action: 'loop-update', details: [Object] }
  ],
  functions: { swap: [Function (anonymous)] }
}
Entering handleForStatement with node: ForStatement {
  type: 'ForStatement',
  init: VariableDeclaration {
    type: 'VariableDeclaration',
    declarations: [ [VariableDeclarator] ],
    kind: 'var',
    loc: { start: [Object], end: [Object] }
  },
  test: BinaryExpression {
    type: 'BinaryExpression',
    operator: '<',
    left: Identifier { type: 'Identifier', name: 'j', loc: [Object] },
    right: BinaryExpression {
      type: 'BinaryExpression',
      operator: '-',
      left: [BinaryExpression],
      right: [Literal],
      loc: [Object]
    },
    loc: { start: [Object], end: [Object] }
  },
  update: UpdateExpression {
    type: 'UpdateExpression',
    operator: '++',
    argument: Identifier { type: 'Identifier', name: 'j', loc: [Object] },
    prefix: false,
    loc: { start: [Object], end: [Object] }
  },
  body: BlockStatement {
    type: 'BlockStatement',
    body: [ [IfStatement] ],
    loc: { start: [Object], end: [Object] }
  },
  loc: { start: { line: 3, column: 4 }, end: { line: 9, column: 5 } }
}
Evaluating expression of type: Literal
Declared variable j with value: 0
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: BinaryExpression
Evaluating expression of type: BinaryExpression
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Evaluating expression of type: Identifier
Evaluating BinaryExpression: MemberExpression - Identifier
Values: 4 - 3
Evaluating expression of type: Literal
Evaluating BinaryExpression: BinaryExpression - Literal
Values: 1 - 1
Evaluating BinaryExpression: Identifier < BinaryExpression
Values: 0 < 0
For loop test condition result: false
Loop test condition is false, exiting loop
Evaluating expression of type: UpdateExpression
Updating loop variable i to  4
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Evaluating BinaryExpression: Identifier < MemberExpression
Values: 4 < 4
For loop test condition result: false
Loop test condition is false, exiting loop
Evaluating expression of type: ArrayExpression
Evaluating expression of type: Literal
Evaluating expression of type: Literal
Evaluating expression of type: Literal
Evaluating expression of type: Literal
Declared variable array with value: [ 6, 1, 7, 5 ]
Entering handleForStatement with node: ForStatement {
  type: 'ForStatement',
  init: VariableDeclaration {
    type: 'VariableDeclaration',
    declarations: [ [VariableDeclarator] ],
    kind: 'var',
    loc: { start: [Object], end: [Object] }
  },
  test: BinaryExpression {
    type: 'BinaryExpression',
    operator: '<',
    left: Identifier { type: 'Identifier', name: 'i', loc: [Object] },
    right: StaticMemberExpression {
      type: 'MemberExpression',
      computed: false,
      object: [Identifier],
      property: [Identifier],
      loc: [Object]
    },
    loc: { start: [Object], end: [Object] }
  },
  update: UpdateExpression {
    type: 'UpdateExpression',
    operator: '++',
    argument: Identifier { type: 'Identifier', name: 'i', loc: [Object] },
    prefix: false,
    loc: { start: [Object], end: [Object] }
  },
  body: BlockStatement {
    type: 'BlockStatement',
    body: [ [ForStatement] ],
    loc: { start: [Object], end: [Object] }
  },
  loc: { start: { line: 2, column: 0 }, end: { line: 10, column: 1 } }
}
Evaluating expression of type: Literal
Declared variable i with value: 0
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Evaluating BinaryExpression: Identifier < MemberExpression
Values: 0 < 4
For loop test condition result: true
Loop test condition is true, entering loop body with context: {
  variables: { array: [ 6, 1, 7, 5 ], i: 0 },
  history: [
    { line: 1, action: 'declare-variable', details: [Object] },
    { line: 2, action: 'declare-variable', details: [Object] }
  ],
  functions: { swap: [Function (anonymous)] }
}
Entering handleForStatement with node: ForStatement {
  type: 'ForStatement',
  init: VariableDeclaration {
    type: 'VariableDeclaration',
    declarations: [ [VariableDeclarator] ],
    kind: 'var',
    loc: { start: [Object], end: [Object] }
  },
  test: BinaryExpression {
    type: 'BinaryExpression',
    operator: '<',
    left: Identifier { type: 'Identifier', name: 'j', loc: [Object] },
    right: BinaryExpression {
      type: 'BinaryExpression',
      operator: '-',
      left: [BinaryExpression],
      right: [Literal],
      loc: [Object]
    },
    loc: { start: [Object], end: [Object] }
  },
  update: UpdateExpression {
    type: 'UpdateExpression',
    operator: '++',
    argument: Identifier { type: 'Identifier', name: 'j', loc: [Object] },
    prefix: false,
    loc: { start: [Object], end: [Object] }
  },
  body: BlockStatement {
    type: 'BlockStatement',
    body: [ [IfStatement] ],
    loc: { start: [Object], end: [Object] }
  },
  loc: { start: { line: 3, column: 4 }, end: { line: 9, column: 5 } }
}
Evaluating expression of type: Literal
Declared variable j with value: 0
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: BinaryExpression
Evaluating expression of type: BinaryExpression
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Evaluating expression of type: Identifier
Evaluating BinaryExpression: MemberExpression - Identifier
Values: 4 - 0
Evaluating expression of type: Literal
Evaluating BinaryExpression: BinaryExpression - Literal
Values: 4 - 1
Evaluating BinaryExpression: Identifier < BinaryExpression
Values: 0 < 3
For loop test condition result: true
Loop test condition is true, entering loop body with context: {
  variables: { array: [ 6, 1, 7, 5 ], i: 0, j: 0 },
  history: [
    { line: 1, action: 'declare-variable', details: [Object] },
    { line: 2, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'declare-variable', details: [Object] }
  ],
  functions: { swap: [Function (anonymous)] }
}
Evaluating expression of type: BinaryExpression
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Evaluating expression of type: MemberExpression
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: Literal
Evaluating BinaryExpression: Identifier + Literal
Values: 0 + 1
Evaluating BinaryExpression: MemberExpression > MemberExpression
Values: 6 > 1
Evaluating expression of type: Identifier
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: Literal
Evaluating BinaryExpression: Identifier + Literal
Values: 0 + 1
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Declared variable temp with value: 1
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Declared variable temp with value: 1
Evaluating expression of type: UpdateExpression
Updating loop variable j to  1
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: BinaryExpression
Evaluating expression of type: BinaryExpression
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Evaluating expression of type: Identifier
Evaluating BinaryExpression: MemberExpression - Identifier
Values: 4 - 0
Evaluating expression of type: Literal
Evaluating BinaryExpression: BinaryExpression - Literal
Values: 4 - 1
Evaluating BinaryExpression: Identifier < BinaryExpression
Values: 1 < 3
For loop test condition result: true
Loop test condition is true, entering loop body with context: {
  variables: { array: [ 1, 6, 7, 5 ], i: 0, j: 1, temp: 1 },
  history: [
    { line: 1, action: 'declare-variable', details: [Object] },
    { line: 2, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'declare-variable', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 6, action: 'swap', details: [Object] },
    { line: 7, action: 'swap', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] }
  ],
  functions: { swap: [Function (anonymous)] }
}
Evaluating expression of type: BinaryExpression
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Evaluating expression of type: MemberExpression
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: Literal
Evaluating BinaryExpression: Identifier + Literal
Values: 1 + 1
Evaluating BinaryExpression: MemberExpression > MemberExpression
Values: 6 > 7
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Declared variable temp with value: 6
Evaluating expression of type: UpdateExpression
Updating loop variable j to  2
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: BinaryExpression
Evaluating expression of type: BinaryExpression
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Evaluating expression of type: Identifier
Evaluating BinaryExpression: MemberExpression - Identifier
Values: 4 - 0
Evaluating expression of type: Literal
Evaluating BinaryExpression: BinaryExpression - Literal
Values: 4 - 1
Evaluating BinaryExpression: Identifier < BinaryExpression
Values: 2 < 3
For loop test condition result: true
Loop test condition is true, entering loop body with context: {
  variables: { array: [ 1, 6, 7, 5 ], i: 0, j: 2, temp: 6 },
  history: [
    { line: 1, action: 'declare-variable', details: [Object] },
    { line: 2, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'declare-variable', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 6, action: 'swap', details: [Object] },
    { line: 7, action: 'swap', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] }
  ],
  functions: { swap: [Function (anonymous)] }
}
Evaluating expression of type: BinaryExpression
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Evaluating expression of type: MemberExpression
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: Literal
Evaluating BinaryExpression: Identifier + Literal
Values: 2 + 1
Evaluating BinaryExpression: MemberExpression > MemberExpression
Values: 7 > 5
Evaluating expression of type: Identifier
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: Literal
Evaluating BinaryExpression: Identifier + Literal
Values: 2 + 1
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Declared variable temp with value: 5
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Declared variable temp with value: 5
Evaluating expression of type: UpdateExpression
Updating loop variable j to  3
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: BinaryExpression
Evaluating expression of type: BinaryExpression
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Evaluating expression of type: Identifier
Evaluating BinaryExpression: MemberExpression - Identifier
Values: 4 - 0
Evaluating expression of type: Literal
Evaluating BinaryExpression: BinaryExpression - Literal
Values: 4 - 1
Evaluating BinaryExpression: Identifier < BinaryExpression
Values: 3 < 3
For loop test condition result: false
Loop test condition is false, exiting loop
Evaluating expression of type: UpdateExpression
Updating loop variable i to  1
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Evaluating BinaryExpression: Identifier < MemberExpression
Values: 1 < 4
For loop test condition result: true
Loop test condition is true, entering loop body with context: {
  variables: { array: [ 1, 6, 5, 7 ], i: 1, j: 3, temp: 5 },
  history: [
    { line: 1, action: 'declare-variable', details: [Object] },
    { line: 2, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'declare-variable', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 6, action: 'swap', details: [Object] },
    { line: 7, action: 'swap', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 6, action: 'swap', details: [Object] },
    { line: 7, action: 'swap', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 9, action: 'loop-end', details: null },
    { line: 2, action: 'loop-update', details: [Object] }
  ],
  functions: { swap: [Function (anonymous)] }
}
Entering handleForStatement with node: ForStatement {
  type: 'ForStatement',
  init: VariableDeclaration {
    type: 'VariableDeclaration',
    declarations: [ [VariableDeclarator] ],
    kind: 'var',
    loc: { start: [Object], end: [Object] }
  },
  test: BinaryExpression {
    type: 'BinaryExpression',
    operator: '<',
    left: Identifier { type: 'Identifier', name: 'j', loc: [Object] },
    right: BinaryExpression {
      type: 'BinaryExpression',
      operator: '-',
      left: [BinaryExpression],
      right: [Literal],
      loc: [Object]
    },
    loc: { start: [Object], end: [Object] }
  },
  update: UpdateExpression {
    type: 'UpdateExpression',
    operator: '++',
    argument: Identifier { type: 'Identifier', name: 'j', loc: [Object] },
    prefix: false,
    loc: { start: [Object], end: [Object] }
  },
  body: BlockStatement {
    type: 'BlockStatement',
    body: [ [IfStatement] ],
    loc: { start: [Object], end: [Object] }
  },
  loc: { start: { line: 3, column: 4 }, end: { line: 9, column: 5 } }
}
Evaluating expression of type: Literal
Declared variable j with value: 0
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: BinaryExpression
Evaluating expression of type: BinaryExpression
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Evaluating expression of type: Identifier
Evaluating BinaryExpression: MemberExpression - Identifier
Values: 4 - 1
Evaluating expression of type: Literal
Evaluating BinaryExpression: BinaryExpression - Literal
Values: 3 - 1
Evaluating BinaryExpression: Identifier < BinaryExpression
Values: 0 < 2
For loop test condition result: true
Loop test condition is true, entering loop body with context: {
  variables: { array: [ 1, 6, 5, 7 ], i: 1, j: 0, temp: 5 },
  history: [
    { line: 1, action: 'declare-variable', details: [Object] },
    { line: 2, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'declare-variable', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 6, action: 'swap', details: [Object] },
    { line: 7, action: 'swap', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 6, action: 'swap', details: [Object] },
    { line: 7, action: 'swap', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 9, action: 'loop-end', details: null },
    { line: 2, action: 'loop-update', details: [Object] },
    { line: 3, action: 'declare-variable', details: [Object] }
  ],
  functions: { swap: [Function (anonymous)] }
}
Evaluating expression of type: BinaryExpression
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Evaluating expression of type: MemberExpression
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: Literal
Evaluating BinaryExpression: Identifier + Literal
Values: 0 + 1
Evaluating BinaryExpression: MemberExpression > MemberExpression
Values: 1 > 6
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Declared variable temp with value: 1
Evaluating expression of type: UpdateExpression
Updating loop variable j to  1
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: BinaryExpression
Evaluating expression of type: BinaryExpression
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Evaluating expression of type: Identifier
Evaluating BinaryExpression: MemberExpression - Identifier
Values: 4 - 1
Evaluating expression of type: Literal
Evaluating BinaryExpression: BinaryExpression - Literal
Values: 3 - 1
Evaluating BinaryExpression: Identifier < BinaryExpression
Values: 1 < 2
For loop test condition result: true
Loop test condition is true, entering loop body with context: {
  variables: { array: [ 1, 6, 5, 7 ], i: 1, j: 1, temp: 1 },
  history: [
    { line: 1, action: 'declare-variable', details: [Object] },
    { line: 2, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'declare-variable', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 6, action: 'swap', details: [Object] },
    { line: 7, action: 'swap', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 6, action: 'swap', details: [Object] },
    { line: 7, action: 'swap', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 9, action: 'loop-end', details: null },
    { line: 2, action: 'loop-update', details: [Object] },
    { line: 3, action: 'declare-variable', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] }
  ],
  functions: { swap: [Function (anonymous)] }
}
Evaluating expression of type: BinaryExpression
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Evaluating expression of type: MemberExpression
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: Literal
Evaluating BinaryExpression: Identifier + Literal
Values: 1 + 1
Evaluating BinaryExpression: MemberExpression > MemberExpression
Values: 6 > 5
Evaluating expression of type: Identifier
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: Literal
Evaluating BinaryExpression: Identifier + Literal
Values: 1 + 1
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Declared variable temp with value: 5
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Declared variable temp with value: 5
Evaluating expression of type: UpdateExpression
Updating loop variable j to  2
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: BinaryExpression
Evaluating expression of type: BinaryExpression
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Evaluating expression of type: Identifier
Evaluating BinaryExpression: MemberExpression - Identifier
Values: 4 - 1
Evaluating expression of type: Literal
Evaluating BinaryExpression: BinaryExpression - Literal
Values: 3 - 1
Evaluating BinaryExpression: Identifier < BinaryExpression
Values: 2 < 2
For loop test condition result: false
Loop test condition is false, exiting loop
Evaluating expression of type: UpdateExpression
Updating loop variable i to  2
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Evaluating BinaryExpression: Identifier < MemberExpression
Values: 2 < 4
For loop test condition result: true
Loop test condition is true, entering loop body with context: {
  variables: { array: [ 1, 5, 6, 7 ], i: 2, j: 2, temp: 5 },
  history: [
    { line: 1, action: 'declare-variable', details: [Object] },
    { line: 2, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'declare-variable', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 6, action: 'swap', details: [Object] },
    { line: 7, action: 'swap', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 6, action: 'swap', details: [Object] },
    { line: 7, action: 'swap', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 9, action: 'loop-end', details: null },
    { line: 2, action: 'loop-update', details: [Object] },
    { line: 3, action: 'declare-variable', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 6, action: 'swap', details: [Object] },
    { line: 7, action: 'swap', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 9, action: 'loop-end', details: null },
    { line: 2, action: 'loop-update', details: [Object] }
  ],
  functions: { swap: [Function (anonymous)] }
}
Entering handleForStatement with node: ForStatement {
  type: 'ForStatement',
  init: VariableDeclaration {
    type: 'VariableDeclaration',
    declarations: [ [VariableDeclarator] ],
    kind: 'var',
    loc: { start: [Object], end: [Object] }
  },
  test: BinaryExpression {
    type: 'BinaryExpression',
    operator: '<',
    left: Identifier { type: 'Identifier', name: 'j', loc: [Object] },
    right: BinaryExpression {
      type: 'BinaryExpression',
      operator: '-',
      left: [BinaryExpression],
      right: [Literal],
      loc: [Object]
    },
    loc: { start: [Object], end: [Object] }
  },
  update: UpdateExpression {
    type: 'UpdateExpression',
    operator: '++',
    argument: Identifier { type: 'Identifier', name: 'j', loc: [Object] },
    prefix: false,
    loc: { start: [Object], end: [Object] }
  },
  body: BlockStatement {
    type: 'BlockStatement',
    body: [ [IfStatement] ],
    loc: { start: [Object], end: [Object] }
  },
  loc: { start: { line: 3, column: 4 }, end: { line: 9, column: 5 } }
}
Evaluating expression of type: Literal
Declared variable j with value: 0
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: BinaryExpression
Evaluating expression of type: BinaryExpression
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Evaluating expression of type: Identifier
Evaluating BinaryExpression: MemberExpression - Identifier
Values: 4 - 2
Evaluating expression of type: Literal
Evaluating BinaryExpression: BinaryExpression - Literal
Values: 2 - 1
Evaluating BinaryExpression: Identifier < BinaryExpression
Values: 0 < 1
For loop test condition result: true
Loop test condition is true, entering loop body with context: {
  variables: { array: [ 1, 5, 6, 7 ], i: 2, j: 0, temp: 5 },
  history: [
    { line: 1, action: 'declare-variable', details: [Object] },
    { line: 2, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'declare-variable', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 6, action: 'swap', details: [Object] },
    { line: 7, action: 'swap', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 6, action: 'swap', details: [Object] },
    { line: 7, action: 'swap', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 9, action: 'loop-end', details: null },
    { line: 2, action: 'loop-update', details: [Object] },
    { line: 3, action: 'declare-variable', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 6, action: 'swap', details: [Object] },
    { line: 7, action: 'swap', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 9, action: 'loop-end', details: null },
    { line: 2, action: 'loop-update', details: [Object] },
    { line: 3, action: 'declare-variable', details: [Object] }
  ],
  functions: { swap: [Function (anonymous)] }
}
Evaluating expression of type: BinaryExpression
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Evaluating expression of type: MemberExpression
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: Literal
Evaluating BinaryExpression: Identifier + Literal
Values: 0 + 1
Evaluating BinaryExpression: MemberExpression > MemberExpression
Values: 1 > 5
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Declared variable temp with value: 1
Evaluating expression of type: UpdateExpression
Updating loop variable j to  1
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: BinaryExpression
Evaluating expression of type: BinaryExpression
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Evaluating expression of type: Identifier
Evaluating BinaryExpression: MemberExpression - Identifier
Values: 4 - 2
Evaluating expression of type: Literal
Evaluating BinaryExpression: BinaryExpression - Literal
Values: 2 - 1
Evaluating BinaryExpression: Identifier < BinaryExpression
Values: 1 < 1
For loop test condition result: false
Loop test condition is false, exiting loop
Evaluating expression of type: UpdateExpression
Updating loop variable i to  3
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Evaluating BinaryExpression: Identifier < MemberExpression
Values: 3 < 4
For loop test condition result: true
Loop test condition is true, entering loop body with context: {
  variables: { array: [ 1, 5, 6, 7 ], i: 3, j: 1, temp: 1 },
  history: [
    { line: 1, action: 'declare-variable', details: [Object] },
    { line: 2, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'declare-variable', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 6, action: 'swap', details: [Object] },
    { line: 7, action: 'swap', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 6, action: 'swap', details: [Object] },
    { line: 7, action: 'swap', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 9, action: 'loop-end', details: null },
    { line: 2, action: 'loop-update', details: [Object] },
    { line: 3, action: 'declare-variable', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 6, action: 'swap', details: [Object] },
    { line: 7, action: 'swap', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 9, action: 'loop-end', details: null },
    { line: 2, action: 'loop-update', details: [Object] },
    { line: 3, action: 'declare-variable', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 9, action: 'loop-end', details: null },
    { line: 2, action: 'loop-update', details: [Object] }
  ],
  functions: { swap: [Function (anonymous)] }
}
Entering handleForStatement with node: ForStatement {
  type: 'ForStatement',
  init: VariableDeclaration {
    type: 'VariableDeclaration',
    declarations: [ [VariableDeclarator] ],
    kind: 'var',
    loc: { start: [Object], end: [Object] }
  },
  test: BinaryExpression {
    type: 'BinaryExpression',
    operator: '<',
    left: Identifier { type: 'Identifier', name: 'j', loc: [Object] },
    right: BinaryExpression {
      type: 'BinaryExpression',
      operator: '-',
      left: [BinaryExpression],
      right: [Literal],
      loc: [Object]
    },
    loc: { start: [Object], end: [Object] }
  },
  update: UpdateExpression {
    type: 'UpdateExpression',
    operator: '++',
    argument: Identifier { type: 'Identifier', name: 'j', loc: [Object] },
    prefix: false,
    loc: { start: [Object], end: [Object] }
  },
  body: BlockStatement {
    type: 'BlockStatement',
    body: [ [IfStatement] ],
    loc: { start: [Object], end: [Object] }
  },
  loc: { start: { line: 3, column: 4 }, end: { line: 9, column: 5 } }
}
Evaluating expression of type: Literal
Declared variable j with value: 0
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: BinaryExpression
Evaluating expression of type: BinaryExpression
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Evaluating expression of type: Identifier
Evaluating BinaryExpression: MemberExpression - Identifier
Values: 4 - 3
Evaluating expression of type: Literal
Evaluating BinaryExpression: BinaryExpression - Literal
Values: 1 - 1
Evaluating BinaryExpression: Identifier < BinaryExpression
Values: 0 < 0
For loop test condition result: false
Loop test condition is false, exiting loop
Evaluating expression of type: UpdateExpression
Updating loop variable i to  4
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Evaluating BinaryExpression: Identifier < MemberExpression
Values: 4 < 4
For loop test condition result: false
Loop test condition is false, exiting loop
Evaluating expression of type: ArrayExpression
Evaluating expression of type: Literal
Evaluating expression of type: Literal
Evaluating expression of type: Literal
Evaluating expression of type: Literal
Declared variable array with value: [ 6, 1, 7, 5 ]
Entering handleForStatement with node: ForStatement {
  type: 'ForStatement',
  init: VariableDeclaration {
    type: 'VariableDeclaration',
    declarations: [ [VariableDeclarator] ],
    kind: 'var',
    loc: { start: [Object], end: [Object] }
  },
  test: BinaryExpression {
    type: 'BinaryExpression',
    operator: '<',
    left: Identifier { type: 'Identifier', name: 'i', loc: [Object] },
    right: StaticMemberExpression {
      type: 'MemberExpression',
      computed: false,
      object: [Identifier],
      property: [Identifier],
      loc: [Object]
    },
    loc: { start: [Object], end: [Object] }
  },
  update: UpdateExpression {
    type: 'UpdateExpression',
    operator: '++',
    argument: Identifier { type: 'Identifier', name: 'i', loc: [Object] },
    prefix: false,
    loc: { start: [Object], end: [Object] }
  },
  body: BlockStatement {
    type: 'BlockStatement',
    body: [ [ForStatement] ],
    loc: { start: [Object], end: [Object] }
  },
  loc: { start: { line: 2, column: 1 }, end: { line: 10, column: 2 } }
}
Evaluating expression of type: Literal
Declared variable i with value: 0
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Evaluating BinaryExpression: Identifier < MemberExpression
Values: 0 < 4
For loop test condition result: true
Loop test condition is true, entering loop body with context: {
  variables: { array: [ 6, 1, 7, 5 ], i: 0 },
  history: [
    { line: 1, action: 'declare-variable', details: [Object] },
    { line: 2, action: 'declare-variable', details: [Object] }
  ],
  functions: { swap: [Function (anonymous)] }
}
Entering handleForStatement with node: ForStatement {
  type: 'ForStatement',
  init: VariableDeclaration {
    type: 'VariableDeclaration',
    declarations: [ [VariableDeclarator] ],
    kind: 'var',
    loc: { start: [Object], end: [Object] }
  },
  test: BinaryExpression {
    type: 'BinaryExpression',
    operator: '<',
    left: Identifier { type: 'Identifier', name: 'j', loc: [Object] },
    right: BinaryExpression {
      type: 'BinaryExpression',
      operator: '-',
      left: [BinaryExpression],
      right: [Literal],
      loc: [Object]
    },
    loc: { start: [Object], end: [Object] }
  },
  update: UpdateExpression {
    type: 'UpdateExpression',
    operator: '++',
    argument: Identifier { type: 'Identifier', name: 'j', loc: [Object] },
    prefix: false,
    loc: { start: [Object], end: [Object] }
  },
  body: BlockStatement {
    type: 'BlockStatement',
    body: [ [IfStatement] ],
    loc: { start: [Object], end: [Object] }
  },
  loc: { start: { line: 3, column: 1 }, end: { line: 9, column: 2 } }
}
Evaluating expression of type: Literal
Declared variable j with value: 0
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: BinaryExpression
Evaluating expression of type: BinaryExpression
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Evaluating expression of type: Identifier
Evaluating BinaryExpression: MemberExpression - Identifier
Values: 4 - 0
Evaluating expression of type: Literal
Evaluating BinaryExpression: BinaryExpression - Literal
Values: 4 - 1
Evaluating BinaryExpression: Identifier < BinaryExpression
Values: 0 < 3
For loop test condition result: true
Loop test condition is true, entering loop body with context: {
  variables: { array: [ 6, 1, 7, 5 ], i: 0, j: 0 },
  history: [
    { line: 1, action: 'declare-variable', details: [Object] },
    { line: 2, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'declare-variable', details: [Object] }
  ],
  functions: { swap: [Function (anonymous)] }
}
Evaluating expression of type: BinaryExpression
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Evaluating expression of type: MemberExpression
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: Literal
Evaluating BinaryExpression: Identifier + Literal
Values: 0 + 1
Evaluating BinaryExpression: MemberExpression > MemberExpression
Values: 6 > 1
Evaluating expression of type: Identifier
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: Literal
Evaluating BinaryExpression: Identifier + Literal
Values: 0 + 1
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Declared variable temp with value: 1
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Declared variable temp with value: 1
Evaluating expression of type: UpdateExpression
Updating loop variable j to  1
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: BinaryExpression
Evaluating expression of type: BinaryExpression
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Evaluating expression of type: Identifier
Evaluating BinaryExpression: MemberExpression - Identifier
Values: 4 - 0
Evaluating expression of type: Literal
Evaluating BinaryExpression: BinaryExpression - Literal
Values: 4 - 1
Evaluating BinaryExpression: Identifier < BinaryExpression
Values: 1 < 3
For loop test condition result: true
Loop test condition is true, entering loop body with context: {
  variables: { array: [ 1, 6, 7, 5 ], i: 0, j: 1, temp: 1 },
  history: [
    { line: 1, action: 'declare-variable', details: [Object] },
    { line: 2, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'declare-variable', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 6, action: 'swap', details: [Object] },
    { line: 7, action: 'swap', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] }
  ],
  functions: { swap: [Function (anonymous)] }
}
Evaluating expression of type: BinaryExpression
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Evaluating expression of type: MemberExpression
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: Literal
Evaluating BinaryExpression: Identifier + Literal
Values: 1 + 1
Evaluating BinaryExpression: MemberExpression > MemberExpression
Values: 6 > 7
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Declared variable temp with value: 6
Evaluating expression of type: UpdateExpression
Updating loop variable j to  2
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: BinaryExpression
Evaluating expression of type: BinaryExpression
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Evaluating expression of type: Identifier
Evaluating BinaryExpression: MemberExpression - Identifier
Values: 4 - 0
Evaluating expression of type: Literal
Evaluating BinaryExpression: BinaryExpression - Literal
Values: 4 - 1
Evaluating BinaryExpression: Identifier < BinaryExpression
Values: 2 < 3
For loop test condition result: true
Loop test condition is true, entering loop body with context: {
  variables: { array: [ 1, 6, 7, 5 ], i: 0, j: 2, temp: 6 },
  history: [
    { line: 1, action: 'declare-variable', details: [Object] },
    { line: 2, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'declare-variable', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 6, action: 'swap', details: [Object] },
    { line: 7, action: 'swap', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] }
  ],
  functions: { swap: [Function (anonymous)] }
}
Evaluating expression of type: BinaryExpression
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Evaluating expression of type: MemberExpression
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: Literal
Evaluating BinaryExpression: Identifier + Literal
Values: 2 + 1
Evaluating BinaryExpression: MemberExpression > MemberExpression
Values: 7 > 5
Evaluating expression of type: Identifier
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: Literal
Evaluating BinaryExpression: Identifier + Literal
Values: 2 + 1
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Declared variable temp with value: 5
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Declared variable temp with value: 5
Evaluating expression of type: UpdateExpression
Updating loop variable j to  3
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: BinaryExpression
Evaluating expression of type: BinaryExpression
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Evaluating expression of type: Identifier
Evaluating BinaryExpression: MemberExpression - Identifier
Values: 4 - 0
Evaluating expression of type: Literal
Evaluating BinaryExpression: BinaryExpression - Literal
Values: 4 - 1
Evaluating BinaryExpression: Identifier < BinaryExpression
Values: 3 < 3
For loop test condition result: false
Loop test condition is false, exiting loop
Evaluating expression of type: UpdateExpression
Updating loop variable i to  1
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Evaluating BinaryExpression: Identifier < MemberExpression
Values: 1 < 4
For loop test condition result: true
Loop test condition is true, entering loop body with context: {
  variables: { array: [ 1, 6, 5, 7 ], i: 1, j: 3, temp: 5 },
  history: [
    { line: 1, action: 'declare-variable', details: [Object] },
    { line: 2, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'declare-variable', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 6, action: 'swap', details: [Object] },
    { line: 7, action: 'swap', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 6, action: 'swap', details: [Object] },
    { line: 7, action: 'swap', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 9, action: 'loop-end', details: null },
    { line: 2, action: 'loop-update', details: [Object] }
  ],
  functions: { swap: [Function (anonymous)] }
}
Entering handleForStatement with node: ForStatement {
  type: 'ForStatement',
  init: VariableDeclaration {
    type: 'VariableDeclaration',
    declarations: [ [VariableDeclarator] ],
    kind: 'var',
    loc: { start: [Object], end: [Object] }
  },
  test: BinaryExpression {
    type: 'BinaryExpression',
    operator: '<',
    left: Identifier { type: 'Identifier', name: 'j', loc: [Object] },
    right: BinaryExpression {
      type: 'BinaryExpression',
      operator: '-',
      left: [BinaryExpression],
      right: [Literal],
      loc: [Object]
    },
    loc: { start: [Object], end: [Object] }
  },
  update: UpdateExpression {
    type: 'UpdateExpression',
    operator: '++',
    argument: Identifier { type: 'Identifier', name: 'j', loc: [Object] },
    prefix: false,
    loc: { start: [Object], end: [Object] }
  },
  body: BlockStatement {
    type: 'BlockStatement',
    body: [ [IfStatement] ],
    loc: { start: [Object], end: [Object] }
  },
  loc: { start: { line: 3, column: 1 }, end: { line: 9, column: 2 } }
}
Evaluating expression of type: Literal
Declared variable j with value: 0
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: BinaryExpression
Evaluating expression of type: BinaryExpression
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Evaluating expression of type: Identifier
Evaluating BinaryExpression: MemberExpression - Identifier
Values: 4 - 1
Evaluating expression of type: Literal
Evaluating BinaryExpression: BinaryExpression - Literal
Values: 3 - 1
Evaluating BinaryExpression: Identifier < BinaryExpression
Values: 0 < 2
For loop test condition result: true
Loop test condition is true, entering loop body with context: {
  variables: { array: [ 1, 6, 5, 7 ], i: 1, j: 0, temp: 5 },
  history: [
    { line: 1, action: 'declare-variable', details: [Object] },
    { line: 2, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'declare-variable', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 6, action: 'swap', details: [Object] },
    { line: 7, action: 'swap', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 6, action: 'swap', details: [Object] },
    { line: 7, action: 'swap', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 9, action: 'loop-end', details: null },
    { line: 2, action: 'loop-update', details: [Object] },
    { line: 3, action: 'declare-variable', details: [Object] }
  ],
  functions: { swap: [Function (anonymous)] }
}
Evaluating expression of type: BinaryExpression
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Evaluating expression of type: MemberExpression
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: Literal
Evaluating BinaryExpression: Identifier + Literal
Values: 0 + 1
Evaluating BinaryExpression: MemberExpression > MemberExpression
Values: 1 > 6
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Declared variable temp with value: 1
Evaluating expression of type: UpdateExpression
Updating loop variable j to  1
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: BinaryExpression
Evaluating expression of type: BinaryExpression
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Evaluating expression of type: Identifier
Evaluating BinaryExpression: MemberExpression - Identifier
Values: 4 - 1
Evaluating expression of type: Literal
Evaluating BinaryExpression: BinaryExpression - Literal
Values: 3 - 1
Evaluating BinaryExpression: Identifier < BinaryExpression
Values: 1 < 2
For loop test condition result: true
Loop test condition is true, entering loop body with context: {
  variables: { array: [ 1, 6, 5, 7 ], i: 1, j: 1, temp: 1 },
  history: [
    { line: 1, action: 'declare-variable', details: [Object] },
    { line: 2, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'declare-variable', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 6, action: 'swap', details: [Object] },
    { line: 7, action: 'swap', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 6, action: 'swap', details: [Object] },
    { line: 7, action: 'swap', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 9, action: 'loop-end', details: null },
    { line: 2, action: 'loop-update', details: [Object] },
    { line: 3, action: 'declare-variable', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] }
  ],
  functions: { swap: [Function (anonymous)] }
}
Evaluating expression of type: BinaryExpression
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Evaluating expression of type: MemberExpression
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: Literal
Evaluating BinaryExpression: Identifier + Literal
Values: 1 + 1
Evaluating BinaryExpression: MemberExpression > MemberExpression
Values: 6 > 5
Evaluating expression of type: Identifier
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: Literal
Evaluating BinaryExpression: Identifier + Literal
Values: 1 + 1
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Declared variable temp with value: 5
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Declared variable temp with value: 5
Evaluating expression of type: UpdateExpression
Updating loop variable j to  2
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: BinaryExpression
Evaluating expression of type: BinaryExpression
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Evaluating expression of type: Identifier
Evaluating BinaryExpression: MemberExpression - Identifier
Values: 4 - 1
Evaluating expression of type: Literal
Evaluating BinaryExpression: BinaryExpression - Literal
Values: 3 - 1
Evaluating BinaryExpression: Identifier < BinaryExpression
Values: 2 < 2
For loop test condition result: false
Loop test condition is false, exiting loop
Evaluating expression of type: UpdateExpression
Updating loop variable i to  2
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Evaluating BinaryExpression: Identifier < MemberExpression
Values: 2 < 4
For loop test condition result: true
Loop test condition is true, entering loop body with context: {
  variables: { array: [ 1, 5, 6, 7 ], i: 2, j: 2, temp: 5 },
  history: [
    { line: 1, action: 'declare-variable', details: [Object] },
    { line: 2, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'declare-variable', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 6, action: 'swap', details: [Object] },
    { line: 7, action: 'swap', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 6, action: 'swap', details: [Object] },
    { line: 7, action: 'swap', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 9, action: 'loop-end', details: null },
    { line: 2, action: 'loop-update', details: [Object] },
    { line: 3, action: 'declare-variable', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 6, action: 'swap', details: [Object] },
    { line: 7, action: 'swap', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 9, action: 'loop-end', details: null },
    { line: 2, action: 'loop-update', details: [Object] }
  ],
  functions: { swap: [Function (anonymous)] }
}
Entering handleForStatement with node: ForStatement {
  type: 'ForStatement',
  init: VariableDeclaration {
    type: 'VariableDeclaration',
    declarations: [ [VariableDeclarator] ],
    kind: 'var',
    loc: { start: [Object], end: [Object] }
  },
  test: BinaryExpression {
    type: 'BinaryExpression',
    operator: '<',
    left: Identifier { type: 'Identifier', name: 'j', loc: [Object] },
    right: BinaryExpression {
      type: 'BinaryExpression',
      operator: '-',
      left: [BinaryExpression],
      right: [Literal],
      loc: [Object]
    },
    loc: { start: [Object], end: [Object] }
  },
  update: UpdateExpression {
    type: 'UpdateExpression',
    operator: '++',
    argument: Identifier { type: 'Identifier', name: 'j', loc: [Object] },
    prefix: false,
    loc: { start: [Object], end: [Object] }
  },
  body: BlockStatement {
    type: 'BlockStatement',
    body: [ [IfStatement] ],
    loc: { start: [Object], end: [Object] }
  },
  loc: { start: { line: 3, column: 1 }, end: { line: 9, column: 2 } }
}
Evaluating expression of type: Literal
Declared variable j with value: 0
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: BinaryExpression
Evaluating expression of type: BinaryExpression
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Evaluating expression of type: Identifier
Evaluating BinaryExpression: MemberExpression - Identifier
Values: 4 - 2
Evaluating expression of type: Literal
Evaluating BinaryExpression: BinaryExpression - Literal
Values: 2 - 1
Evaluating BinaryExpression: Identifier < BinaryExpression
Values: 0 < 1
For loop test condition result: true
Loop test condition is true, entering loop body with context: {
  variables: { array: [ 1, 5, 6, 7 ], i: 2, j: 0, temp: 5 },
  history: [
    { line: 1, action: 'declare-variable', details: [Object] },
    { line: 2, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'declare-variable', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 6, action: 'swap', details: [Object] },
    { line: 7, action: 'swap', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 6, action: 'swap', details: [Object] },
    { line: 7, action: 'swap', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 9, action: 'loop-end', details: null },
    { line: 2, action: 'loop-update', details: [Object] },
    { line: 3, action: 'declare-variable', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 6, action: 'swap', details: [Object] },
    { line: 7, action: 'swap', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 9, action: 'loop-end', details: null },
    { line: 2, action: 'loop-update', details: [Object] },
    { line: 3, action: 'declare-variable', details: [Object] }
  ],
  functions: { swap: [Function (anonymous)] }
}
Evaluating expression of type: BinaryExpression
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Evaluating expression of type: MemberExpression
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: Literal
Evaluating BinaryExpression: Identifier + Literal
Values: 0 + 1
Evaluating BinaryExpression: MemberExpression > MemberExpression
Values: 1 > 5
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Declared variable temp with value: 1
Evaluating expression of type: UpdateExpression
Updating loop variable j to  1
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: BinaryExpression
Evaluating expression of type: BinaryExpression
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Evaluating expression of type: Identifier
Evaluating BinaryExpression: MemberExpression - Identifier
Values: 4 - 2
Evaluating expression of type: Literal
Evaluating BinaryExpression: BinaryExpression - Literal
Values: 2 - 1
Evaluating BinaryExpression: Identifier < BinaryExpression
Values: 1 < 1
For loop test condition result: false
Loop test condition is false, exiting loop
Evaluating expression of type: UpdateExpression
Updating loop variable i to  3
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Evaluating BinaryExpression: Identifier < MemberExpression
Values: 3 < 4
For loop test condition result: true
Loop test condition is true, entering loop body with context: {
  variables: { array: [ 1, 5, 6, 7 ], i: 3, j: 1, temp: 1 },
  history: [
    { line: 1, action: 'declare-variable', details: [Object] },
    { line: 2, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'declare-variable', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 6, action: 'swap', details: [Object] },
    { line: 7, action: 'swap', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 6, action: 'swap', details: [Object] },
    { line: 7, action: 'swap', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 9, action: 'loop-end', details: null },
    { line: 2, action: 'loop-update', details: [Object] },
    { line: 3, action: 'declare-variable', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 6, action: 'swap', details: [Object] },
    { line: 7, action: 'swap', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 9, action: 'loop-end', details: null },
    { line: 2, action: 'loop-update', details: [Object] },
    { line: 3, action: 'declare-variable', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 9, action: 'loop-end', details: null },
    { line: 2, action: 'loop-update', details: [Object] }
  ],
  functions: { swap: [Function (anonymous)] }
}
Entering handleForStatement with node: ForStatement {
  type: 'ForStatement',
  init: VariableDeclaration {
    type: 'VariableDeclaration',
    declarations: [ [VariableDeclarator] ],
    kind: 'var',
    loc: { start: [Object], end: [Object] }
  },
  test: BinaryExpression {
    type: 'BinaryExpression',
    operator: '<',
    left: Identifier { type: 'Identifier', name: 'j', loc: [Object] },
    right: BinaryExpression {
      type: 'BinaryExpression',
      operator: '-',
      left: [BinaryExpression],
      right: [Literal],
      loc: [Object]
    },
    loc: { start: [Object], end: [Object] }
  },
  update: UpdateExpression {
    type: 'UpdateExpression',
    operator: '++',
    argument: Identifier { type: 'Identifier', name: 'j', loc: [Object] },
    prefix: false,
    loc: { start: [Object], end: [Object] }
  },
  body: BlockStatement {
    type: 'BlockStatement',
    body: [ [IfStatement] ],
    loc: { start: [Object], end: [Object] }
  },
  loc: { start: { line: 3, column: 1 }, end: { line: 9, column: 2 } }
}
Evaluating expression of type: Literal
Declared variable j with value: 0
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: BinaryExpression
Evaluating expression of type: BinaryExpression
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Evaluating expression of type: Identifier
Evaluating BinaryExpression: MemberExpression - Identifier
Values: 4 - 3
Evaluating expression of type: Literal
Evaluating BinaryExpression: BinaryExpression - Literal
Values: 1 - 1
Evaluating BinaryExpression: Identifier < BinaryExpression
Values: 0 < 0
For loop test condition result: false
Loop test condition is false, exiting loop
Evaluating expression of type: UpdateExpression
Updating loop variable i to  4
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Evaluating BinaryExpression: Identifier < MemberExpression
Values: 4 < 4
For loop test condition result: false
Loop test condition is false, exiting loop
Evaluating expression of type: ArrayExpression
Evaluating expression of type: Literal
Evaluating expression of type: Literal
Evaluating expression of type: Literal
Evaluating expression of type: Literal
Declared variable array with value: [ 6, 1, 7, 5 ]
Entering handleForStatement with node: ForStatement {
  type: 'ForStatement',
  init: VariableDeclaration {
    type: 'VariableDeclaration',
    declarations: [ [VariableDeclarator] ],
    kind: 'var',
    loc: { start: [Object], end: [Object] }
  },
  test: BinaryExpression {
    type: 'BinaryExpression',
    operator: '<',
    left: Identifier { type: 'Identifier', name: 'i', loc: [Object] },
    right: StaticMemberExpression {
      type: 'MemberExpression',
      computed: false,
      object: [Identifier],
      property: [Identifier],
      loc: [Object]
    },
    loc: { start: [Object], end: [Object] }
  },
  update: UpdateExpression {
    type: 'UpdateExpression',
    operator: '++',
    argument: Identifier { type: 'Identifier', name: 'i', loc: [Object] },
    prefix: false,
    loc: { start: [Object], end: [Object] }
  },
  body: BlockStatement {
    type: 'BlockStatement',
    body: [ [ForStatement] ],
    loc: { start: [Object], end: [Object] }
  },
  loc: { start: { line: 2, column: 0 }, end: { line: 10, column: 1 } }
}
Evaluating expression of type: Literal
Declared variable i with value: 0
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Evaluating BinaryExpression: Identifier < MemberExpression
Values: 0 < 4
For loop test condition result: true
Loop test condition is true, entering loop body with context: {
  variables: { array: [ 6, 1, 7, 5 ], i: 0 },
  history: [
    { line: 1, action: 'declare-variable', details: [Object] },
    { line: 2, action: 'declare-variable', details: [Object] }
  ],
  functions: { swap: [Function (anonymous)] }
}
Entering handleForStatement with node: ForStatement {
  type: 'ForStatement',
  init: VariableDeclaration {
    type: 'VariableDeclaration',
    declarations: [ [VariableDeclarator] ],
    kind: 'var',
    loc: { start: [Object], end: [Object] }
  },
  test: BinaryExpression {
    type: 'BinaryExpression',
    operator: '<',
    left: Identifier { type: 'Identifier', name: 'j', loc: [Object] },
    right: BinaryExpression {
      type: 'BinaryExpression',
      operator: '-',
      left: [BinaryExpression],
      right: [Literal],
      loc: [Object]
    },
    loc: { start: [Object], end: [Object] }
  },
  update: UpdateExpression {
    type: 'UpdateExpression',
    operator: '++',
    argument: Identifier { type: 'Identifier', name: 'j', loc: [Object] },
    prefix: false,
    loc: { start: [Object], end: [Object] }
  },
  body: BlockStatement {
    type: 'BlockStatement',
    body: [ [IfStatement] ],
    loc: { start: [Object], end: [Object] }
  },
  loc: { start: { line: 3, column: 4 }, end: { line: 9, column: 5 } }
}
Evaluating expression of type: Literal
Declared variable j with value: 0
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: BinaryExpression
Evaluating expression of type: BinaryExpression
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Evaluating expression of type: Identifier
Evaluating BinaryExpression: MemberExpression - Identifier
Values: 4 - 0
Evaluating expression of type: Literal
Evaluating BinaryExpression: BinaryExpression - Literal
Values: 4 - 1
Evaluating BinaryExpression: Identifier < BinaryExpression
Values: 0 < 3
For loop test condition result: true
Loop test condition is true, entering loop body with context: {
  variables: { array: [ 6, 1, 7, 5 ], i: 0, j: 0 },
  history: [
    { line: 1, action: 'declare-variable', details: [Object] },
    { line: 2, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'declare-variable', details: [Object] }
  ],
  functions: { swap: [Function (anonymous)] }
}
Evaluating expression of type: BinaryExpression
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Evaluating expression of type: MemberExpression
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: Literal
Evaluating BinaryExpression: Identifier + Literal
Values: 0 + 1
Evaluating BinaryExpression: MemberExpression > MemberExpression
Values: 6 > 1
Evaluating expression of type: Identifier
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: Literal
Evaluating BinaryExpression: Identifier + Literal
Values: 0 + 1
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Declared variable temp with value: 1
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Declared variable temp with value: 1
Evaluating expression of type: UpdateExpression
Updating loop variable j to  1
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: BinaryExpression
Evaluating expression of type: BinaryExpression
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Evaluating expression of type: Identifier
Evaluating BinaryExpression: MemberExpression - Identifier
Values: 4 - 0
Evaluating expression of type: Literal
Evaluating BinaryExpression: BinaryExpression - Literal
Values: 4 - 1
Evaluating BinaryExpression: Identifier < BinaryExpression
Values: 1 < 3
For loop test condition result: true
Loop test condition is true, entering loop body with context: {
  variables: { array: [ 1, 6, 7, 5 ], i: 0, j: 1, temp: 1 },
  history: [
    { line: 1, action: 'declare-variable', details: [Object] },
    { line: 2, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'declare-variable', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 6, action: 'swap', details: [Object] },
    { line: 7, action: 'swap', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] }
  ],
  functions: { swap: [Function (anonymous)] }
}
Evaluating expression of type: BinaryExpression
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Evaluating expression of type: MemberExpression
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: Literal
Evaluating BinaryExpression: Identifier + Literal
Values: 1 + 1
Evaluating BinaryExpression: MemberExpression > MemberExpression
Values: 6 > 7
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Declared variable temp with value: 6
Evaluating expression of type: UpdateExpression
Updating loop variable j to  2
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: BinaryExpression
Evaluating expression of type: BinaryExpression
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Evaluating expression of type: Identifier
Evaluating BinaryExpression: MemberExpression - Identifier
Values: 4 - 0
Evaluating expression of type: Literal
Evaluating BinaryExpression: BinaryExpression - Literal
Values: 4 - 1
Evaluating BinaryExpression: Identifier < BinaryExpression
Values: 2 < 3
For loop test condition result: true
Loop test condition is true, entering loop body with context: {
  variables: { array: [ 1, 6, 7, 5 ], i: 0, j: 2, temp: 6 },
  history: [
    { line: 1, action: 'declare-variable', details: [Object] },
    { line: 2, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'declare-variable', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 6, action: 'swap', details: [Object] },
    { line: 7, action: 'swap', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] }
  ],
  functions: { swap: [Function (anonymous)] }
}
Evaluating expression of type: BinaryExpression
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Evaluating expression of type: MemberExpression
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: Literal
Evaluating BinaryExpression: Identifier + Literal
Values: 2 + 1
Evaluating BinaryExpression: MemberExpression > MemberExpression
Values: 7 > 5
Evaluating expression of type: Identifier
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: Literal
Evaluating BinaryExpression: Identifier + Literal
Values: 2 + 1
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Declared variable temp with value: 5
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Declared variable temp with value: 5
Evaluating expression of type: UpdateExpression
Updating loop variable j to  3
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: BinaryExpression
Evaluating expression of type: BinaryExpression
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Evaluating expression of type: Identifier
Evaluating BinaryExpression: MemberExpression - Identifier
Values: 4 - 0
Evaluating expression of type: Literal
Evaluating BinaryExpression: BinaryExpression - Literal
Values: 4 - 1
Evaluating BinaryExpression: Identifier < BinaryExpression
Values: 3 < 3
For loop test condition result: false
Loop test condition is false, exiting loop
Evaluating expression of type: UpdateExpression
Updating loop variable i to  1
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Evaluating BinaryExpression: Identifier < MemberExpression
Values: 1 < 4
For loop test condition result: true
Loop test condition is true, entering loop body with context: {
  variables: { array: [ 1, 6, 5, 7 ], i: 1, j: 3, temp: 5 },
  history: [
    { line: 1, action: 'declare-variable', details: [Object] },
    { line: 2, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'declare-variable', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 6, action: 'swap', details: [Object] },
    { line: 7, action: 'swap', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 6, action: 'swap', details: [Object] },
    { line: 7, action: 'swap', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 9, action: 'loop-end', details: null },
    { line: 2, action: 'loop-update', details: [Object] }
  ],
  functions: { swap: [Function (anonymous)] }
}
Entering handleForStatement with node: ForStatement {
  type: 'ForStatement',
  init: VariableDeclaration {
    type: 'VariableDeclaration',
    declarations: [ [VariableDeclarator] ],
    kind: 'var',
    loc: { start: [Object], end: [Object] }
  },
  test: BinaryExpression {
    type: 'BinaryExpression',
    operator: '<',
    left: Identifier { type: 'Identifier', name: 'j', loc: [Object] },
    right: BinaryExpression {
      type: 'BinaryExpression',
      operator: '-',
      left: [BinaryExpression],
      right: [Literal],
      loc: [Object]
    },
    loc: { start: [Object], end: [Object] }
  },
  update: UpdateExpression {
    type: 'UpdateExpression',
    operator: '++',
    argument: Identifier { type: 'Identifier', name: 'j', loc: [Object] },
    prefix: false,
    loc: { start: [Object], end: [Object] }
  },
  body: BlockStatement {
    type: 'BlockStatement',
    body: [ [IfStatement] ],
    loc: { start: [Object], end: [Object] }
  },
  loc: { start: { line: 3, column: 4 }, end: { line: 9, column: 5 } }
}
Evaluating expression of type: Literal
Declared variable j with value: 0
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: BinaryExpression
Evaluating expression of type: BinaryExpression
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Evaluating expression of type: Identifier
Evaluating BinaryExpression: MemberExpression - Identifier
Values: 4 - 1
Evaluating expression of type: Literal
Evaluating BinaryExpression: BinaryExpression - Literal
Values: 3 - 1
Evaluating BinaryExpression: Identifier < BinaryExpression
Values: 0 < 2
For loop test condition result: true
Loop test condition is true, entering loop body with context: {
  variables: { array: [ 1, 6, 5, 7 ], i: 1, j: 0, temp: 5 },
  history: [
    { line: 1, action: 'declare-variable', details: [Object] },
    { line: 2, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'declare-variable', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 6, action: 'swap', details: [Object] },
    { line: 7, action: 'swap', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 6, action: 'swap', details: [Object] },
    { line: 7, action: 'swap', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 9, action: 'loop-end', details: null },
    { line: 2, action: 'loop-update', details: [Object] },
    { line: 3, action: 'declare-variable', details: [Object] }
  ],
  functions: { swap: [Function (anonymous)] }
}
Evaluating expression of type: BinaryExpression
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Evaluating expression of type: MemberExpression
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: Literal
Evaluating BinaryExpression: Identifier + Literal
Values: 0 + 1
Evaluating BinaryExpression: MemberExpression > MemberExpression
Values: 1 > 6
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Declared variable temp with value: 1
Evaluating expression of type: UpdateExpression
Updating loop variable j to  1
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: BinaryExpression
Evaluating expression of type: BinaryExpression
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Evaluating expression of type: Identifier
Evaluating BinaryExpression: MemberExpression - Identifier
Values: 4 - 1
Evaluating expression of type: Literal
Evaluating BinaryExpression: BinaryExpression - Literal
Values: 3 - 1
Evaluating BinaryExpression: Identifier < BinaryExpression
Values: 1 < 2
For loop test condition result: true
Loop test condition is true, entering loop body with context: {
  variables: { array: [ 1, 6, 5, 7 ], i: 1, j: 1, temp: 1 },
  history: [
    { line: 1, action: 'declare-variable', details: [Object] },
    { line: 2, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'declare-variable', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 6, action: 'swap', details: [Object] },
    { line: 7, action: 'swap', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 6, action: 'swap', details: [Object] },
    { line: 7, action: 'swap', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 9, action: 'loop-end', details: null },
    { line: 2, action: 'loop-update', details: [Object] },
    { line: 3, action: 'declare-variable', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] }
  ],
  functions: { swap: [Function (anonymous)] }
}
Evaluating expression of type: BinaryExpression
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Evaluating expression of type: MemberExpression
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: Literal
Evaluating BinaryExpression: Identifier + Literal
Values: 1 + 1
Evaluating BinaryExpression: MemberExpression > MemberExpression
Values: 6 > 5
Evaluating expression of type: Identifier
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: Literal
Evaluating BinaryExpression: Identifier + Literal
Values: 1 + 1
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Declared variable temp with value: 5
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Declared variable temp with value: 5
Evaluating expression of type: UpdateExpression
Updating loop variable j to  2
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: BinaryExpression
Evaluating expression of type: BinaryExpression
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Evaluating expression of type: Identifier
Evaluating BinaryExpression: MemberExpression - Identifier
Values: 4 - 1
Evaluating expression of type: Literal
Evaluating BinaryExpression: BinaryExpression - Literal
Values: 3 - 1
Evaluating BinaryExpression: Identifier < BinaryExpression
Values: 2 < 2
For loop test condition result: false
Loop test condition is false, exiting loop
Evaluating expression of type: UpdateExpression
Updating loop variable i to  2
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Evaluating BinaryExpression: Identifier < MemberExpression
Values: 2 < 4
For loop test condition result: true
Loop test condition is true, entering loop body with context: {
  variables: { array: [ 1, 5, 6, 7 ], i: 2, j: 2, temp: 5 },
  history: [
    { line: 1, action: 'declare-variable', details: [Object] },
    { line: 2, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'declare-variable', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 6, action: 'swap', details: [Object] },
    { line: 7, action: 'swap', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 6, action: 'swap', details: [Object] },
    { line: 7, action: 'swap', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 9, action: 'loop-end', details: null },
    { line: 2, action: 'loop-update', details: [Object] },
    { line: 3, action: 'declare-variable', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 6, action: 'swap', details: [Object] },
    { line: 7, action: 'swap', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 9, action: 'loop-end', details: null },
    { line: 2, action: 'loop-update', details: [Object] }
  ],
  functions: { swap: [Function (anonymous)] }
}
Entering handleForStatement with node: ForStatement {
  type: 'ForStatement',
  init: VariableDeclaration {
    type: 'VariableDeclaration',
    declarations: [ [VariableDeclarator] ],
    kind: 'var',
    loc: { start: [Object], end: [Object] }
  },
  test: BinaryExpression {
    type: 'BinaryExpression',
    operator: '<',
    left: Identifier { type: 'Identifier', name: 'j', loc: [Object] },
    right: BinaryExpression {
      type: 'BinaryExpression',
      operator: '-',
      left: [BinaryExpression],
      right: [Literal],
      loc: [Object]
    },
    loc: { start: [Object], end: [Object] }
  },
  update: UpdateExpression {
    type: 'UpdateExpression',
    operator: '++',
    argument: Identifier { type: 'Identifier', name: 'j', loc: [Object] },
    prefix: false,
    loc: { start: [Object], end: [Object] }
  },
  body: BlockStatement {
    type: 'BlockStatement',
    body: [ [IfStatement] ],
    loc: { start: [Object], end: [Object] }
  },
  loc: { start: { line: 3, column: 4 }, end: { line: 9, column: 5 } }
}
Evaluating expression of type: Literal
Declared variable j with value: 0
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: BinaryExpression
Evaluating expression of type: BinaryExpression
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Evaluating expression of type: Identifier
Evaluating BinaryExpression: MemberExpression - Identifier
Values: 4 - 2
Evaluating expression of type: Literal
Evaluating BinaryExpression: BinaryExpression - Literal
Values: 2 - 1
Evaluating BinaryExpression: Identifier < BinaryExpression
Values: 0 < 1
For loop test condition result: true
Loop test condition is true, entering loop body with context: {
  variables: { array: [ 1, 5, 6, 7 ], i: 2, j: 0, temp: 5 },
  history: [
    { line: 1, action: 'declare-variable', details: [Object] },
    { line: 2, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'declare-variable', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 6, action: 'swap', details: [Object] },
    { line: 7, action: 'swap', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 6, action: 'swap', details: [Object] },
    { line: 7, action: 'swap', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 9, action: 'loop-end', details: null },
    { line: 2, action: 'loop-update', details: [Object] },
    { line: 3, action: 'declare-variable', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 6, action: 'swap', details: [Object] },
    { line: 7, action: 'swap', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 9, action: 'loop-end', details: null },
    { line: 2, action: 'loop-update', details: [Object] },
    { line: 3, action: 'declare-variable', details: [Object] }
  ],
  functions: { swap: [Function (anonymous)] }
}
Evaluating expression of type: BinaryExpression
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Evaluating expression of type: MemberExpression
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: Literal
Evaluating BinaryExpression: Identifier + Literal
Values: 0 + 1
Evaluating BinaryExpression: MemberExpression > MemberExpression
Values: 1 > 5
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Declared variable temp with value: 1
Evaluating expression of type: UpdateExpression
Updating loop variable j to  1
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: BinaryExpression
Evaluating expression of type: BinaryExpression
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Evaluating expression of type: Identifier
Evaluating BinaryExpression: MemberExpression - Identifier
Values: 4 - 2
Evaluating expression of type: Literal
Evaluating BinaryExpression: BinaryExpression - Literal
Values: 2 - 1
Evaluating BinaryExpression: Identifier < BinaryExpression
Values: 1 < 1
For loop test condition result: false
Loop test condition is false, exiting loop
Evaluating expression of type: UpdateExpression
Updating loop variable i to  3
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Evaluating BinaryExpression: Identifier < MemberExpression
Values: 3 < 4
For loop test condition result: true
Loop test condition is true, entering loop body with context: {
  variables: { array: [ 1, 5, 6, 7 ], i: 3, j: 1, temp: 1 },
  history: [
    { line: 1, action: 'declare-variable', details: [Object] },
    { line: 2, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'declare-variable', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 6, action: 'swap', details: [Object] },
    { line: 7, action: 'swap', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 6, action: 'swap', details: [Object] },
    { line: 7, action: 'swap', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 9, action: 'loop-end', details: null },
    { line: 2, action: 'loop-update', details: [Object] },
    { line: 3, action: 'declare-variable', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 6, action: 'swap', details: [Object] },
    { line: 7, action: 'swap', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 9, action: 'loop-end', details: null },
    { line: 2, action: 'loop-update', details: [Object] },
    { line: 3, action: 'declare-variable', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 9, action: 'loop-end', details: null },
    { line: 2, action: 'loop-update', details: [Object] }
  ],
  functions: { swap: [Function (anonymous)] }
}
Entering handleForStatement with node: ForStatement {
  type: 'ForStatement',
  init: VariableDeclaration {
    type: 'VariableDeclaration',
    declarations: [ [VariableDeclarator] ],
    kind: 'var',
    loc: { start: [Object], end: [Object] }
  },
  test: BinaryExpression {
    type: 'BinaryExpression',
    operator: '<',
    left: Identifier { type: 'Identifier', name: 'j', loc: [Object] },
    right: BinaryExpression {
      type: 'BinaryExpression',
      operator: '-',
      left: [BinaryExpression],
      right: [Literal],
      loc: [Object]
    },
    loc: { start: [Object], end: [Object] }
  },
  update: UpdateExpression {
    type: 'UpdateExpression',
    operator: '++',
    argument: Identifier { type: 'Identifier', name: 'j', loc: [Object] },
    prefix: false,
    loc: { start: [Object], end: [Object] }
  },
  body: BlockStatement {
    type: 'BlockStatement',
    body: [ [IfStatement] ],
    loc: { start: [Object], end: [Object] }
  },
  loc: { start: { line: 3, column: 4 }, end: { line: 9, column: 5 } }
}
Evaluating expression of type: Literal
Declared variable j with value: 0
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: BinaryExpression
Evaluating expression of type: BinaryExpression
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Evaluating expression of type: Identifier
Evaluating BinaryExpression: MemberExpression - Identifier
Values: 4 - 3
Evaluating expression of type: Literal
Evaluating BinaryExpression: BinaryExpression - Literal
Values: 1 - 1
Evaluating BinaryExpression: Identifier < BinaryExpression
Values: 0 < 0
For loop test condition result: false
Loop test condition is false, exiting loop
Evaluating expression of type: UpdateExpression
Updating loop variable i to  4
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Evaluating BinaryExpression: Identifier < MemberExpression
Values: 4 < 4
For loop test condition result: false
Loop test condition is false, exiting loop
Evaluating expression of type: ArrayExpression
Evaluating expression of type: Literal
Evaluating expression of type: Literal
Evaluating expression of type: Literal
Evaluating expression of type: Literal
Declared variable array with value: [ 6, 1, 7, 5 ]
Entering handleForStatement with node: ForStatement {
  type: 'ForStatement',
  init: VariableDeclaration {
    type: 'VariableDeclaration',
    declarations: [ [VariableDeclarator] ],
    kind: 'var',
    loc: { start: [Object], end: [Object] }
  },
  test: BinaryExpression {
    type: 'BinaryExpression',
    operator: '<',
    left: Identifier { type: 'Identifier', name: 'i', loc: [Object] },
    right: StaticMemberExpression {
      type: 'MemberExpression',
      computed: false,
      object: [Identifier],
      property: [Identifier],
      loc: [Object]
    },
    loc: { start: [Object], end: [Object] }
  },
  update: UpdateExpression {
    type: 'UpdateExpression',
    operator: '++',
    argument: Identifier { type: 'Identifier', name: 'i', loc: [Object] },
    prefix: false,
    loc: { start: [Object], end: [Object] }
  },
  body: BlockStatement {
    type: 'BlockStatement',
    body: [ [ForStatement] ],
    loc: { start: [Object], end: [Object] }
  },
  loc: { start: { line: 2, column: 0 }, end: { line: 10, column: 1 } }
}
Evaluating expression of type: Literal
Declared variable i with value: 0
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Evaluating BinaryExpression: Identifier < MemberExpression
Values: 0 < 4
For loop test condition result: true
Loop test condition is true, entering loop body with context: {
  variables: { array: [ 6, 1, 7, 5 ], i: 0 },
  history: [
    { line: 1, action: 'declare-variable', details: [Object] },
    { line: 2, action: 'declare-variable', details: [Object] }
  ],
  functions: { swap: [Function (anonymous)] }
}
Entering handleForStatement with node: ForStatement {
  type: 'ForStatement',
  init: VariableDeclaration {
    type: 'VariableDeclaration',
    declarations: [ [VariableDeclarator] ],
    kind: 'var',
    loc: { start: [Object], end: [Object] }
  },
  test: BinaryExpression {
    type: 'BinaryExpression',
    operator: '<',
    left: Identifier { type: 'Identifier', name: 'j', loc: [Object] },
    right: BinaryExpression {
      type: 'BinaryExpression',
      operator: '-',
      left: [BinaryExpression],
      right: [Literal],
      loc: [Object]
    },
    loc: { start: [Object], end: [Object] }
  },
  update: UpdateExpression {
    type: 'UpdateExpression',
    operator: '++',
    argument: Identifier { type: 'Identifier', name: 'j', loc: [Object] },
    prefix: false,
    loc: { start: [Object], end: [Object] }
  },
  body: BlockStatement {
    type: 'BlockStatement',
    body: [ [IfStatement] ],
    loc: { start: [Object], end: [Object] }
  },
  loc: { start: { line: 3, column: 4 }, end: { line: 9, column: 5 } }
}
Evaluating expression of type: Literal
Declared variable j with value: 0
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: BinaryExpression
Evaluating expression of type: BinaryExpression
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Evaluating expression of type: Identifier
Evaluating BinaryExpression: MemberExpression - Identifier
Values: 4 - 0
Evaluating expression of type: Literal
Evaluating BinaryExpression: BinaryExpression - Literal
Values: 4 - 1
Evaluating BinaryExpression: Identifier < BinaryExpression
Values: 0 < 3
For loop test condition result: true
Loop test condition is true, entering loop body with context: {
  variables: { array: [ 6, 1, 7, 5 ], i: 0, j: 0 },
  history: [
    { line: 1, action: 'declare-variable', details: [Object] },
    { line: 2, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'declare-variable', details: [Object] }
  ],
  functions: { swap: [Function (anonymous)] }
}
Evaluating expression of type: BinaryExpression
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Evaluating expression of type: MemberExpression
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: Literal
Evaluating BinaryExpression: Identifier + Literal
Values: 0 + 1
Evaluating BinaryExpression: MemberExpression > MemberExpression
Values: 6 > 1
Evaluating expression of type: Identifier
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: Literal
Evaluating BinaryExpression: Identifier + Literal
Values: 0 + 1
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Declared variable temp with value: 1
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Declared variable temp with value: 1
Evaluating expression of type: UpdateExpression
Updating loop variable j to  1
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: BinaryExpression
Evaluating expression of type: BinaryExpression
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Evaluating expression of type: Identifier
Evaluating BinaryExpression: MemberExpression - Identifier
Values: 4 - 0
Evaluating expression of type: Literal
Evaluating BinaryExpression: BinaryExpression - Literal
Values: 4 - 1
Evaluating BinaryExpression: Identifier < BinaryExpression
Values: 1 < 3
For loop test condition result: true
Loop test condition is true, entering loop body with context: {
  variables: { array: [ 1, 6, 7, 5 ], i: 0, j: 1, temp: 1 },
  history: [
    { line: 1, action: 'declare-variable', details: [Object] },
    { line: 2, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'declare-variable', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 6, action: 'swap', details: [Object] },
    { line: 7, action: 'swap', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] }
  ],
  functions: { swap: [Function (anonymous)] }
}
Evaluating expression of type: BinaryExpression
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Evaluating expression of type: MemberExpression
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: Literal
Evaluating BinaryExpression: Identifier + Literal
Values: 1 + 1
Evaluating BinaryExpression: MemberExpression > MemberExpression
Values: 6 > 7
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Declared variable temp with value: 6
Evaluating expression of type: UpdateExpression
Updating loop variable j to  2
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: BinaryExpression
Evaluating expression of type: BinaryExpression
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Evaluating expression of type: Identifier
Evaluating BinaryExpression: MemberExpression - Identifier
Values: 4 - 0
Evaluating expression of type: Literal
Evaluating BinaryExpression: BinaryExpression - Literal
Values: 4 - 1
Evaluating BinaryExpression: Identifier < BinaryExpression
Values: 2 < 3
For loop test condition result: true
Loop test condition is true, entering loop body with context: {
  variables: { array: [ 1, 6, 7, 5 ], i: 0, j: 2, temp: 6 },
  history: [
    { line: 1, action: 'declare-variable', details: [Object] },
    { line: 2, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'declare-variable', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 6, action: 'swap', details: [Object] },
    { line: 7, action: 'swap', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] }
  ],
  functions: { swap: [Function (anonymous)] }
}
Evaluating expression of type: BinaryExpression
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Evaluating expression of type: MemberExpression
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: Literal
Evaluating BinaryExpression: Identifier + Literal
Values: 2 + 1
Evaluating BinaryExpression: MemberExpression > MemberExpression
Values: 7 > 5
Evaluating expression of type: Identifier
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: Literal
Evaluating BinaryExpression: Identifier + Literal
Values: 2 + 1
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Declared variable temp with value: 5
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Declared variable temp with value: 5
Evaluating expression of type: UpdateExpression
Updating loop variable j to  3
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: BinaryExpression
Evaluating expression of type: BinaryExpression
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Evaluating expression of type: Identifier
Evaluating BinaryExpression: MemberExpression - Identifier
Values: 4 - 0
Evaluating expression of type: Literal
Evaluating BinaryExpression: BinaryExpression - Literal
Values: 4 - 1
Evaluating BinaryExpression: Identifier < BinaryExpression
Values: 3 < 3
For loop test condition result: false
Loop test condition is false, exiting loop
Evaluating expression of type: UpdateExpression
Updating loop variable i to  1
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Evaluating BinaryExpression: Identifier < MemberExpression
Values: 1 < 4
For loop test condition result: true
Loop test condition is true, entering loop body with context: {
  variables: { array: [ 1, 6, 5, 7 ], i: 1, j: 3, temp: 5 },
  history: [
    { line: 1, action: 'declare-variable', details: [Object] },
    { line: 2, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'declare-variable', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 6, action: 'swap', details: [Object] },
    { line: 7, action: 'swap', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 6, action: 'swap', details: [Object] },
    { line: 7, action: 'swap', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 9, action: 'loop-end', details: null },
    { line: 2, action: 'loop-update', details: [Object] }
  ],
  functions: { swap: [Function (anonymous)] }
}
Entering handleForStatement with node: ForStatement {
  type: 'ForStatement',
  init: VariableDeclaration {
    type: 'VariableDeclaration',
    declarations: [ [VariableDeclarator] ],
    kind: 'var',
    loc: { start: [Object], end: [Object] }
  },
  test: BinaryExpression {
    type: 'BinaryExpression',
    operator: '<',
    left: Identifier { type: 'Identifier', name: 'j', loc: [Object] },
    right: BinaryExpression {
      type: 'BinaryExpression',
      operator: '-',
      left: [BinaryExpression],
      right: [Literal],
      loc: [Object]
    },
    loc: { start: [Object], end: [Object] }
  },
  update: UpdateExpression {
    type: 'UpdateExpression',
    operator: '++',
    argument: Identifier { type: 'Identifier', name: 'j', loc: [Object] },
    prefix: false,
    loc: { start: [Object], end: [Object] }
  },
  body: BlockStatement {
    type: 'BlockStatement',
    body: [ [IfStatement] ],
    loc: { start: [Object], end: [Object] }
  },
  loc: { start: { line: 3, column: 4 }, end: { line: 9, column: 5 } }
}
Evaluating expression of type: Literal
Declared variable j with value: 0
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: BinaryExpression
Evaluating expression of type: BinaryExpression
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Evaluating expression of type: Identifier
Evaluating BinaryExpression: MemberExpression - Identifier
Values: 4 - 1
Evaluating expression of type: Literal
Evaluating BinaryExpression: BinaryExpression - Literal
Values: 3 - 1
Evaluating BinaryExpression: Identifier < BinaryExpression
Values: 0 < 2
For loop test condition result: true
Loop test condition is true, entering loop body with context: {
  variables: { array: [ 1, 6, 5, 7 ], i: 1, j: 0, temp: 5 },
  history: [
    { line: 1, action: 'declare-variable', details: [Object] },
    { line: 2, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'declare-variable', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 6, action: 'swap', details: [Object] },
    { line: 7, action: 'swap', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 6, action: 'swap', details: [Object] },
    { line: 7, action: 'swap', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 9, action: 'loop-end', details: null },
    { line: 2, action: 'loop-update', details: [Object] },
    { line: 3, action: 'declare-variable', details: [Object] }
  ],
  functions: { swap: [Function (anonymous)] }
}
Evaluating expression of type: BinaryExpression
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Evaluating expression of type: MemberExpression
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: Literal
Evaluating BinaryExpression: Identifier + Literal
Values: 0 + 1
Evaluating BinaryExpression: MemberExpression > MemberExpression
Values: 1 > 6
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Declared variable temp with value: 1
Evaluating expression of type: UpdateExpression
Updating loop variable j to  1
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: BinaryExpression
Evaluating expression of type: BinaryExpression
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Evaluating expression of type: Identifier
Evaluating BinaryExpression: MemberExpression - Identifier
Values: 4 - 1
Evaluating expression of type: Literal
Evaluating BinaryExpression: BinaryExpression - Literal
Values: 3 - 1
Evaluating BinaryExpression: Identifier < BinaryExpression
Values: 1 < 2
For loop test condition result: true
Loop test condition is true, entering loop body with context: {
  variables: { array: [ 1, 6, 5, 7 ], i: 1, j: 1, temp: 1 },
  history: [
    { line: 1, action: 'declare-variable', details: [Object] },
    { line: 2, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'declare-variable', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 6, action: 'swap', details: [Object] },
    { line: 7, action: 'swap', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 6, action: 'swap', details: [Object] },
    { line: 7, action: 'swap', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 9, action: 'loop-end', details: null },
    { line: 2, action: 'loop-update', details: [Object] },
    { line: 3, action: 'declare-variable', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] }
  ],
  functions: { swap: [Function (anonymous)] }
}
Evaluating expression of type: BinaryExpression
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Evaluating expression of type: MemberExpression
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: Literal
Evaluating BinaryExpression: Identifier + Literal
Values: 1 + 1
Evaluating BinaryExpression: MemberExpression > MemberExpression
Values: 6 > 5
Evaluating expression of type: Identifier
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: Literal
Evaluating BinaryExpression: Identifier + Literal
Values: 1 + 1
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Declared variable temp with value: 5
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Declared variable temp with value: 5
Evaluating expression of type: UpdateExpression
Updating loop variable j to  2
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: BinaryExpression
Evaluating expression of type: BinaryExpression
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Evaluating expression of type: Identifier
Evaluating BinaryExpression: MemberExpression - Identifier
Values: 4 - 1
Evaluating expression of type: Literal
Evaluating BinaryExpression: BinaryExpression - Literal
Values: 3 - 1
Evaluating BinaryExpression: Identifier < BinaryExpression
Values: 2 < 2
For loop test condition result: false
Loop test condition is false, exiting loop
Evaluating expression of type: UpdateExpression
Updating loop variable i to  2
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Evaluating BinaryExpression: Identifier < MemberExpression
Values: 2 < 4
For loop test condition result: true
Loop test condition is true, entering loop body with context: {
  variables: { array: [ 1, 5, 6, 7 ], i: 2, j: 2, temp: 5 },
  history: [
    { line: 1, action: 'declare-variable', details: [Object] },
    { line: 2, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'declare-variable', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 6, action: 'swap', details: [Object] },
    { line: 7, action: 'swap', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 6, action: 'swap', details: [Object] },
    { line: 7, action: 'swap', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 9, action: 'loop-end', details: null },
    { line: 2, action: 'loop-update', details: [Object] },
    { line: 3, action: 'declare-variable', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 6, action: 'swap', details: [Object] },
    { line: 7, action: 'swap', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 9, action: 'loop-end', details: null },
    { line: 2, action: 'loop-update', details: [Object] }
  ],
  functions: { swap: [Function (anonymous)] }
}
Entering handleForStatement with node: ForStatement {
  type: 'ForStatement',
  init: VariableDeclaration {
    type: 'VariableDeclaration',
    declarations: [ [VariableDeclarator] ],
    kind: 'var',
    loc: { start: [Object], end: [Object] }
  },
  test: BinaryExpression {
    type: 'BinaryExpression',
    operator: '<',
    left: Identifier { type: 'Identifier', name: 'j', loc: [Object] },
    right: BinaryExpression {
      type: 'BinaryExpression',
      operator: '-',
      left: [BinaryExpression],
      right: [Literal],
      loc: [Object]
    },
    loc: { start: [Object], end: [Object] }
  },
  update: UpdateExpression {
    type: 'UpdateExpression',
    operator: '++',
    argument: Identifier { type: 'Identifier', name: 'j', loc: [Object] },
    prefix: false,
    loc: { start: [Object], end: [Object] }
  },
  body: BlockStatement {
    type: 'BlockStatement',
    body: [ [IfStatement] ],
    loc: { start: [Object], end: [Object] }
  },
  loc: { start: { line: 3, column: 4 }, end: { line: 9, column: 5 } }
}
Evaluating expression of type: Literal
Declared variable j with value: 0
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: BinaryExpression
Evaluating expression of type: BinaryExpression
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Evaluating expression of type: Identifier
Evaluating BinaryExpression: MemberExpression - Identifier
Values: 4 - 2
Evaluating expression of type: Literal
Evaluating BinaryExpression: BinaryExpression - Literal
Values: 2 - 1
Evaluating BinaryExpression: Identifier < BinaryExpression
Values: 0 < 1
For loop test condition result: true
Loop test condition is true, entering loop body with context: {
  variables: { array: [ 1, 5, 6, 7 ], i: 2, j: 0, temp: 5 },
  history: [
    { line: 1, action: 'declare-variable', details: [Object] },
    { line: 2, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'declare-variable', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 6, action: 'swap', details: [Object] },
    { line: 7, action: 'swap', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 6, action: 'swap', details: [Object] },
    { line: 7, action: 'swap', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 9, action: 'loop-end', details: null },
    { line: 2, action: 'loop-update', details: [Object] },
    { line: 3, action: 'declare-variable', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 6, action: 'swap', details: [Object] },
    { line: 7, action: 'swap', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 9, action: 'loop-end', details: null },
    { line: 2, action: 'loop-update', details: [Object] },
    { line: 3, action: 'declare-variable', details: [Object] }
  ],
  functions: { swap: [Function (anonymous)] }
}
Evaluating expression of type: BinaryExpression
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Evaluating expression of type: MemberExpression
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: Literal
Evaluating BinaryExpression: Identifier + Literal
Values: 0 + 1
Evaluating BinaryExpression: MemberExpression > MemberExpression
Values: 1 > 5
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Declared variable temp with value: 1
Evaluating expression of type: UpdateExpression
Updating loop variable j to  1
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: BinaryExpression
Evaluating expression of type: BinaryExpression
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Evaluating expression of type: Identifier
Evaluating BinaryExpression: MemberExpression - Identifier
Values: 4 - 2
Evaluating expression of type: Literal
Evaluating BinaryExpression: BinaryExpression - Literal
Values: 2 - 1
Evaluating BinaryExpression: Identifier < BinaryExpression
Values: 1 < 1
For loop test condition result: false
Loop test condition is false, exiting loop
Evaluating expression of type: UpdateExpression
Updating loop variable i to  3
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Evaluating BinaryExpression: Identifier < MemberExpression
Values: 3 < 4
For loop test condition result: true
Loop test condition is true, entering loop body with context: {
  variables: { array: [ 1, 5, 6, 7 ], i: 3, j: 1, temp: 1 },
  history: [
    { line: 1, action: 'declare-variable', details: [Object] },
    { line: 2, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'declare-variable', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 6, action: 'swap', details: [Object] },
    { line: 7, action: 'swap', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 6, action: 'swap', details: [Object] },
    { line: 7, action: 'swap', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 9, action: 'loop-end', details: null },
    { line: 2, action: 'loop-update', details: [Object] },
    { line: 3, action: 'declare-variable', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 6, action: 'swap', details: [Object] },
    { line: 7, action: 'swap', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 9, action: 'loop-end', details: null },
    { line: 2, action: 'loop-update', details: [Object] },
    { line: 3, action: 'declare-variable', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 9, action: 'loop-end', details: null },
    { line: 2, action: 'loop-update', details: [Object] }
  ],
  functions: { swap: [Function (anonymous)] }
}
Entering handleForStatement with node: ForStatement {
  type: 'ForStatement',
  init: VariableDeclaration {
    type: 'VariableDeclaration',
    declarations: [ [VariableDeclarator] ],
    kind: 'var',
    loc: { start: [Object], end: [Object] }
  },
  test: BinaryExpression {
    type: 'BinaryExpression',
    operator: '<',
    left: Identifier { type: 'Identifier', name: 'j', loc: [Object] },
    right: BinaryExpression {
      type: 'BinaryExpression',
      operator: '-',
      left: [BinaryExpression],
      right: [Literal],
      loc: [Object]
    },
    loc: { start: [Object], end: [Object] }
  },
  update: UpdateExpression {
    type: 'UpdateExpression',
    operator: '++',
    argument: Identifier { type: 'Identifier', name: 'j', loc: [Object] },
    prefix: false,
    loc: { start: [Object], end: [Object] }
  },
  body: BlockStatement {
    type: 'BlockStatement',
    body: [ [IfStatement] ],
    loc: { start: [Object], end: [Object] }
  },
  loc: { start: { line: 3, column: 4 }, end: { line: 9, column: 5 } }
}
Evaluating expression of type: Literal
Declared variable j with value: 0
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: BinaryExpression
Evaluating expression of type: BinaryExpression
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Evaluating expression of type: Identifier
Evaluating BinaryExpression: MemberExpression - Identifier
Values: 4 - 3
Evaluating expression of type: Literal
Evaluating BinaryExpression: BinaryExpression - Literal
Values: 1 - 1
Evaluating BinaryExpression: Identifier < BinaryExpression
Values: 0 < 0
For loop test condition result: false
Loop test condition is false, exiting loop
Evaluating expression of type: UpdateExpression
Updating loop variable i to  4
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Evaluating BinaryExpression: Identifier < MemberExpression
Values: 4 < 4
For loop test condition result: false
Loop test condition is false, exiting loop
Evaluating expression of type: ArrayExpression
Evaluating expression of type: Literal
Evaluating expression of type: Literal
Evaluating expression of type: Literal
Evaluating expression of type: Literal
Declared variable array with value: [ 6, 1, 7, 5 ]
Entering handleForStatement with node: ForStatement {
  type: 'ForStatement',
  init: VariableDeclaration {
    type: 'VariableDeclaration',
    declarations: [ [VariableDeclarator] ],
    kind: 'var',
    loc: { start: [Object], end: [Object] }
  },
  test: BinaryExpression {
    type: 'BinaryExpression',
    operator: '<',
    left: Identifier { type: 'Identifier', name: 'i', loc: [Object] },
    right: StaticMemberExpression {
      type: 'MemberExpression',
      computed: false,
      object: [Identifier],
      property: [Identifier],
      loc: [Object]
    },
    loc: { start: [Object], end: [Object] }
  },
  update: UpdateExpression {
    type: 'UpdateExpression',
    operator: '++',
    argument: Identifier { type: 'Identifier', name: 'i', loc: [Object] },
    prefix: false,
    loc: { start: [Object], end: [Object] }
  },
  body: BlockStatement {
    type: 'BlockStatement',
    body: [ [ForStatement] ],
    loc: { start: [Object], end: [Object] }
  },
  loc: { start: { line: 2, column: 0 }, end: { line: 10, column: 1 } }
}
Evaluating expression of type: Literal
Declared variable i with value: 0
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Evaluating BinaryExpression: Identifier < MemberExpression
Values: 0 < 4
For loop test condition result: true
Loop test condition is true, entering loop body with context: {
  variables: { array: [ 6, 1, 7, 5 ], i: 0 },
  history: [
    { line: 1, action: 'declare-variable', details: [Object] },
    { line: 2, action: 'declare-variable', details: [Object] }
  ],
  functions: { swap: [Function (anonymous)] }
}
Entering handleForStatement with node: ForStatement {
  type: 'ForStatement',
  init: VariableDeclaration {
    type: 'VariableDeclaration',
    declarations: [ [VariableDeclarator] ],
    kind: 'var',
    loc: { start: [Object], end: [Object] }
  },
  test: BinaryExpression {
    type: 'BinaryExpression',
    operator: '<',
    left: Identifier { type: 'Identifier', name: 'j', loc: [Object] },
    right: BinaryExpression {
      type: 'BinaryExpression',
      operator: '-',
      left: [BinaryExpression],
      right: [Literal],
      loc: [Object]
    },
    loc: { start: [Object], end: [Object] }
  },
  update: UpdateExpression {
    type: 'UpdateExpression',
    operator: '++',
    argument: Identifier { type: 'Identifier', name: 'j', loc: [Object] },
    prefix: false,
    loc: { start: [Object], end: [Object] }
  },
  body: BlockStatement {
    type: 'BlockStatement',
    body: [ [IfStatement] ],
    loc: { start: [Object], end: [Object] }
  },
  loc: { start: { line: 3, column: 4 }, end: { line: 9, column: 5 } }
}
Evaluating expression of type: Literal
Declared variable j with value: 0
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: BinaryExpression
Evaluating expression of type: BinaryExpression
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Evaluating expression of type: Identifier
Evaluating BinaryExpression: MemberExpression - Identifier
Values: 4 - 0
Evaluating expression of type: Literal
Evaluating BinaryExpression: BinaryExpression - Literal
Values: 4 - 1
Evaluating BinaryExpression: Identifier < BinaryExpression
Values: 0 < 3
For loop test condition result: true
Loop test condition is true, entering loop body with context: {
  variables: { array: [ 6, 1, 7, 5 ], i: 0, j: 0 },
  history: [
    { line: 1, action: 'declare-variable', details: [Object] },
    { line: 2, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'declare-variable', details: [Object] }
  ],
  functions: { swap: [Function (anonymous)] }
}
Evaluating expression of type: BinaryExpression
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Evaluating expression of type: MemberExpression
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: Literal
Evaluating BinaryExpression: Identifier + Literal
Values: 0 + 1
Evaluating BinaryExpression: MemberExpression > MemberExpression
Values: 6 > 1
Evaluating expression of type: Identifier
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: Literal
Evaluating BinaryExpression: Identifier + Literal
Values: 0 + 1
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Declared variable temp with value: 1
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Declared variable temp with value: 1
Evaluating expression of type: UpdateExpression
Updating loop variable j to  1
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: BinaryExpression
Evaluating expression of type: BinaryExpression
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Evaluating expression of type: Identifier
Evaluating BinaryExpression: MemberExpression - Identifier
Values: 4 - 0
Evaluating expression of type: Literal
Evaluating BinaryExpression: BinaryExpression - Literal
Values: 4 - 1
Evaluating BinaryExpression: Identifier < BinaryExpression
Values: 1 < 3
For loop test condition result: true
Loop test condition is true, entering loop body with context: {
  variables: { array: [ 1, 6, 7, 5 ], i: 0, j: 1, temp: 1 },
  history: [
    { line: 1, action: 'declare-variable', details: [Object] },
    { line: 2, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'declare-variable', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 6, action: 'swap', details: [Object] },
    { line: 7, action: 'swap', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] }
  ],
  functions: { swap: [Function (anonymous)] }
}
Evaluating expression of type: BinaryExpression
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Evaluating expression of type: MemberExpression
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: Literal
Evaluating BinaryExpression: Identifier + Literal
Values: 1 + 1
Evaluating BinaryExpression: MemberExpression > MemberExpression
Values: 6 > 7
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Declared variable temp with value: 6
Evaluating expression of type: UpdateExpression
Updating loop variable j to  2
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: BinaryExpression
Evaluating expression of type: BinaryExpression
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Evaluating expression of type: Identifier
Evaluating BinaryExpression: MemberExpression - Identifier
Values: 4 - 0
Evaluating expression of type: Literal
Evaluating BinaryExpression: BinaryExpression - Literal
Values: 4 - 1
Evaluating BinaryExpression: Identifier < BinaryExpression
Values: 2 < 3
For loop test condition result: true
Loop test condition is true, entering loop body with context: {
  variables: { array: [ 1, 6, 7, 5 ], i: 0, j: 2, temp: 6 },
  history: [
    { line: 1, action: 'declare-variable', details: [Object] },
    { line: 2, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'declare-variable', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 6, action: 'swap', details: [Object] },
    { line: 7, action: 'swap', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] }
  ],
  functions: { swap: [Function (anonymous)] }
}
Evaluating expression of type: BinaryExpression
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Evaluating expression of type: MemberExpression
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: Literal
Evaluating BinaryExpression: Identifier + Literal
Values: 2 + 1
Evaluating BinaryExpression: MemberExpression > MemberExpression
Values: 7 > 5
Evaluating expression of type: Identifier
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: Literal
Evaluating BinaryExpression: Identifier + Literal
Values: 2 + 1
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Declared variable temp with value: 5
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Declared variable temp with value: 5
Evaluating expression of type: UpdateExpression
Updating loop variable j to  3
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: BinaryExpression
Evaluating expression of type: BinaryExpression
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Evaluating expression of type: Identifier
Evaluating BinaryExpression: MemberExpression - Identifier
Values: 4 - 0
Evaluating expression of type: Literal
Evaluating BinaryExpression: BinaryExpression - Literal
Values: 4 - 1
Evaluating BinaryExpression: Identifier < BinaryExpression
Values: 3 < 3
For loop test condition result: false
Loop test condition is false, exiting loop
Evaluating expression of type: UpdateExpression
Updating loop variable i to  1
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Evaluating BinaryExpression: Identifier < MemberExpression
Values: 1 < 4
For loop test condition result: true
Loop test condition is true, entering loop body with context: {
  variables: { array: [ 1, 6, 5, 7 ], i: 1, j: 3, temp: 5 },
  history: [
    { line: 1, action: 'declare-variable', details: [Object] },
    { line: 2, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'declare-variable', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 6, action: 'swap', details: [Object] },
    { line: 7, action: 'swap', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 6, action: 'swap', details: [Object] },
    { line: 7, action: 'swap', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 9, action: 'loop-end', details: null },
    { line: 2, action: 'loop-update', details: [Object] }
  ],
  functions: { swap: [Function (anonymous)] }
}
Entering handleForStatement with node: ForStatement {
  type: 'ForStatement',
  init: VariableDeclaration {
    type: 'VariableDeclaration',
    declarations: [ [VariableDeclarator] ],
    kind: 'var',
    loc: { start: [Object], end: [Object] }
  },
  test: BinaryExpression {
    type: 'BinaryExpression',
    operator: '<',
    left: Identifier { type: 'Identifier', name: 'j', loc: [Object] },
    right: BinaryExpression {
      type: 'BinaryExpression',
      operator: '-',
      left: [BinaryExpression],
      right: [Literal],
      loc: [Object]
    },
    loc: { start: [Object], end: [Object] }
  },
  update: UpdateExpression {
    type: 'UpdateExpression',
    operator: '++',
    argument: Identifier { type: 'Identifier', name: 'j', loc: [Object] },
    prefix: false,
    loc: { start: [Object], end: [Object] }
  },
  body: BlockStatement {
    type: 'BlockStatement',
    body: [ [IfStatement] ],
    loc: { start: [Object], end: [Object] }
  },
  loc: { start: { line: 3, column: 4 }, end: { line: 9, column: 5 } }
}
Evaluating expression of type: Literal
Declared variable j with value: 0
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: BinaryExpression
Evaluating expression of type: BinaryExpression
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Evaluating expression of type: Identifier
Evaluating BinaryExpression: MemberExpression - Identifier
Values: 4 - 1
Evaluating expression of type: Literal
Evaluating BinaryExpression: BinaryExpression - Literal
Values: 3 - 1
Evaluating BinaryExpression: Identifier < BinaryExpression
Values: 0 < 2
For loop test condition result: true
Loop test condition is true, entering loop body with context: {
  variables: { array: [ 1, 6, 5, 7 ], i: 1, j: 0, temp: 5 },
  history: [
    { line: 1, action: 'declare-variable', details: [Object] },
    { line: 2, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'declare-variable', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 6, action: 'swap', details: [Object] },
    { line: 7, action: 'swap', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 6, action: 'swap', details: [Object] },
    { line: 7, action: 'swap', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 9, action: 'loop-end', details: null },
    { line: 2, action: 'loop-update', details: [Object] },
    { line: 3, action: 'declare-variable', details: [Object] }
  ],
  functions: { swap: [Function (anonymous)] }
}
Evaluating expression of type: BinaryExpression
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Evaluating expression of type: MemberExpression
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: Literal
Evaluating BinaryExpression: Identifier + Literal
Values: 0 + 1
Evaluating BinaryExpression: MemberExpression > MemberExpression
Values: 1 > 6
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Declared variable temp with value: 1
Evaluating expression of type: UpdateExpression
Updating loop variable j to  1
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: BinaryExpression
Evaluating expression of type: BinaryExpression
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Evaluating expression of type: Identifier
Evaluating BinaryExpression: MemberExpression - Identifier
Values: 4 - 1
Evaluating expression of type: Literal
Evaluating BinaryExpression: BinaryExpression - Literal
Values: 3 - 1
Evaluating BinaryExpression: Identifier < BinaryExpression
Values: 1 < 2
For loop test condition result: true
Loop test condition is true, entering loop body with context: {
  variables: { array: [ 1, 6, 5, 7 ], i: 1, j: 1, temp: 1 },
  history: [
    { line: 1, action: 'declare-variable', details: [Object] },
    { line: 2, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'declare-variable', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 6, action: 'swap', details: [Object] },
    { line: 7, action: 'swap', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 6, action: 'swap', details: [Object] },
    { line: 7, action: 'swap', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 9, action: 'loop-end', details: null },
    { line: 2, action: 'loop-update', details: [Object] },
    { line: 3, action: 'declare-variable', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] }
  ],
  functions: { swap: [Function (anonymous)] }
}
Evaluating expression of type: BinaryExpression
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Evaluating expression of type: MemberExpression
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: Literal
Evaluating BinaryExpression: Identifier + Literal
Values: 1 + 1
Evaluating BinaryExpression: MemberExpression > MemberExpression
Values: 6 > 5
Evaluating expression of type: Identifier
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: Literal
Evaluating BinaryExpression: Identifier + Literal
Values: 1 + 1
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Declared variable temp with value: 5
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Declared variable temp with value: 5
Evaluating expression of type: UpdateExpression
Updating loop variable j to  2
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: BinaryExpression
Evaluating expression of type: BinaryExpression
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Evaluating expression of type: Identifier
Evaluating BinaryExpression: MemberExpression - Identifier
Values: 4 - 1
Evaluating expression of type: Literal
Evaluating BinaryExpression: BinaryExpression - Literal
Values: 3 - 1
Evaluating BinaryExpression: Identifier < BinaryExpression
Values: 2 < 2
For loop test condition result: false
Loop test condition is false, exiting loop
Evaluating expression of type: UpdateExpression
Updating loop variable i to  2
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Evaluating BinaryExpression: Identifier < MemberExpression
Values: 2 < 4
For loop test condition result: true
Loop test condition is true, entering loop body with context: {
  variables: { array: [ 1, 5, 6, 7 ], i: 2, j: 2, temp: 5 },
  history: [
    { line: 1, action: 'declare-variable', details: [Object] },
    { line: 2, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'declare-variable', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 6, action: 'swap', details: [Object] },
    { line: 7, action: 'swap', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 6, action: 'swap', details: [Object] },
    { line: 7, action: 'swap', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 9, action: 'loop-end', details: null },
    { line: 2, action: 'loop-update', details: [Object] },
    { line: 3, action: 'declare-variable', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 6, action: 'swap', details: [Object] },
    { line: 7, action: 'swap', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 9, action: 'loop-end', details: null },
    { line: 2, action: 'loop-update', details: [Object] }
  ],
  functions: { swap: [Function (anonymous)] }
}
Entering handleForStatement with node: ForStatement {
  type: 'ForStatement',
  init: VariableDeclaration {
    type: 'VariableDeclaration',
    declarations: [ [VariableDeclarator] ],
    kind: 'var',
    loc: { start: [Object], end: [Object] }
  },
  test: BinaryExpression {
    type: 'BinaryExpression',
    operator: '<',
    left: Identifier { type: 'Identifier', name: 'j', loc: [Object] },
    right: BinaryExpression {
      type: 'BinaryExpression',
      operator: '-',
      left: [BinaryExpression],
      right: [Literal],
      loc: [Object]
    },
    loc: { start: [Object], end: [Object] }
  },
  update: UpdateExpression {
    type: 'UpdateExpression',
    operator: '++',
    argument: Identifier { type: 'Identifier', name: 'j', loc: [Object] },
    prefix: false,
    loc: { start: [Object], end: [Object] }
  },
  body: BlockStatement {
    type: 'BlockStatement',
    body: [ [IfStatement] ],
    loc: { start: [Object], end: [Object] }
  },
  loc: { start: { line: 3, column: 4 }, end: { line: 9, column: 5 } }
}
Evaluating expression of type: Literal
Declared variable j with value: 0
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: BinaryExpression
Evaluating expression of type: BinaryExpression
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Evaluating expression of type: Identifier
Evaluating BinaryExpression: MemberExpression - Identifier
Values: 4 - 2
Evaluating expression of type: Literal
Evaluating BinaryExpression: BinaryExpression - Literal
Values: 2 - 1
Evaluating BinaryExpression: Identifier < BinaryExpression
Values: 0 < 1
For loop test condition result: true
Loop test condition is true, entering loop body with context: {
  variables: { array: [ 1, 5, 6, 7 ], i: 2, j: 0, temp: 5 },
  history: [
    { line: 1, action: 'declare-variable', details: [Object] },
    { line: 2, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'declare-variable', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 6, action: 'swap', details: [Object] },
    { line: 7, action: 'swap', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 6, action: 'swap', details: [Object] },
    { line: 7, action: 'swap', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 9, action: 'loop-end', details: null },
    { line: 2, action: 'loop-update', details: [Object] },
    { line: 3, action: 'declare-variable', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 6, action: 'swap', details: [Object] },
    { line: 7, action: 'swap', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 9, action: 'loop-end', details: null },
    { line: 2, action: 'loop-update', details: [Object] },
    { line: 3, action: 'declare-variable', details: [Object] }
  ],
  functions: { swap: [Function (anonymous)] }
}
Evaluating expression of type: BinaryExpression
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Evaluating expression of type: MemberExpression
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: Literal
Evaluating BinaryExpression: Identifier + Literal
Values: 0 + 1
Evaluating BinaryExpression: MemberExpression > MemberExpression
Values: 1 > 5
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Declared variable temp with value: 1
Evaluating expression of type: UpdateExpression
Updating loop variable j to  1
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: BinaryExpression
Evaluating expression of type: BinaryExpression
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Evaluating expression of type: Identifier
Evaluating BinaryExpression: MemberExpression - Identifier
Values: 4 - 2
Evaluating expression of type: Literal
Evaluating BinaryExpression: BinaryExpression - Literal
Values: 2 - 1
Evaluating BinaryExpression: Identifier < BinaryExpression
Values: 1 < 1
For loop test condition result: false
Loop test condition is false, exiting loop
Evaluating expression of type: UpdateExpression
Updating loop variable i to  3
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Evaluating BinaryExpression: Identifier < MemberExpression
Values: 3 < 4
For loop test condition result: true
Loop test condition is true, entering loop body with context: {
  variables: { array: [ 1, 5, 6, 7 ], i: 3, j: 1, temp: 1 },
  history: [
    { line: 1, action: 'declare-variable', details: [Object] },
    { line: 2, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'declare-variable', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 6, action: 'swap', details: [Object] },
    { line: 7, action: 'swap', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 6, action: 'swap', details: [Object] },
    { line: 7, action: 'swap', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 9, action: 'loop-end', details: null },
    { line: 2, action: 'loop-update', details: [Object] },
    { line: 3, action: 'declare-variable', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 6, action: 'swap', details: [Object] },
    { line: 7, action: 'swap', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 9, action: 'loop-end', details: null },
    { line: 2, action: 'loop-update', details: [Object] },
    { line: 3, action: 'declare-variable', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 9, action: 'loop-end', details: null },
    { line: 2, action: 'loop-update', details: [Object] }
  ],
  functions: { swap: [Function (anonymous)] }
}
Entering handleForStatement with node: ForStatement {
  type: 'ForStatement',
  init: VariableDeclaration {
    type: 'VariableDeclaration',
    declarations: [ [VariableDeclarator] ],
    kind: 'var',
    loc: { start: [Object], end: [Object] }
  },
  test: BinaryExpression {
    type: 'BinaryExpression',
    operator: '<',
    left: Identifier { type: 'Identifier', name: 'j', loc: [Object] },
    right: BinaryExpression {
      type: 'BinaryExpression',
      operator: '-',
      left: [BinaryExpression],
      right: [Literal],
      loc: [Object]
    },
    loc: { start: [Object], end: [Object] }
  },
  update: UpdateExpression {
    type: 'UpdateExpression',
    operator: '++',
    argument: Identifier { type: 'Identifier', name: 'j', loc: [Object] },
    prefix: false,
    loc: { start: [Object], end: [Object] }
  },
  body: BlockStatement {
    type: 'BlockStatement',
    body: [ [IfStatement] ],
    loc: { start: [Object], end: [Object] }
  },
  loc: { start: { line: 3, column: 4 }, end: { line: 9, column: 5 } }
}
Evaluating expression of type: Literal
Declared variable j with value: 0
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: BinaryExpression
Evaluating expression of type: BinaryExpression
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Evaluating expression of type: Identifier
Evaluating BinaryExpression: MemberExpression - Identifier
Values: 4 - 3
Evaluating expression of type: Literal
Evaluating BinaryExpression: BinaryExpression - Literal
Values: 1 - 1
Evaluating BinaryExpression: Identifier < BinaryExpression
Values: 0 < 0
For loop test condition result: false
Loop test condition is false, exiting loop
Evaluating expression of type: UpdateExpression
Updating loop variable i to  4
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Evaluating BinaryExpression: Identifier < MemberExpression
Values: 4 < 4
For loop test condition result: false
Loop test condition is false, exiting loop
Evaluating expression of type: ArrayExpression
Evaluating expression of type: Literal
Evaluating expression of type: Literal
Evaluating expression of type: Literal
Evaluating expression of type: Literal
Declared variable array with value: [ 6, 1, 7, 5 ]
Entering handleForStatement with node: ForStatement {
  type: 'ForStatement',
  init: VariableDeclaration {
    type: 'VariableDeclaration',
    declarations: [ [VariableDeclarator] ],
    kind: 'var',
    loc: { start: [Object], end: [Object] }
  },
  test: BinaryExpression {
    type: 'BinaryExpression',
    operator: '<',
    left: Identifier { type: 'Identifier', name: 'i', loc: [Object] },
    right: StaticMemberExpression {
      type: 'MemberExpression',
      computed: false,
      object: [Identifier],
      property: [Identifier],
      loc: [Object]
    },
    loc: { start: [Object], end: [Object] }
  },
  update: UpdateExpression {
    type: 'UpdateExpression',
    operator: '++',
    argument: Identifier { type: 'Identifier', name: 'i', loc: [Object] },
    prefix: false,
    loc: { start: [Object], end: [Object] }
  },
  body: BlockStatement {
    type: 'BlockStatement',
    body: [ [ForStatement] ],
    loc: { start: [Object], end: [Object] }
  },
  loc: { start: { line: 2, column: 0 }, end: { line: 10, column: 1 } }
}
Evaluating expression of type: Literal
Declared variable i with value: 0
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Evaluating BinaryExpression: Identifier < MemberExpression
Values: 0 < 4
For loop test condition result: true
Loop test condition is true, entering loop body with context: {
  variables: { array: [ 6, 1, 7, 5 ], i: 0 },
  history: [
    { line: 1, action: 'declare-variable', details: [Object] },
    { line: 2, action: 'declare-variable', details: [Object] }
  ],
  functions: { swap: [Function (anonymous)] }
}
Entering handleForStatement with node: ForStatement {
  type: 'ForStatement',
  init: VariableDeclaration {
    type: 'VariableDeclaration',
    declarations: [ [VariableDeclarator] ],
    kind: 'var',
    loc: { start: [Object], end: [Object] }
  },
  test: BinaryExpression {
    type: 'BinaryExpression',
    operator: '<',
    left: Identifier { type: 'Identifier', name: 'j', loc: [Object] },
    right: BinaryExpression {
      type: 'BinaryExpression',
      operator: '-',
      left: [BinaryExpression],
      right: [Literal],
      loc: [Object]
    },
    loc: { start: [Object], end: [Object] }
  },
  update: UpdateExpression {
    type: 'UpdateExpression',
    operator: '++',
    argument: Identifier { type: 'Identifier', name: 'j', loc: [Object] },
    prefix: false,
    loc: { start: [Object], end: [Object] }
  },
  body: BlockStatement {
    type: 'BlockStatement',
    body: [ [IfStatement] ],
    loc: { start: [Object], end: [Object] }
  },
  loc: { start: { line: 3, column: 4 }, end: { line: 9, column: 5 } }
}
Evaluating expression of type: Literal
Declared variable j with value: 0
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: BinaryExpression
Evaluating expression of type: BinaryExpression
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Evaluating expression of type: Identifier
Evaluating BinaryExpression: MemberExpression - Identifier
Values: 4 - 0
Evaluating expression of type: Literal
Evaluating BinaryExpression: BinaryExpression - Literal
Values: 4 - 1
Evaluating BinaryExpression: Identifier < BinaryExpression
Values: 0 < 3
For loop test condition result: true
Loop test condition is true, entering loop body with context: {
  variables: { array: [ 6, 1, 7, 5 ], i: 0, j: 0 },
  history: [
    { line: 1, action: 'declare-variable', details: [Object] },
    { line: 2, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'declare-variable', details: [Object] }
  ],
  functions: { swap: [Function (anonymous)] }
}
Evaluating expression of type: BinaryExpression
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Evaluating expression of type: MemberExpression
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: Literal
Evaluating BinaryExpression: Identifier + Literal
Values: 0 + 1
Evaluating BinaryExpression: MemberExpression > MemberExpression
Values: 6 > 1
Evaluating expression of type: Identifier
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: Literal
Evaluating BinaryExpression: Identifier + Literal
Values: 0 + 1
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Declared variable temp with value: 1
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Declared variable temp with value: 1
Evaluating expression of type: UpdateExpression
Updating loop variable j to  1
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: BinaryExpression
Evaluating expression of type: BinaryExpression
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Evaluating expression of type: Identifier
Evaluating BinaryExpression: MemberExpression - Identifier
Values: 4 - 0
Evaluating expression of type: Literal
Evaluating BinaryExpression: BinaryExpression - Literal
Values: 4 - 1
Evaluating BinaryExpression: Identifier < BinaryExpression
Values: 1 < 3
For loop test condition result: true
Loop test condition is true, entering loop body with context: {
  variables: { array: [ 1, 6, 7, 5 ], i: 0, j: 1, temp: 1 },
  history: [
    { line: 1, action: 'declare-variable', details: [Object] },
    { line: 2, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'declare-variable', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 6, action: 'swap', details: [Object] },
    { line: 7, action: 'swap', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] }
  ],
  functions: { swap: [Function (anonymous)] }
}
Evaluating expression of type: BinaryExpression
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Evaluating expression of type: MemberExpression
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: Literal
Evaluating BinaryExpression: Identifier + Literal
Values: 1 + 1
Evaluating BinaryExpression: MemberExpression > MemberExpression
Values: 6 > 7
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Declared variable temp with value: 6
Evaluating expression of type: UpdateExpression
Updating loop variable j to  2
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: BinaryExpression
Evaluating expression of type: BinaryExpression
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Evaluating expression of type: Identifier
Evaluating BinaryExpression: MemberExpression - Identifier
Values: 4 - 0
Evaluating expression of type: Literal
Evaluating BinaryExpression: BinaryExpression - Literal
Values: 4 - 1
Evaluating BinaryExpression: Identifier < BinaryExpression
Values: 2 < 3
For loop test condition result: true
Loop test condition is true, entering loop body with context: {
  variables: { array: [ 1, 6, 7, 5 ], i: 0, j: 2, temp: 6 },
  history: [
    { line: 1, action: 'declare-variable', details: [Object] },
    { line: 2, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'declare-variable', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 6, action: 'swap', details: [Object] },
    { line: 7, action: 'swap', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] }
  ],
  functions: { swap: [Function (anonymous)] }
}
Evaluating expression of type: BinaryExpression
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Evaluating expression of type: MemberExpression
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: Literal
Evaluating BinaryExpression: Identifier + Literal
Values: 2 + 1
Evaluating BinaryExpression: MemberExpression > MemberExpression
Values: 7 > 5
Evaluating expression of type: Identifier
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: Literal
Evaluating BinaryExpression: Identifier + Literal
Values: 2 + 1
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Declared variable temp with value: 5
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Declared variable temp with value: 5
Evaluating expression of type: UpdateExpression
Updating loop variable j to  3
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: BinaryExpression
Evaluating expression of type: BinaryExpression
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Evaluating expression of type: Identifier
Evaluating BinaryExpression: MemberExpression - Identifier
Values: 4 - 0
Evaluating expression of type: Literal
Evaluating BinaryExpression: BinaryExpression - Literal
Values: 4 - 1
Evaluating BinaryExpression: Identifier < BinaryExpression
Values: 3 < 3
For loop test condition result: false
Loop test condition is false, exiting loop
Evaluating expression of type: UpdateExpression
Updating loop variable i to  1
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Evaluating BinaryExpression: Identifier < MemberExpression
Values: 1 < 4
For loop test condition result: true
Loop test condition is true, entering loop body with context: {
  variables: { array: [ 1, 6, 5, 7 ], i: 1, j: 3, temp: 5 },
  history: [
    { line: 1, action: 'declare-variable', details: [Object] },
    { line: 2, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'declare-variable', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 6, action: 'swap', details: [Object] },
    { line: 7, action: 'swap', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 6, action: 'swap', details: [Object] },
    { line: 7, action: 'swap', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 9, action: 'loop-end', details: null },
    { line: 2, action: 'loop-update', details: [Object] }
  ],
  functions: { swap: [Function (anonymous)] }
}
Entering handleForStatement with node: ForStatement {
  type: 'ForStatement',
  init: VariableDeclaration {
    type: 'VariableDeclaration',
    declarations: [ [VariableDeclarator] ],
    kind: 'var',
    loc: { start: [Object], end: [Object] }
  },
  test: BinaryExpression {
    type: 'BinaryExpression',
    operator: '<',
    left: Identifier { type: 'Identifier', name: 'j', loc: [Object] },
    right: BinaryExpression {
      type: 'BinaryExpression',
      operator: '-',
      left: [BinaryExpression],
      right: [Literal],
      loc: [Object]
    },
    loc: { start: [Object], end: [Object] }
  },
  update: UpdateExpression {
    type: 'UpdateExpression',
    operator: '++',
    argument: Identifier { type: 'Identifier', name: 'j', loc: [Object] },
    prefix: false,
    loc: { start: [Object], end: [Object] }
  },
  body: BlockStatement {
    type: 'BlockStatement',
    body: [ [IfStatement] ],
    loc: { start: [Object], end: [Object] }
  },
  loc: { start: { line: 3, column: 4 }, end: { line: 9, column: 5 } }
}
Evaluating expression of type: Literal
Declared variable j with value: 0
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: BinaryExpression
Evaluating expression of type: BinaryExpression
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Evaluating expression of type: Identifier
Evaluating BinaryExpression: MemberExpression - Identifier
Values: 4 - 1
Evaluating expression of type: Literal
Evaluating BinaryExpression: BinaryExpression - Literal
Values: 3 - 1
Evaluating BinaryExpression: Identifier < BinaryExpression
Values: 0 < 2
For loop test condition result: true
Loop test condition is true, entering loop body with context: {
  variables: { array: [ 1, 6, 5, 7 ], i: 1, j: 0, temp: 5 },
  history: [
    { line: 1, action: 'declare-variable', details: [Object] },
    { line: 2, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'declare-variable', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 6, action: 'swap', details: [Object] },
    { line: 7, action: 'swap', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 6, action: 'swap', details: [Object] },
    { line: 7, action: 'swap', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 9, action: 'loop-end', details: null },
    { line: 2, action: 'loop-update', details: [Object] },
    { line: 3, action: 'declare-variable', details: [Object] }
  ],
  functions: { swap: [Function (anonymous)] }
}
Evaluating expression of type: BinaryExpression
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Evaluating expression of type: MemberExpression
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: Literal
Evaluating BinaryExpression: Identifier + Literal
Values: 0 + 1
Evaluating BinaryExpression: MemberExpression > MemberExpression
Values: 1 > 6
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Declared variable temp with value: 1
Evaluating expression of type: UpdateExpression
Updating loop variable j to  1
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: BinaryExpression
Evaluating expression of type: BinaryExpression
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Evaluating expression of type: Identifier
Evaluating BinaryExpression: MemberExpression - Identifier
Values: 4 - 1
Evaluating expression of type: Literal
Evaluating BinaryExpression: BinaryExpression - Literal
Values: 3 - 1
Evaluating BinaryExpression: Identifier < BinaryExpression
Values: 1 < 2
For loop test condition result: true
Loop test condition is true, entering loop body with context: {
  variables: { array: [ 1, 6, 5, 7 ], i: 1, j: 1, temp: 1 },
  history: [
    { line: 1, action: 'declare-variable', details: [Object] },
    { line: 2, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'declare-variable', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 6, action: 'swap', details: [Object] },
    { line: 7, action: 'swap', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 6, action: 'swap', details: [Object] },
    { line: 7, action: 'swap', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 9, action: 'loop-end', details: null },
    { line: 2, action: 'loop-update', details: [Object] },
    { line: 3, action: 'declare-variable', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] }
  ],
  functions: { swap: [Function (anonymous)] }
}
Evaluating expression of type: BinaryExpression
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Evaluating expression of type: MemberExpression
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: Literal
Evaluating BinaryExpression: Identifier + Literal
Values: 1 + 1
Evaluating BinaryExpression: MemberExpression > MemberExpression
Values: 6 > 5
Evaluating expression of type: Identifier
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: Literal
Evaluating BinaryExpression: Identifier + Literal
Values: 1 + 1
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Declared variable temp with value: 5
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Declared variable temp with value: 5
Evaluating expression of type: UpdateExpression
Updating loop variable j to  2
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: BinaryExpression
Evaluating expression of type: BinaryExpression
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Evaluating expression of type: Identifier
Evaluating BinaryExpression: MemberExpression - Identifier
Values: 4 - 1
Evaluating expression of type: Literal
Evaluating BinaryExpression: BinaryExpression - Literal
Values: 3 - 1
Evaluating BinaryExpression: Identifier < BinaryExpression
Values: 2 < 2
For loop test condition result: false
Loop test condition is false, exiting loop
Evaluating expression of type: UpdateExpression
Updating loop variable i to  2
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Evaluating BinaryExpression: Identifier < MemberExpression
Values: 2 < 4
For loop test condition result: true
Loop test condition is true, entering loop body with context: {
  variables: { array: [ 1, 5, 6, 7 ], i: 2, j: 2, temp: 5 },
  history: [
    { line: 1, action: 'declare-variable', details: [Object] },
    { line: 2, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'declare-variable', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 6, action: 'swap', details: [Object] },
    { line: 7, action: 'swap', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 6, action: 'swap', details: [Object] },
    { line: 7, action: 'swap', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 9, action: 'loop-end', details: null },
    { line: 2, action: 'loop-update', details: [Object] },
    { line: 3, action: 'declare-variable', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 6, action: 'swap', details: [Object] },
    { line: 7, action: 'swap', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 9, action: 'loop-end', details: null },
    { line: 2, action: 'loop-update', details: [Object] }
  ],
  functions: { swap: [Function (anonymous)] }
}
Entering handleForStatement with node: ForStatement {
  type: 'ForStatement',
  init: VariableDeclaration {
    type: 'VariableDeclaration',
    declarations: [ [VariableDeclarator] ],
    kind: 'var',
    loc: { start: [Object], end: [Object] }
  },
  test: BinaryExpression {
    type: 'BinaryExpression',
    operator: '<',
    left: Identifier { type: 'Identifier', name: 'j', loc: [Object] },
    right: BinaryExpression {
      type: 'BinaryExpression',
      operator: '-',
      left: [BinaryExpression],
      right: [Literal],
      loc: [Object]
    },
    loc: { start: [Object], end: [Object] }
  },
  update: UpdateExpression {
    type: 'UpdateExpression',
    operator: '++',
    argument: Identifier { type: 'Identifier', name: 'j', loc: [Object] },
    prefix: false,
    loc: { start: [Object], end: [Object] }
  },
  body: BlockStatement {
    type: 'BlockStatement',
    body: [ [IfStatement] ],
    loc: { start: [Object], end: [Object] }
  },
  loc: { start: { line: 3, column: 4 }, end: { line: 9, column: 5 } }
}
Evaluating expression of type: Literal
Declared variable j with value: 0
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: BinaryExpression
Evaluating expression of type: BinaryExpression
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Evaluating expression of type: Identifier
Evaluating BinaryExpression: MemberExpression - Identifier
Values: 4 - 2
Evaluating expression of type: Literal
Evaluating BinaryExpression: BinaryExpression - Literal
Values: 2 - 1
Evaluating BinaryExpression: Identifier < BinaryExpression
Values: 0 < 1
For loop test condition result: true
Loop test condition is true, entering loop body with context: {
  variables: { array: [ 1, 5, 6, 7 ], i: 2, j: 0, temp: 5 },
  history: [
    { line: 1, action: 'declare-variable', details: [Object] },
    { line: 2, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'declare-variable', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 6, action: 'swap', details: [Object] },
    { line: 7, action: 'swap', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 6, action: 'swap', details: [Object] },
    { line: 7, action: 'swap', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 9, action: 'loop-end', details: null },
    { line: 2, action: 'loop-update', details: [Object] },
    { line: 3, action: 'declare-variable', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 6, action: 'swap', details: [Object] },
    { line: 7, action: 'swap', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 9, action: 'loop-end', details: null },
    { line: 2, action: 'loop-update', details: [Object] },
    { line: 3, action: 'declare-variable', details: [Object] }
  ],
  functions: { swap: [Function (anonymous)] }
}
Evaluating expression of type: BinaryExpression
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Evaluating expression of type: MemberExpression
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: Literal
Evaluating BinaryExpression: Identifier + Literal
Values: 0 + 1
Evaluating BinaryExpression: MemberExpression > MemberExpression
Values: 1 > 5
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Declared variable temp with value: 1
Evaluating expression of type: UpdateExpression
Updating loop variable j to  1
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: BinaryExpression
Evaluating expression of type: BinaryExpression
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Evaluating expression of type: Identifier
Evaluating BinaryExpression: MemberExpression - Identifier
Values: 4 - 2
Evaluating expression of type: Literal
Evaluating BinaryExpression: BinaryExpression - Literal
Values: 2 - 1
Evaluating BinaryExpression: Identifier < BinaryExpression
Values: 1 < 1
For loop test condition result: false
Loop test condition is false, exiting loop
Evaluating expression of type: UpdateExpression
Updating loop variable i to  3
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Evaluating BinaryExpression: Identifier < MemberExpression
Values: 3 < 4
For loop test condition result: true
Loop test condition is true, entering loop body with context: {
  variables: { array: [ 1, 5, 6, 7 ], i: 3, j: 1, temp: 1 },
  history: [
    { line: 1, action: 'declare-variable', details: [Object] },
    { line: 2, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'declare-variable', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 6, action: 'swap', details: [Object] },
    { line: 7, action: 'swap', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 6, action: 'swap', details: [Object] },
    { line: 7, action: 'swap', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 9, action: 'loop-end', details: null },
    { line: 2, action: 'loop-update', details: [Object] },
    { line: 3, action: 'declare-variable', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 6, action: 'swap', details: [Object] },
    { line: 7, action: 'swap', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 9, action: 'loop-end', details: null },
    { line: 2, action: 'loop-update', details: [Object] },
    { line: 3, action: 'declare-variable', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 9, action: 'loop-end', details: null },
    { line: 2, action: 'loop-update', details: [Object] }
  ],
  functions: { swap: [Function (anonymous)] }
}
Entering handleForStatement with node: ForStatement {
  type: 'ForStatement',
  init: VariableDeclaration {
    type: 'VariableDeclaration',
    declarations: [ [VariableDeclarator] ],
    kind: 'var',
    loc: { start: [Object], end: [Object] }
  },
  test: BinaryExpression {
    type: 'BinaryExpression',
    operator: '<',
    left: Identifier { type: 'Identifier', name: 'j', loc: [Object] },
    right: BinaryExpression {
      type: 'BinaryExpression',
      operator: '-',
      left: [BinaryExpression],
      right: [Literal],
      loc: [Object]
    },
    loc: { start: [Object], end: [Object] }
  },
  update: UpdateExpression {
    type: 'UpdateExpression',
    operator: '++',
    argument: Identifier { type: 'Identifier', name: 'j', loc: [Object] },
    prefix: false,
    loc: { start: [Object], end: [Object] }
  },
  body: BlockStatement {
    type: 'BlockStatement',
    body: [ [IfStatement] ],
    loc: { start: [Object], end: [Object] }
  },
  loc: { start: { line: 3, column: 4 }, end: { line: 9, column: 5 } }
}
Evaluating expression of type: Literal
Declared variable j with value: 0
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: BinaryExpression
Evaluating expression of type: BinaryExpression
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Evaluating expression of type: Identifier
Evaluating BinaryExpression: MemberExpression - Identifier
Values: 4 - 3
Evaluating expression of type: Literal
Evaluating BinaryExpression: BinaryExpression - Literal
Values: 1 - 1
Evaluating BinaryExpression: Identifier < BinaryExpression
Values: 0 < 0
For loop test condition result: false
Loop test condition is false, exiting loop
Evaluating expression of type: UpdateExpression
Updating loop variable i to  4
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Evaluating BinaryExpression: Identifier < MemberExpression
Values: 4 < 4
For loop test condition result: false
Loop test condition is false, exiting loop
Evaluating expression of type: ArrayExpression
Evaluating expression of type: Literal
Evaluating expression of type: Literal
Evaluating expression of type: Literal
Evaluating expression of type: Literal
Declared variable array with value: [ 6, 1, 7, 5 ]
Entering handleForStatement with node: ForStatement {
  type: 'ForStatement',
  init: VariableDeclaration {
    type: 'VariableDeclaration',
    declarations: [ [VariableDeclarator] ],
    kind: 'var',
    loc: { start: [Object], end: [Object] }
  },
  test: BinaryExpression {
    type: 'BinaryExpression',
    operator: '<',
    left: Identifier { type: 'Identifier', name: 'i', loc: [Object] },
    right: StaticMemberExpression {
      type: 'MemberExpression',
      computed: false,
      object: [Identifier],
      property: [Identifier],
      loc: [Object]
    },
    loc: { start: [Object], end: [Object] }
  },
  update: UpdateExpression {
    type: 'UpdateExpression',
    operator: '++',
    argument: Identifier { type: 'Identifier', name: 'i', loc: [Object] },
    prefix: false,
    loc: { start: [Object], end: [Object] }
  },
  body: BlockStatement {
    type: 'BlockStatement',
    body: [ [ForStatement] ],
    loc: { start: [Object], end: [Object] }
  },
  loc: { start: { line: 2, column: 0 }, end: { line: 10, column: 1 } }
}
Evaluating expression of type: Literal
Declared variable i with value: 0
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Evaluating BinaryExpression: Identifier < MemberExpression
Values: 0 < 4
For loop test condition result: true
Loop test condition is true, entering loop body with context: {
  variables: { array: [ 6, 1, 7, 5 ], i: 0 },
  history: [
    { line: 1, action: 'declare-variable', details: [Object] },
    { line: 2, action: 'declare-variable', details: [Object] }
  ],
  functions: { swap: [Function (anonymous)] }
}
Entering handleForStatement with node: ForStatement {
  type: 'ForStatement',
  init: VariableDeclaration {
    type: 'VariableDeclaration',
    declarations: [ [VariableDeclarator] ],
    kind: 'var',
    loc: { start: [Object], end: [Object] }
  },
  test: BinaryExpression {
    type: 'BinaryExpression',
    operator: '<',
    left: Identifier { type: 'Identifier', name: 'j', loc: [Object] },
    right: BinaryExpression {
      type: 'BinaryExpression',
      operator: '-',
      left: [BinaryExpression],
      right: [Literal],
      loc: [Object]
    },
    loc: { start: [Object], end: [Object] }
  },
  update: UpdateExpression {
    type: 'UpdateExpression',
    operator: '++',
    argument: Identifier { type: 'Identifier', name: 'j', loc: [Object] },
    prefix: false,
    loc: { start: [Object], end: [Object] }
  },
  body: BlockStatement {
    type: 'BlockStatement',
    body: [ [IfStatement] ],
    loc: { start: [Object], end: [Object] }
  },
  loc: { start: { line: 3, column: 4 }, end: { line: 9, column: 5 } }
}
Evaluating expression of type: Literal
Declared variable j with value: 0
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: BinaryExpression
Evaluating expression of type: BinaryExpression
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Evaluating expression of type: Identifier
Evaluating BinaryExpression: MemberExpression - Identifier
Values: 4 - 0
Evaluating expression of type: Literal
Evaluating BinaryExpression: BinaryExpression - Literal
Values: 4 - 1
Evaluating BinaryExpression: Identifier < BinaryExpression
Values: 0 < 3
For loop test condition result: true
Loop test condition is true, entering loop body with context: {
  variables: { array: [ 6, 1, 7, 5 ], i: 0, j: 0 },
  history: [
    { line: 1, action: 'declare-variable', details: [Object] },
    { line: 2, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'declare-variable', details: [Object] }
  ],
  functions: { swap: [Function (anonymous)] }
}
Evaluating expression of type: BinaryExpression
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Evaluating expression of type: MemberExpression
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: Literal
Evaluating BinaryExpression: Identifier + Literal
Values: 0 + 1
Evaluating BinaryExpression: MemberExpression > MemberExpression
Values: 6 > 1
Evaluating expression of type: Identifier
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: Literal
Evaluating BinaryExpression: Identifier + Literal
Values: 0 + 1
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Declared variable temp with value: 1
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Declared variable temp with value: 1
Evaluating expression of type: UpdateExpression
Updating loop variable j to  1
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: BinaryExpression
Evaluating expression of type: BinaryExpression
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Evaluating expression of type: Identifier
Evaluating BinaryExpression: MemberExpression - Identifier
Values: 4 - 0
Evaluating expression of type: Literal
Evaluating BinaryExpression: BinaryExpression - Literal
Values: 4 - 1
Evaluating BinaryExpression: Identifier < BinaryExpression
Values: 1 < 3
For loop test condition result: true
Loop test condition is true, entering loop body with context: {
  variables: { array: [ 1, 6, 7, 5 ], i: 0, j: 1, temp: 1 },
  history: [
    { line: 1, action: 'declare-variable', details: [Object] },
    { line: 2, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'declare-variable', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 6, action: 'swap', details: [Object] },
    { line: 7, action: 'swap', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] }
  ],
  functions: { swap: [Function (anonymous)] }
}
Evaluating expression of type: BinaryExpression
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Evaluating expression of type: MemberExpression
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: Literal
Evaluating BinaryExpression: Identifier + Literal
Values: 1 + 1
Evaluating BinaryExpression: MemberExpression > MemberExpression
Values: 6 > 7
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Declared variable temp with value: 6
Evaluating expression of type: UpdateExpression
Updating loop variable j to  2
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: BinaryExpression
Evaluating expression of type: BinaryExpression
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Evaluating expression of type: Identifier
Evaluating BinaryExpression: MemberExpression - Identifier
Values: 4 - 0
Evaluating expression of type: Literal
Evaluating BinaryExpression: BinaryExpression - Literal
Values: 4 - 1
Evaluating BinaryExpression: Identifier < BinaryExpression
Values: 2 < 3
For loop test condition result: true
Loop test condition is true, entering loop body with context: {
  variables: { array: [ 1, 6, 7, 5 ], i: 0, j: 2, temp: 6 },
  history: [
    { line: 1, action: 'declare-variable', details: [Object] },
    { line: 2, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'declare-variable', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 6, action: 'swap', details: [Object] },
    { line: 7, action: 'swap', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] }
  ],
  functions: { swap: [Function (anonymous)] }
}
Evaluating expression of type: BinaryExpression
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Evaluating expression of type: MemberExpression
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: Literal
Evaluating BinaryExpression: Identifier + Literal
Values: 2 + 1
Evaluating BinaryExpression: MemberExpression > MemberExpression
Values: 7 > 5
Evaluating expression of type: Identifier
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: Literal
Evaluating BinaryExpression: Identifier + Literal
Values: 2 + 1
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Declared variable temp with value: 5
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Declared variable temp with value: 5
Evaluating expression of type: UpdateExpression
Updating loop variable j to  3
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: BinaryExpression
Evaluating expression of type: BinaryExpression
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Evaluating expression of type: Identifier
Evaluating BinaryExpression: MemberExpression - Identifier
Values: 4 - 0
Evaluating expression of type: Literal
Evaluating BinaryExpression: BinaryExpression - Literal
Values: 4 - 1
Evaluating BinaryExpression: Identifier < BinaryExpression
Values: 3 < 3
For loop test condition result: false
Loop test condition is false, exiting loop
Evaluating expression of type: UpdateExpression
Updating loop variable i to  1
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Evaluating BinaryExpression: Identifier < MemberExpression
Values: 1 < 4
For loop test condition result: true
Loop test condition is true, entering loop body with context: {
  variables: { array: [ 1, 6, 5, 7 ], i: 1, j: 3, temp: 5 },
  history: [
    { line: 1, action: 'declare-variable', details: [Object] },
    { line: 2, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'declare-variable', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 6, action: 'swap', details: [Object] },
    { line: 7, action: 'swap', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 6, action: 'swap', details: [Object] },
    { line: 7, action: 'swap', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 9, action: 'loop-end', details: null },
    { line: 2, action: 'loop-update', details: [Object] }
  ],
  functions: { swap: [Function (anonymous)] }
}
Entering handleForStatement with node: ForStatement {
  type: 'ForStatement',
  init: VariableDeclaration {
    type: 'VariableDeclaration',
    declarations: [ [VariableDeclarator] ],
    kind: 'var',
    loc: { start: [Object], end: [Object] }
  },
  test: BinaryExpression {
    type: 'BinaryExpression',
    operator: '<',
    left: Identifier { type: 'Identifier', name: 'j', loc: [Object] },
    right: BinaryExpression {
      type: 'BinaryExpression',
      operator: '-',
      left: [BinaryExpression],
      right: [Literal],
      loc: [Object]
    },
    loc: { start: [Object], end: [Object] }
  },
  update: UpdateExpression {
    type: 'UpdateExpression',
    operator: '++',
    argument: Identifier { type: 'Identifier', name: 'j', loc: [Object] },
    prefix: false,
    loc: { start: [Object], end: [Object] }
  },
  body: BlockStatement {
    type: 'BlockStatement',
    body: [ [IfStatement] ],
    loc: { start: [Object], end: [Object] }
  },
  loc: { start: { line: 3, column: 4 }, end: { line: 9, column: 5 } }
}
Evaluating expression of type: Literal
Declared variable j with value: 0
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: BinaryExpression
Evaluating expression of type: BinaryExpression
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Evaluating expression of type: Identifier
Evaluating BinaryExpression: MemberExpression - Identifier
Values: 4 - 1
Evaluating expression of type: Literal
Evaluating BinaryExpression: BinaryExpression - Literal
Values: 3 - 1
Evaluating BinaryExpression: Identifier < BinaryExpression
Values: 0 < 2
For loop test condition result: true
Loop test condition is true, entering loop body with context: {
  variables: { array: [ 1, 6, 5, 7 ], i: 1, j: 0, temp: 5 },
  history: [
    { line: 1, action: 'declare-variable', details: [Object] },
    { line: 2, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'declare-variable', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 6, action: 'swap', details: [Object] },
    { line: 7, action: 'swap', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 6, action: 'swap', details: [Object] },
    { line: 7, action: 'swap', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 9, action: 'loop-end', details: null },
    { line: 2, action: 'loop-update', details: [Object] },
    { line: 3, action: 'declare-variable', details: [Object] }
  ],
  functions: { swap: [Function (anonymous)] }
}
Evaluating expression of type: BinaryExpression
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Evaluating expression of type: MemberExpression
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: Literal
Evaluating BinaryExpression: Identifier + Literal
Values: 0 + 1
Evaluating BinaryExpression: MemberExpression > MemberExpression
Values: 1 > 6
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Declared variable temp with value: 1
Evaluating expression of type: UpdateExpression
Updating loop variable j to  1
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: BinaryExpression
Evaluating expression of type: BinaryExpression
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Evaluating expression of type: Identifier
Evaluating BinaryExpression: MemberExpression - Identifier
Values: 4 - 1
Evaluating expression of type: Literal
Evaluating BinaryExpression: BinaryExpression - Literal
Values: 3 - 1
Evaluating BinaryExpression: Identifier < BinaryExpression
Values: 1 < 2
For loop test condition result: true
Loop test condition is true, entering loop body with context: {
  variables: { array: [ 1, 6, 5, 7 ], i: 1, j: 1, temp: 1 },
  history: [
    { line: 1, action: 'declare-variable', details: [Object] },
    { line: 2, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'declare-variable', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 6, action: 'swap', details: [Object] },
    { line: 7, action: 'swap', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 6, action: 'swap', details: [Object] },
    { line: 7, action: 'swap', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 9, action: 'loop-end', details: null },
    { line: 2, action: 'loop-update', details: [Object] },
    { line: 3, action: 'declare-variable', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] }
  ],
  functions: { swap: [Function (anonymous)] }
}
Evaluating expression of type: BinaryExpression
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Evaluating expression of type: MemberExpression
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: Literal
Evaluating BinaryExpression: Identifier + Literal
Values: 1 + 1
Evaluating BinaryExpression: MemberExpression > MemberExpression
Values: 6 > 5
Evaluating expression of type: Identifier
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: Literal
Evaluating BinaryExpression: Identifier + Literal
Values: 1 + 1
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Declared variable temp with value: 5
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Declared variable temp with value: 5
Evaluating expression of type: UpdateExpression
Updating loop variable j to  2
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: BinaryExpression
Evaluating expression of type: BinaryExpression
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Evaluating expression of type: Identifier
Evaluating BinaryExpression: MemberExpression - Identifier
Values: 4 - 1
Evaluating expression of type: Literal
Evaluating BinaryExpression: BinaryExpression - Literal
Values: 3 - 1
Evaluating BinaryExpression: Identifier < BinaryExpression
Values: 2 < 2
For loop test condition result: false
Loop test condition is false, exiting loop
Evaluating expression of type: UpdateExpression
Updating loop variable i to  2
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Evaluating BinaryExpression: Identifier < MemberExpression
Values: 2 < 4
For loop test condition result: true
Loop test condition is true, entering loop body with context: {
  variables: { array: [ 1, 5, 6, 7 ], i: 2, j: 2, temp: 5 },
  history: [
    { line: 1, action: 'declare-variable', details: [Object] },
    { line: 2, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'declare-variable', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 6, action: 'swap', details: [Object] },
    { line: 7, action: 'swap', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 6, action: 'swap', details: [Object] },
    { line: 7, action: 'swap', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 9, action: 'loop-end', details: null },
    { line: 2, action: 'loop-update', details: [Object] },
    { line: 3, action: 'declare-variable', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 6, action: 'swap', details: [Object] },
    { line: 7, action: 'swap', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 9, action: 'loop-end', details: null },
    { line: 2, action: 'loop-update', details: [Object] }
  ],
  functions: { swap: [Function (anonymous)] }
}
Entering handleForStatement with node: ForStatement {
  type: 'ForStatement',
  init: VariableDeclaration {
    type: 'VariableDeclaration',
    declarations: [ [VariableDeclarator] ],
    kind: 'var',
    loc: { start: [Object], end: [Object] }
  },
  test: BinaryExpression {
    type: 'BinaryExpression',
    operator: '<',
    left: Identifier { type: 'Identifier', name: 'j', loc: [Object] },
    right: BinaryExpression {
      type: 'BinaryExpression',
      operator: '-',
      left: [BinaryExpression],
      right: [Literal],
      loc: [Object]
    },
    loc: { start: [Object], end: [Object] }
  },
  update: UpdateExpression {
    type: 'UpdateExpression',
    operator: '++',
    argument: Identifier { type: 'Identifier', name: 'j', loc: [Object] },
    prefix: false,
    loc: { start: [Object], end: [Object] }
  },
  body: BlockStatement {
    type: 'BlockStatement',
    body: [ [IfStatement] ],
    loc: { start: [Object], end: [Object] }
  },
  loc: { start: { line: 3, column: 4 }, end: { line: 9, column: 5 } }
}
Evaluating expression of type: Literal
Declared variable j with value: 0
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: BinaryExpression
Evaluating expression of type: BinaryExpression
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Evaluating expression of type: Identifier
Evaluating BinaryExpression: MemberExpression - Identifier
Values: 4 - 2
Evaluating expression of type: Literal
Evaluating BinaryExpression: BinaryExpression - Literal
Values: 2 - 1
Evaluating BinaryExpression: Identifier < BinaryExpression
Values: 0 < 1
For loop test condition result: true
Loop test condition is true, entering loop body with context: {
  variables: { array: [ 1, 5, 6, 7 ], i: 2, j: 0, temp: 5 },
  history: [
    { line: 1, action: 'declare-variable', details: [Object] },
    { line: 2, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'declare-variable', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 6, action: 'swap', details: [Object] },
    { line: 7, action: 'swap', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 6, action: 'swap', details: [Object] },
    { line: 7, action: 'swap', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 9, action: 'loop-end', details: null },
    { line: 2, action: 'loop-update', details: [Object] },
    { line: 3, action: 'declare-variable', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 6, action: 'swap', details: [Object] },
    { line: 7, action: 'swap', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 9, action: 'loop-end', details: null },
    { line: 2, action: 'loop-update', details: [Object] },
    { line: 3, action: 'declare-variable', details: [Object] }
  ],
  functions: { swap: [Function (anonymous)] }
}
Evaluating expression of type: BinaryExpression
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Evaluating expression of type: MemberExpression
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: Literal
Evaluating BinaryExpression: Identifier + Literal
Values: 0 + 1
Evaluating BinaryExpression: MemberExpression > MemberExpression
Values: 1 > 5
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Declared variable temp with value: 1
Evaluating expression of type: UpdateExpression
Updating loop variable j to  1
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: BinaryExpression
Evaluating expression of type: BinaryExpression
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Evaluating expression of type: Identifier
Evaluating BinaryExpression: MemberExpression - Identifier
Values: 4 - 2
Evaluating expression of type: Literal
Evaluating BinaryExpression: BinaryExpression - Literal
Values: 2 - 1
Evaluating BinaryExpression: Identifier < BinaryExpression
Values: 1 < 1
For loop test condition result: false
Loop test condition is false, exiting loop
Evaluating expression of type: UpdateExpression
Updating loop variable i to  3
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Evaluating BinaryExpression: Identifier < MemberExpression
Values: 3 < 4
For loop test condition result: true
Loop test condition is true, entering loop body with context: {
  variables: { array: [ 1, 5, 6, 7 ], i: 3, j: 1, temp: 1 },
  history: [
    { line: 1, action: 'declare-variable', details: [Object] },
    { line: 2, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'declare-variable', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 6, action: 'swap', details: [Object] },
    { line: 7, action: 'swap', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 6, action: 'swap', details: [Object] },
    { line: 7, action: 'swap', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 9, action: 'loop-end', details: null },
    { line: 2, action: 'loop-update', details: [Object] },
    { line: 3, action: 'declare-variable', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 6, action: 'swap', details: [Object] },
    { line: 7, action: 'swap', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 9, action: 'loop-end', details: null },
    { line: 2, action: 'loop-update', details: [Object] },
    { line: 3, action: 'declare-variable', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 9, action: 'loop-end', details: null },
    { line: 2, action: 'loop-update', details: [Object] }
  ],
  functions: { swap: [Function (anonymous)] }
}
Entering handleForStatement with node: ForStatement {
  type: 'ForStatement',
  init: VariableDeclaration {
    type: 'VariableDeclaration',
    declarations: [ [VariableDeclarator] ],
    kind: 'var',
    loc: { start: [Object], end: [Object] }
  },
  test: BinaryExpression {
    type: 'BinaryExpression',
    operator: '<',
    left: Identifier { type: 'Identifier', name: 'j', loc: [Object] },
    right: BinaryExpression {
      type: 'BinaryExpression',
      operator: '-',
      left: [BinaryExpression],
      right: [Literal],
      loc: [Object]
    },
    loc: { start: [Object], end: [Object] }
  },
  update: UpdateExpression {
    type: 'UpdateExpression',
    operator: '++',
    argument: Identifier { type: 'Identifier', name: 'j', loc: [Object] },
    prefix: false,
    loc: { start: [Object], end: [Object] }
  },
  body: BlockStatement {
    type: 'BlockStatement',
    body: [ [IfStatement] ],
    loc: { start: [Object], end: [Object] }
  },
  loc: { start: { line: 3, column: 4 }, end: { line: 9, column: 5 } }
}
Evaluating expression of type: Literal
Declared variable j with value: 0
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: BinaryExpression
Evaluating expression of type: BinaryExpression
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Evaluating expression of type: Identifier
Evaluating BinaryExpression: MemberExpression - Identifier
Values: 4 - 3
Evaluating expression of type: Literal
Evaluating BinaryExpression: BinaryExpression - Literal
Values: 1 - 1
Evaluating BinaryExpression: Identifier < BinaryExpression
Values: 0 < 0
For loop test condition result: false
Loop test condition is false, exiting loop
Evaluating expression of type: UpdateExpression
Updating loop variable i to  4
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Evaluating BinaryExpression: Identifier < MemberExpression
Values: 4 < 4
For loop test condition result: false
Loop test condition is false, exiting loop
Evaluating expression of type: ArrayExpression
Evaluating expression of type: Literal
Evaluating expression of type: Literal
Evaluating expression of type: Literal
Evaluating expression of type: Literal
Declared variable array with value: [ 6, 1, 7, 5 ]
Entering handleForStatement with node: ForStatement {
  type: 'ForStatement',
  init: VariableDeclaration {
    type: 'VariableDeclaration',
    declarations: [ [VariableDeclarator] ],
    kind: 'var',
    loc: { start: [Object], end: [Object] }
  },
  test: BinaryExpression {
    type: 'BinaryExpression',
    operator: '<',
    left: Identifier { type: 'Identifier', name: 'i', loc: [Object] },
    right: StaticMemberExpression {
      type: 'MemberExpression',
      computed: false,
      object: [Identifier],
      property: [Identifier],
      loc: [Object]
    },
    loc: { start: [Object], end: [Object] }
  },
  update: UpdateExpression {
    type: 'UpdateExpression',
    operator: '++',
    argument: Identifier { type: 'Identifier', name: 'i', loc: [Object] },
    prefix: false,
    loc: { start: [Object], end: [Object] }
  },
  body: BlockStatement {
    type: 'BlockStatement',
    body: [ [ForStatement] ],
    loc: { start: [Object], end: [Object] }
  },
  loc: { start: { line: 2, column: 0 }, end: { line: 10, column: 1 } }
}
Evaluating expression of type: Literal
Declared variable i with value: 0
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Evaluating BinaryExpression: Identifier < MemberExpression
Values: 0 < 4
For loop test condition result: true
Loop test condition is true, entering loop body with context: {
  variables: { array: [ 6, 1, 7, 5 ], i: 0 },
  history: [
    { line: 1, action: 'declare-variable', details: [Object] },
    { line: 2, action: 'declare-variable', details: [Object] }
  ],
  functions: { swap: [Function (anonymous)] }
}
Entering handleForStatement with node: ForStatement {
  type: 'ForStatement',
  init: VariableDeclaration {
    type: 'VariableDeclaration',
    declarations: [ [VariableDeclarator] ],
    kind: 'var',
    loc: { start: [Object], end: [Object] }
  },
  test: BinaryExpression {
    type: 'BinaryExpression',
    operator: '<',
    left: Identifier { type: 'Identifier', name: 'j', loc: [Object] },
    right: BinaryExpression {
      type: 'BinaryExpression',
      operator: '-',
      left: [BinaryExpression],
      right: [Literal],
      loc: [Object]
    },
    loc: { start: [Object], end: [Object] }
  },
  update: UpdateExpression {
    type: 'UpdateExpression',
    operator: '++',
    argument: Identifier { type: 'Identifier', name: 'j', loc: [Object] },
    prefix: false,
    loc: { start: [Object], end: [Object] }
  },
  body: BlockStatement {
    type: 'BlockStatement',
    body: [ [IfStatement] ],
    loc: { start: [Object], end: [Object] }
  },
  loc: { start: { line: 3, column: 4 }, end: { line: 9, column: 5 } }
}
Evaluating expression of type: Literal
Declared variable j with value: 0
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: BinaryExpression
Evaluating expression of type: BinaryExpression
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Evaluating expression of type: Identifier
Evaluating BinaryExpression: MemberExpression - Identifier
Values: 4 - 0
Evaluating expression of type: Literal
Evaluating BinaryExpression: BinaryExpression - Literal
Values: 4 - 1
Evaluating BinaryExpression: Identifier < BinaryExpression
Values: 0 < 3
For loop test condition result: true
Loop test condition is true, entering loop body with context: {
  variables: { array: [ 6, 1, 7, 5 ], i: 0, j: 0 },
  history: [
    { line: 1, action: 'declare-variable', details: [Object] },
    { line: 2, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'declare-variable', details: [Object] }
  ],
  functions: { swap: [Function (anonymous)] }
}
Evaluating expression of type: BinaryExpression
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Evaluating expression of type: MemberExpression
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: Literal
Evaluating BinaryExpression: Identifier + Literal
Values: 0 + 1
Evaluating BinaryExpression: MemberExpression > MemberExpression
Values: 6 > 1
Evaluating expression of type: Identifier
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: Literal
Evaluating BinaryExpression: Identifier + Literal
Values: 0 + 1
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Declared variable temp with value: 1
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Declared variable temp with value: 1
Evaluating expression of type: UpdateExpression
Updating loop variable j to  1
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: BinaryExpression
Evaluating expression of type: BinaryExpression
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Evaluating expression of type: Identifier
Evaluating BinaryExpression: MemberExpression - Identifier
Values: 4 - 0
Evaluating expression of type: Literal
Evaluating BinaryExpression: BinaryExpression - Literal
Values: 4 - 1
Evaluating BinaryExpression: Identifier < BinaryExpression
Values: 1 < 3
For loop test condition result: true
Loop test condition is true, entering loop body with context: {
  variables: { array: [ 1, 6, 7, 5 ], i: 0, j: 1, temp: 1 },
  history: [
    { line: 1, action: 'declare-variable', details: [Object] },
    { line: 2, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'declare-variable', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 6, action: 'swap', details: [Object] },
    { line: 7, action: 'swap', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] }
  ],
  functions: { swap: [Function (anonymous)] }
}
Evaluating expression of type: BinaryExpression
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Evaluating expression of type: MemberExpression
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: Literal
Evaluating BinaryExpression: Identifier + Literal
Values: 1 + 1
Evaluating BinaryExpression: MemberExpression > MemberExpression
Values: 6 > 7
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Declared variable temp with value: 6
Evaluating expression of type: UpdateExpression
Updating loop variable j to  2
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: BinaryExpression
Evaluating expression of type: BinaryExpression
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Evaluating expression of type: Identifier
Evaluating BinaryExpression: MemberExpression - Identifier
Values: 4 - 0
Evaluating expression of type: Literal
Evaluating BinaryExpression: BinaryExpression - Literal
Values: 4 - 1
Evaluating BinaryExpression: Identifier < BinaryExpression
Values: 2 < 3
For loop test condition result: true
Loop test condition is true, entering loop body with context: {
  variables: { array: [ 1, 6, 7, 5 ], i: 0, j: 2, temp: 6 },
  history: [
    { line: 1, action: 'declare-variable', details: [Object] },
    { line: 2, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'declare-variable', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 6, action: 'swap', details: [Object] },
    { line: 7, action: 'swap', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] }
  ],
  functions: { swap: [Function (anonymous)] }
}
Evaluating expression of type: BinaryExpression
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Evaluating expression of type: MemberExpression
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: Literal
Evaluating BinaryExpression: Identifier + Literal
Values: 2 + 1
Evaluating BinaryExpression: MemberExpression > MemberExpression
Values: 7 > 5
Evaluating expression of type: Identifier
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: Literal
Evaluating BinaryExpression: Identifier + Literal
Values: 2 + 1
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Declared variable temp with value: 5
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Declared variable temp with value: 5
Evaluating expression of type: UpdateExpression
Updating loop variable j to  3
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: BinaryExpression
Evaluating expression of type: BinaryExpression
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Evaluating expression of type: Identifier
Evaluating BinaryExpression: MemberExpression - Identifier
Values: 4 - 0
Evaluating expression of type: Literal
Evaluating BinaryExpression: BinaryExpression - Literal
Values: 4 - 1
Evaluating BinaryExpression: Identifier < BinaryExpression
Values: 3 < 3
For loop test condition result: false
Loop test condition is false, exiting loop
Evaluating expression of type: UpdateExpression
Updating loop variable i to  1
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Evaluating BinaryExpression: Identifier < MemberExpression
Values: 1 < 4
For loop test condition result: true
Loop test condition is true, entering loop body with context: {
  variables: { array: [ 1, 6, 5, 7 ], i: 1, j: 3, temp: 5 },
  history: [
    { line: 1, action: 'declare-variable', details: [Object] },
    { line: 2, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'declare-variable', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 6, action: 'swap', details: [Object] },
    { line: 7, action: 'swap', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 6, action: 'swap', details: [Object] },
    { line: 7, action: 'swap', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 9, action: 'loop-end', details: null },
    { line: 2, action: 'loop-update', details: [Object] }
  ],
  functions: { swap: [Function (anonymous)] }
}
Entering handleForStatement with node: ForStatement {
  type: 'ForStatement',
  init: VariableDeclaration {
    type: 'VariableDeclaration',
    declarations: [ [VariableDeclarator] ],
    kind: 'var',
    loc: { start: [Object], end: [Object] }
  },
  test: BinaryExpression {
    type: 'BinaryExpression',
    operator: '<',
    left: Identifier { type: 'Identifier', name: 'j', loc: [Object] },
    right: BinaryExpression {
      type: 'BinaryExpression',
      operator: '-',
      left: [BinaryExpression],
      right: [Literal],
      loc: [Object]
    },
    loc: { start: [Object], end: [Object] }
  },
  update: UpdateExpression {
    type: 'UpdateExpression',
    operator: '++',
    argument: Identifier { type: 'Identifier', name: 'j', loc: [Object] },
    prefix: false,
    loc: { start: [Object], end: [Object] }
  },
  body: BlockStatement {
    type: 'BlockStatement',
    body: [ [IfStatement] ],
    loc: { start: [Object], end: [Object] }
  },
  loc: { start: { line: 3, column: 4 }, end: { line: 9, column: 5 } }
}
Evaluating expression of type: Literal
Declared variable j with value: 0
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: BinaryExpression
Evaluating expression of type: BinaryExpression
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Evaluating expression of type: Identifier
Evaluating BinaryExpression: MemberExpression - Identifier
Values: 4 - 1
Evaluating expression of type: Literal
Evaluating BinaryExpression: BinaryExpression - Literal
Values: 3 - 1
Evaluating BinaryExpression: Identifier < BinaryExpression
Values: 0 < 2
For loop test condition result: true
Loop test condition is true, entering loop body with context: {
  variables: { array: [ 1, 6, 5, 7 ], i: 1, j: 0, temp: 5 },
  history: [
    { line: 1, action: 'declare-variable', details: [Object] },
    { line: 2, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'declare-variable', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 6, action: 'swap', details: [Object] },
    { line: 7, action: 'swap', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 6, action: 'swap', details: [Object] },
    { line: 7, action: 'swap', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 9, action: 'loop-end', details: null },
    { line: 2, action: 'loop-update', details: [Object] },
    { line: 3, action: 'declare-variable', details: [Object] }
  ],
  functions: { swap: [Function (anonymous)] }
}
Evaluating expression of type: BinaryExpression
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Evaluating expression of type: MemberExpression
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: Literal
Evaluating BinaryExpression: Identifier + Literal
Values: 0 + 1
Evaluating BinaryExpression: MemberExpression > MemberExpression
Values: 1 > 6
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Declared variable temp with value: 1
Evaluating expression of type: UpdateExpression
Updating loop variable j to  1
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: BinaryExpression
Evaluating expression of type: BinaryExpression
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Evaluating expression of type: Identifier
Evaluating BinaryExpression: MemberExpression - Identifier
Values: 4 - 1
Evaluating expression of type: Literal
Evaluating BinaryExpression: BinaryExpression - Literal
Values: 3 - 1
Evaluating BinaryExpression: Identifier < BinaryExpression
Values: 1 < 2
For loop test condition result: true
Loop test condition is true, entering loop body with context: {
  variables: { array: [ 1, 6, 5, 7 ], i: 1, j: 1, temp: 1 },
  history: [
    { line: 1, action: 'declare-variable', details: [Object] },
    { line: 2, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'declare-variable', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 6, action: 'swap', details: [Object] },
    { line: 7, action: 'swap', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 6, action: 'swap', details: [Object] },
    { line: 7, action: 'swap', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 9, action: 'loop-end', details: null },
    { line: 2, action: 'loop-update', details: [Object] },
    { line: 3, action: 'declare-variable', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] }
  ],
  functions: { swap: [Function (anonymous)] }
}
Evaluating expression of type: BinaryExpression
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Evaluating expression of type: MemberExpression
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: Literal
Evaluating BinaryExpression: Identifier + Literal
Values: 1 + 1
Evaluating BinaryExpression: MemberExpression > MemberExpression
Values: 6 > 5
Evaluating expression of type: Identifier
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: Literal
Evaluating BinaryExpression: Identifier + Literal
Values: 1 + 1
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Declared variable temp with value: 5
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Declared variable temp with value: 5
Evaluating expression of type: UpdateExpression
Updating loop variable j to  2
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: BinaryExpression
Evaluating expression of type: BinaryExpression
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Evaluating expression of type: Identifier
Evaluating BinaryExpression: MemberExpression - Identifier
Values: 4 - 1
Evaluating expression of type: Literal
Evaluating BinaryExpression: BinaryExpression - Literal
Values: 3 - 1
Evaluating BinaryExpression: Identifier < BinaryExpression
Values: 2 < 2
For loop test condition result: false
Loop test condition is false, exiting loop
Evaluating expression of type: UpdateExpression
Updating loop variable i to  2
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Evaluating BinaryExpression: Identifier < MemberExpression
Values: 2 < 4
For loop test condition result: true
Loop test condition is true, entering loop body with context: {
  variables: { array: [ 1, 5, 6, 7 ], i: 2, j: 2, temp: 5 },
  history: [
    { line: 1, action: 'declare-variable', details: [Object] },
    { line: 2, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'declare-variable', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 6, action: 'swap', details: [Object] },
    { line: 7, action: 'swap', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 6, action: 'swap', details: [Object] },
    { line: 7, action: 'swap', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 9, action: 'loop-end', details: null },
    { line: 2, action: 'loop-update', details: [Object] },
    { line: 3, action: 'declare-variable', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 6, action: 'swap', details: [Object] },
    { line: 7, action: 'swap', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 9, action: 'loop-end', details: null },
    { line: 2, action: 'loop-update', details: [Object] }
  ],
  functions: { swap: [Function (anonymous)] }
}
Entering handleForStatement with node: ForStatement {
  type: 'ForStatement',
  init: VariableDeclaration {
    type: 'VariableDeclaration',
    declarations: [ [VariableDeclarator] ],
    kind: 'var',
    loc: { start: [Object], end: [Object] }
  },
  test: BinaryExpression {
    type: 'BinaryExpression',
    operator: '<',
    left: Identifier { type: 'Identifier', name: 'j', loc: [Object] },
    right: BinaryExpression {
      type: 'BinaryExpression',
      operator: '-',
      left: [BinaryExpression],
      right: [Literal],
      loc: [Object]
    },
    loc: { start: [Object], end: [Object] }
  },
  update: UpdateExpression {
    type: 'UpdateExpression',
    operator: '++',
    argument: Identifier { type: 'Identifier', name: 'j', loc: [Object] },
    prefix: false,
    loc: { start: [Object], end: [Object] }
  },
  body: BlockStatement {
    type: 'BlockStatement',
    body: [ [IfStatement] ],
    loc: { start: [Object], end: [Object] }
  },
  loc: { start: { line: 3, column: 4 }, end: { line: 9, column: 5 } }
}
Evaluating expression of type: Literal
Declared variable j with value: 0
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: BinaryExpression
Evaluating expression of type: BinaryExpression
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Evaluating expression of type: Identifier
Evaluating BinaryExpression: MemberExpression - Identifier
Values: 4 - 2
Evaluating expression of type: Literal
Evaluating BinaryExpression: BinaryExpression - Literal
Values: 2 - 1
Evaluating BinaryExpression: Identifier < BinaryExpression
Values: 0 < 1
For loop test condition result: true
Loop test condition is true, entering loop body with context: {
  variables: { array: [ 1, 5, 6, 7 ], i: 2, j: 0, temp: 5 },
  history: [
    { line: 1, action: 'declare-variable', details: [Object] },
    { line: 2, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'declare-variable', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 6, action: 'swap', details: [Object] },
    { line: 7, action: 'swap', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 6, action: 'swap', details: [Object] },
    { line: 7, action: 'swap', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 9, action: 'loop-end', details: null },
    { line: 2, action: 'loop-update', details: [Object] },
    { line: 3, action: 'declare-variable', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 6, action: 'swap', details: [Object] },
    { line: 7, action: 'swap', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 9, action: 'loop-end', details: null },
    { line: 2, action: 'loop-update', details: [Object] },
    { line: 3, action: 'declare-variable', details: [Object] }
  ],
  functions: { swap: [Function (anonymous)] }
}
Evaluating expression of type: BinaryExpression
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Evaluating expression of type: MemberExpression
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: Literal
Evaluating BinaryExpression: Identifier + Literal
Values: 0 + 1
Evaluating BinaryExpression: MemberExpression > MemberExpression
Values: 1 > 5
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Declared variable temp with value: 1
Evaluating expression of type: UpdateExpression
Updating loop variable j to  1
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: BinaryExpression
Evaluating expression of type: BinaryExpression
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Evaluating expression of type: Identifier
Evaluating BinaryExpression: MemberExpression - Identifier
Values: 4 - 2
Evaluating expression of type: Literal
Evaluating BinaryExpression: BinaryExpression - Literal
Values: 2 - 1
Evaluating BinaryExpression: Identifier < BinaryExpression
Values: 1 < 1
For loop test condition result: false
Loop test condition is false, exiting loop
Evaluating expression of type: UpdateExpression
Updating loop variable i to  3
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Evaluating BinaryExpression: Identifier < MemberExpression
Values: 3 < 4
For loop test condition result: true
Loop test condition is true, entering loop body with context: {
  variables: { array: [ 1, 5, 6, 7 ], i: 3, j: 1, temp: 1 },
  history: [
    { line: 1, action: 'declare-variable', details: [Object] },
    { line: 2, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'declare-variable', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 6, action: 'swap', details: [Object] },
    { line: 7, action: 'swap', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 6, action: 'swap', details: [Object] },
    { line: 7, action: 'swap', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 9, action: 'loop-end', details: null },
    { line: 2, action: 'loop-update', details: [Object] },
    { line: 3, action: 'declare-variable', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 6, action: 'swap', details: [Object] },
    { line: 7, action: 'swap', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 9, action: 'loop-end', details: null },
    { line: 2, action: 'loop-update', details: [Object] },
    { line: 3, action: 'declare-variable', details: [Object] },
    { line: 4, action: 'if-test', details: [Object] },
    { line: 5, action: 'declare-variable', details: [Object] },
    { line: 3, action: 'loop-update', details: [Object] },
    { line: 9, action: 'loop-end', details: null },
    { line: 2, action: 'loop-update', details: [Object] }
  ],
  functions: { swap: [Function (anonymous)] }
}
Entering handleForStatement with node: ForStatement {
  type: 'ForStatement',
  init: VariableDeclaration {
    type: 'VariableDeclaration',
    declarations: [ [VariableDeclarator] ],
    kind: 'var',
    loc: { start: [Object], end: [Object] }
  },
  test: BinaryExpression {
    type: 'BinaryExpression',
    operator: '<',
    left: Identifier { type: 'Identifier', name: 'j', loc: [Object] },
    right: BinaryExpression {
      type: 'BinaryExpression',
      operator: '-',
      left: [BinaryExpression],
      right: [Literal],
      loc: [Object]
    },
    loc: { start: [Object], end: [Object] }
  },
  update: UpdateExpression {
    type: 'UpdateExpression',
    operator: '++',
    argument: Identifier { type: 'Identifier', name: 'j', loc: [Object] },
    prefix: false,
    loc: { start: [Object], end: [Object] }
  },
  body: BlockStatement {
    type: 'BlockStatement',
    body: [ [IfStatement] ],
    loc: { start: [Object], end: [Object] }
  },
  loc: { start: { line: 3, column: 4 }, end: { line: 9, column: 5 } }
}
Evaluating expression of type: Literal
Declared variable j with value: 0
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: BinaryExpression
Evaluating expression of type: BinaryExpression
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Evaluating expression of type: Identifier
Evaluating BinaryExpression: MemberExpression - Identifier
Values: 4 - 3
Evaluating expression of type: Literal
Evaluating BinaryExpression: BinaryExpression - Literal
Values: 1 - 1
Evaluating BinaryExpression: Identifier < BinaryExpression
Values: 0 < 0
For loop test condition result: false
Loop test condition is false, exiting loop
Evaluating expression of type: UpdateExpression
Updating loop variable i to  4
Evaluating expression of type: BinaryExpression
Evaluating expression of type: Identifier
Evaluating expression of type: MemberExpression
Evaluating expression of type: Identifier
Evaluating BinaryExpression: Identifier < MemberExpression
Values: 4 < 4
For loop test condition result: false
Loop test condition is false, exiting loop
